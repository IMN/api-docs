{
  "swagger": "2.0",
  "info": {
    "title": "BeezUP API",
    "description": "# The REST API of BeezUP system\n## Overview\nThe REST APIs provide programmatic access to read and write BeezUP data. \nBasically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !\n\nThe main features are:\n- Register and manage your account\n- Create and manage and share your stores with your friends/co-workers.\n- Import your product catalog and schedule the auto importation\n- Search the channels your want to use\n- Configure your channels for your catalogs to export your product information:\n    - cost and general settings\n    - category and columns mappings\n    - your will be able to create and manage your custom column\n    - put in place exlusion filters based on simple conditions on your product data\n    - override product values\n    - get product vision for a channel catalog scope\n- Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product.\n- Automatize your optimisation by using rules!\n- And of course... Manage your orders harvested from all your marketplaces:\n    - Synchronize your orders in an uniformized way\n    - Get the available actions and update the order status\n- ...and more!\n\n## Authentication credentials\nThe public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials.\nWe give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).\n\nThe user API with the base path **/v2/user** requires a token which is available on this page:\nhttps://go.beezup.com/Account/MyAccount\n\n## Things to keep in mind\n### API Rate Limits\n- The BeezUP REST API is limited to 100 calls/minute.\n\n### Media type\nThe default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.\n\n### Required content type\nThe required and default encoding for the request and responses is UTF8.\n\n### Required date time format\nAll our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.\n\n### Base URL\nThe Base URL of the BeezUP API Order Management REST API conforms to the following template.\n\nhttps://api.beezup.com\n\nAll URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.\n\nYou can test our API on https://api-docs.beezup.com/swagger-ui\\\nYou can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API)\n",
    "version": "2.0",
    "x-logo": {
      "url": "https://avatars0.githubusercontent.com/u/25665430",
      "backgroundColor": "#FFFFFF"
    },
    "contact": {
      "email": "support@beezup.com"
    },
    "license": {
      "name": "BeezUP",
      "url": "http://www.beezup.com"
    }
  },
  "host": "api.beezup.com",
  "basePath": "/v2",
  "x-beezup-api-ops": {
    "repo": "Customer",
    "apiName": "V2PublicSecurity",
    "appRoot": "BeezUP.Customer.WebService",
    "namespace": "BeezUP.Customer.WebService",
    "comment": "No change. Just server side generation.\n"
  },
  "x-basePath": "/v2/public/security",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Public - Security - Security",
      "x-displayName": "Security"
    },
    {
      "name": "Public - Channels - Public Channels",
      "description": "All our public channels operations",
      "x-displayName": "Public Channels"
    },
    {
      "name": "Public - List of Values - LOV",
      "description": "All LOV operations",
      "x-displayName": "LOV"
    },
    {
      "name": "User - List of Values - LOV",
      "description": "All LOV operations",
      "x-displayName": "LOV"
    },
    {
      "name": "Customer - Global",
      "description": "All global operations",
      "x-displayName": "Global"
    },
    {
      "name": "Customer - Account",
      "description": "All user account operations",
      "x-displayName": "Account"
    },
    {
      "name": "Customer - Security",
      "description": "All security operations",
      "x-displayName": "Security"
    },
    {
      "name": "Customer - Stores",
      "description": "All stores operations",
      "x-displayName": "Stores"
    },
    {
      "name": "Customer - Shares",
      "description": "All store share operations",
      "x-displayName": "Shares"
    },
    {
      "name": "Customer - Alerts",
      "description": "All stores' alerts operations",
      "x-displayName": "Alerts"
    },
    {
      "name": "Customer - Rights",
      "description": "All store rights operations",
      "x-displayName": "Rights"
    },
    {
      "name": "Customer - Friends",
      "description": "All friends operations",
      "x-displayName": "Friends"
    },
    {
      "name": "Customer - Contracts",
      "description": "All contracts and offer operations",
      "x-displayName": "Contracts"
    },
    {
      "name": "Customer - Invoices",
      "description": "All invoice operations",
      "x-displayName": "Invoices"
    },
    {
      "name": "Catalogs - Auto",
      "description": "All operations related to the Auto importation",
      "x-displayName": "Auto"
    },
    {
      "name": "Catalogs - Global",
      "description": "All operations related to global information",
      "x-displayName": "Global"
    },
    {
      "name": "Catalogs - Importation Process",
      "description": "All operations concerning the importation process",
      "x-displayName": "Importation Process"
    },
    {
      "name": "Catalogs - Importation Catalog Info",
      "description": "All operations related to the catalog information during the importation",
      "x-displayName": "Importation Catalog Info"
    },
    {
      "name": "Catalogs - Catalog",
      "description": "All operation related to the catalog",
      "x-displayName": "Catalog"
    },
    {
      "name": "Channels - Channels Global",
      "description": "All global operations",
      "x-displayName": "Channels Global"
    },
    {
      "name": "Channel Catalogs - Global",
      "description": "All global operations",
      "x-displayName": "Global"
    },
    {
      "name": "Channel Catalogs - Settings",
      "description": "All settings operations",
      "x-displayName": "Settings"
    },
    {
      "name": "Channel Catalogs - Column Mappings",
      "description": "All column mapping operations",
      "x-displayName": "Column Mappings"
    },
    {
      "name": "Channel Catalogs - Category Mappings",
      "description": "All category mapping operations",
      "x-displayName": "Category Mappings"
    },
    {
      "name": "Channel Catalogs - Exclusion Filters",
      "description": "All exclusion filters operations",
      "x-displayName": "Exclusion Filters"
    },
    {
      "name": "Channel Catalogs - Products",
      "description": "All products operations",
      "x-displayName": "Products"
    },
    {
      "name": "Channel Catalogs - Products Overrides",
      "description": "All products overrides operations",
      "x-displayName": "Products Overrides"
    },
    {
      "name": "Channel Catalogs - Products Optimisation",
      "description": "All products optimisation operations",
      "x-displayName": "Products Optimisation"
    },
    {
      "name": "Channel Catalogs - Exportations",
      "description": "All channel catalog exportation operations",
      "x-displayName": "Exportations"
    },
    {
      "name": "Marketplaces - Channel catalogs - Global",
      "description": "Operations to fetch your marketplace account related to your channel catalogs",
      "x-displayName": "Global"
    },
    {
      "name": "Marketplaces - Channel catalogs - Publications",
      "description": "Operations to fetch your marketplace account's catalog publication history",
      "x-displayName": "Publications"
    },
    {
      "name": "Marketplaces - Channel catalogs - Settings",
      "description": "Operations to manage your channel catalogs' marketplace settings",
      "x-displayName": "Settings"
    },
    {
      "name": "Marketplaces - Orders - Global",
      "description": "All global operations (cross marketplace)",
      "x-displayName": "Global"
    },
    {
      "name": "Marketplaces - Orders - AutoTransitions",
      "description": "All auto transitions operations",
      "x-displayName": "AutoTransitions"
    },
    {
      "name": "Marketplaces - Orders - List",
      "description": "All Order list operations",
      "x-displayName": "List"
    },
    {
      "name": "Marketplaces - Orders - Order",
      "description": "All operations related to a single Order",
      "x-displayName": "Order"
    },
    {
      "name": "Marketplaces - Orders - Batches",
      "description": "All batch operations on Orders to reduce call rate",
      "x-displayName": "Batches"
    },
    {
      "name": "Marketplaces - Orders - Exports",
      "description": "All Order report exportation operations",
      "x-displayName": "Exports"
    },
    {
      "name": "Analytics - Global",
      "description": "All global operations concerning Analytics API",
      "x-displayName": "Global"
    },
    {
      "name": "Analytics - Tracking",
      "description": "All tracking operations",
      "x-displayName": "Tracking"
    },
    {
      "name": "Analytics - Statistics",
      "description": "All statitics operations",
      "x-displayName": "Statistics"
    },
    {
      "name": "Analytics - Rules",
      "description": "All rules operations. Rules are automatic optimisations based on report filters.",
      "x-displayName": "Rules"
    },
    {
      "name": "Analytics - Reports",
      "description": "All reports operations",
      "x-displayName": "Reports"
    },
    {
      "name": "Analytics - Optimisations",
      "description": "All optmisations operations",
      "x-displayName": "Optimisations"
    }
  ],
  "paths": {
    "/public/security/login": {
      "post": {
        "tags": [
          "Public - Security - Security"
        ],
        "summary": "Login",
        "description": "User Login - The login will give your tokens",
        "operationId": "Login",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/loginRequest"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Your tokens",
            "schema": {
              "$ref": "#/definitions/apiCredentials"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "403": {
            "description": "Invalid credentials"
          },
          "500": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/public/security/register": {
      "post": {
        "tags": [
          "Public - Security - Security"
        ],
        "summary": "User Registration",
        "description": "User Registration - Create a new user on BeezUP",
        "operationId": "Register",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/registerRequest"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Customer registered"
          },
          "400": {
            "description": "Email or password is invalid. Disposable email are refused."
          },
          "409": {
            "description": "Email already used"
          },
          "500": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/public/security/lostpassword": {
      "post": {
        "tags": [
          "Public - Security - Security"
        ],
        "summary": "Lost password",
        "description": "Lost password - Your password will be regenerated and sent to your email",
        "operationId": "LostPassword",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.Email"
            },
            "description": "Your email",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "New password sent"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Email not found"
          },
          "500": {
            "$ref": "#/responses/GeneralError"
          },
          "502": {
            "description": "Problem with SMTP service",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          }
        }
      }
    },
    "/public/channels/": {
      "get": {
        "tags": [
          "Public - Channels - Public Channels"
        ],
        "summary": "Get public channel index",
        "description": "Use this operation to get the correct link to the channels and to the list of values",
        "operationId": "GetChannelsIndex",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel list regrouped by country and links to list of values",
            "schema": {
              "$ref": "#/definitions/publicChannelIndex"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/public/channels/{countryIsoCode}": {
      "get": {
        "tags": [
          "Public - Channels - Public Channels"
        ],
        "summary": "The channel list for one country",
        "operationId": "GetChannels",
        "parameters": [
          {
            "name": "countryIsoCode",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\\nTo know which country are available you have to use the operation: GetChannelsByCountry\n"
          },
          {
            "$ref": "#/parameters/acceptEncodingRequiredParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The channel list for one country",
            "schema": {
              "$ref": "#/definitions/channelInfoList"
            },
            "examples": {
              "application/json": {
                "channels": [
                  {
                    "name": "Amazon Direct FRA",
                    "homeUrl": "http://www.amazon.fr",
                    "logoUrl": "http://beezupcdn.blob.core.windows.net/comparators/Amazon%2520Direct%2520FRA.png",
                    "types": [
                      "Marketplace"
                    ]
                  }
                ]
              }
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "Channel country not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/public/lov/": {
      "get": {
        "summary": "Get all list names",
        "operationId": "GetPublicLovIndex",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "tags": [
          "Public - List of Values - LOV"
        ],
        "responses": {
          "200": {
            "description": "Get the list names",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/publicLovIndex"
            }
          },
          "304": {
            "description": "The ETag sent in the http header If-None-Match did not change. So you can keep your version.",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/public/lov/{listName}": {
      "get": {
        "tags": [
          "Public - List of Values - LOV"
        ],
        "summary": "Get the list of values related to this list name",
        "operationId": "GetPublicListOfValues",
        "parameters": [
          {
            "name": "listName",
            "in": "path",
            "required": true,
            "description": "The list of value name your want to get",
            "type": "string"
          },
          {
            "$ref": "#/parameters/acceptLanguageParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of values",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              },
              "Content-Language": {
                "description": "Indicates the language use in the response",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/publicListOfValuesResponse"
            }
          },
          "304": {
            "description": "The ETag sent in the http header If-None-Match did not change. So you can keep your version.",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/user/lov/": {
      "get": {
        "summary": "Get all list names",
        "operationId": "GetUserLovIndex",
        "tags": [
          "User - List of Values - LOV"
        ],
        "responses": {
          "200": {
            "description": "Get the list names",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/userLovIndex"
            }
          },
          "304": {
            "description": "The ETag sent in the http header If-None-Match did not change. So you can keep your version.",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/lov/{listName}": {
      "get": {
        "tags": [
          "User - List of Values - LOV"
        ],
        "summary": "Get the list of values related to this list name",
        "operationId": "GetUserListOfValues",
        "parameters": [
          {
            "name": "listName",
            "in": "path",
            "required": true,
            "description": "The list of value name your want to get",
            "type": "string"
          },
          {
            "$ref": "#/parameters/acceptLanguageParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of values",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              },
              "Content-Language": {
                "description": "Indicates the language use in the response",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/userListOfValuesResponse"
            }
          },
          "304": {
            "description": "The ETag sent in the http header If-None-Match did not change. So you can keep your version.",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/": {
      "get": {
        "tags": [
          "Customer - Global"
        ],
        "summary": "The index of all operations and LOV",
        "operationId": "GetCustomerIndex",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/customerIndex"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/account": {
      "get": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Get user account information",
        "operationId": "GetUserAccountInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "User account information",
            "schema": {
              "$ref": "#/definitions/accountInfo"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/account/resendEmailActivation": {
      "post": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Resend email activation",
        "operationId": "ResendEmailActivation",
        "responses": {
          "204": {
            "description": "Email activation resent"
          },
          "400": {
            "description": "Email activation not sent because of email problem. Ensure that your email is the correct one.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "429": {
            "description": "Email activation sent recently, must retry later. (One per hour)",
            "headers": {
              "Retry-After": {
                "description": "The duration in second to wait before making another request",
                "type": "integer",
                "default": 60,
                "x-example": 60
              }
            },
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Email activation not available because user account already activated.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "502": {
            "description": "Email activate send failed because of our email service. Ensure that your email is the correct one otherwise please contact our support if the problem persists.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/account/activate": {
      "post": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Activate the user account",
        "operationId": "ActivateUserAccount",
        "parameters": [
          {
            "name": "emailActivationId",
            "in": "body",
            "description": "The email activation id received by email.",
            "required": true,
            "schema": {
              "format": "guid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User account activated."
          },
          "403": {
            "description": "Invalid email activation id",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "User account already activated.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/account/personalInfo": {
      "put": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Save user personal information",
        "operationId": "SavePersonalInfo",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/personalInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User account information updated"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/account/companyInfo": {
      "put": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Change company information",
        "operationId": "SaveCompanyInfo",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/companyInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Company information saved"
          },
          "400": {
            "description": "Bad request or invalid VATNumber.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "403": {
            "description": "User not found or unauthorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/account/profilePictureInfo": {
      "get": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Get profile picture information",
        "operationId": "GetProfilePictureInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile picture information",
            "schema": {
              "$ref": "#/definitions/profilePictureInfoResponse"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Change user picture information",
        "operationId": "SaveProfilePictureInfo",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profilePictureInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User profile picture information saved."
          },
          "400": {
            "description": "BadRequest (Url invalid)",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "413": {
            "description": "The picture size is too large",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "415": {
            "description": "The content type of the image must be an image",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/account/creditCardInfo": {
      "get": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Get credit card information",
        "operationId": "GetCreditCardInfo",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "User credit card information",
            "schema": {
              "$ref": "#/definitions/creditCardInfoResponse"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "Credit Card not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "503": {
            "description": "We are unable to get your credit card info. This is a temporary state. Please retry later",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Save user credit card info",
        "operationId": "SaveCreditCardInfo",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Credit card info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/creditCardInfo"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The credit card information has been accepted for processing, the authorization will be processed shortly."
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "502": {
            "description": "Communication problem with our payment service",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/account/changePassword": {
      "post": {
        "tags": [
          "Customer - Account"
        ],
        "summary": "Change user password",
        "operationId": "ChangePassword",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changePasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Password updated"
          },
          "400": {
            "description": "Old password is invalid or the new password does not respect the password's constraints",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/security/logout": {
      "post": {
        "tags": [
          "Customer - Security"
        ],
        "summary": "Log out the current user from go2",
        "description": "Log out the current user from go2",
        "operationId": "Logout",
        "responses": {
          "204": {
            "description": "User logout"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/stores": {
      "get": {
        "tags": [
          "Customer - Stores"
        ],
        "summary": "Get store list",
        "operationId": "GetStores",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Store list",
            "schema": {
              "$ref": "#/definitions/storeList"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customer - Stores"
        ],
        "summary": "Create a new store",
        "operationId": "CreateStore",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createStoreRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The store has been created successfully. The http header Location contains the new resource url. The body contains the link to the new resource.",
            "schema": {
              "$ref": "#/definitions/links.getStoreLink"
            }
          },
          "402": {
            "description": "The maximum amount of store has been reached. Please upgrade your contract.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessagePaymentRequired"
            }
          },
          "409": {
            "description": "The customer has a store with the same name",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/stores/{storeId}": {
      "get": {
        "tags": [
          "Customer - Stores"
        ],
        "summary": "Get store's information",
        "operationId": "GetStore",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The store information",
            "schema": {
              "$ref": "#/definitions/store"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "Store not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Customer - Stores"
        ],
        "summary": "Update some store's information.",
        "description": "Update some store's information. FYI, you cannot change the country.\n",
        "operationId": "UpdateStore",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateStoreRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Store updated"
          },
          "404": {
            "description": "Store not found or customer not the owner",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "The store name already used",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Customer - Stores"
        ],
        "summary": "Delete a store",
        "operationId": "DeleteStore",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Store deleted"
          },
          "404": {
            "description": "Store not found or customer not the owner",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/stores/{storeId}/rights": {
      "get": {
        "tags": [
          "Customer - Rights"
        ],
        "summary": "Get store's rights",
        "operationId": "GetRights",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "The store's rights",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/functionalityRightInfo"
              }
            }
          },
          "404": {
            "description": "Store not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/stores/{storeId}/alerts": {
      "get": {
        "tags": [
          "Customer - Alerts"
        ],
        "summary": "Get store's alerts",
        "operationId": "GetStoreAlerts",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "User account alerts information",
            "schema": {
              "$ref": "#/definitions/storeAlerts"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "Store not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customer - Alerts"
        ],
        "summary": "Save store alerts",
        "description": "You just have to send the alert you want to update, does not need all alerts. (PARTIAL UPDATE ACCEPTED)",
        "operationId": "SaveStoreAlerts",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/saveStoreAlertsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Store alerts saved"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Store not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/stores/{storeId}/shares": {
      "get": {
        "tags": [
          "Customer - Shares"
        ],
        "summary": "Get shares related to this store",
        "operationId": "GetStoreShares",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The sharing list of the store",
            "schema": {
              "$ref": "#/definitions/storeShares"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "Store not found or customer not the owner",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customer - Shares"
        ],
        "summary": "Share a store to another user",
        "operationId": "ShareStore",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "email",
            "in": "body",
            "description": "Your friend's email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/friendEmail"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Store shared"
          },
          "402": {
            "description": "Free offer is not allowed to share store.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessagePaymentRequired"
            }
          },
          "404": {
            "description": "Only the owner of the store can make this operation or user not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/stores/{storeId}/shares/{userId}": {
      "delete": {
        "tags": [
          "Customer - Shares"
        ],
        "summary": "Delete a share of a store to another user",
        "operationId": "DeleteStoreShare",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The friend user id",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "204": {
            "description": "Share deleted"
          },
          "404": {
            "description": "Store not found or customer not the owner",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/friends/{userId}": {
      "get": {
        "tags": [
          "Customer - Friends"
        ],
        "summary": "Get friend information",
        "operationId": "GetFriendInfo",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Your friend user id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get friend info",
            "schema": {
              "$ref": "#/definitions/userFriendInfo"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/billingPeriods": {
      "get": {
        "tags": [
          "Customer - Contracts"
        ],
        "summary": "Get billing periods conditions",
        "operationId": "GetBillingPeriods",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the billing periods conditions",
            "schema": {
              "$ref": "#/definitions/billingPeriodList"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/offers": {
      "get": {
        "tags": [
          "Customer - Contracts"
        ],
        "summary": "Get all standard offers",
        "operationId": "GetStandardOffers",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all standard offers",
            "schema": {
              "$ref": "#/definitions/standardOffers"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customer - Contracts"
        ],
        "summary": "Get offer pricing",
        "description": "Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts\n",
        "operationId": "GetOffer",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/offerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the offer proposal considering your current contract",
            "schema": {
              "$ref": "#/definitions/offer"
            }
          },
          "400": {
            "description": "Bad request. (Invalid billing period, invalid offer, etc.). You cannot get a pricing for a free offer.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "403": {
            "description": "You current contract is not modifiable. Please choose another offer.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/contracts": {
      "get": {
        "tags": [
          "Customer - Contracts"
        ],
        "summary": "Get contract list",
        "operationId": "GetContracts",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract list",
            "schema": {
              "$ref": "#/definitions/contracts"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customer - Contracts"
        ],
        "summary": "Create a new contract",
        "description": "Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers\n",
        "operationId": "CreateContract",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createContract"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New contract has been created. Some warnings can be present in response.",
            "schema": {
              "$ref": "#/definitions/createContractResponse"
            }
          },
          "400": {
            "description": "Bad request. (Invalid billing period, invalid offer, etc.)",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "403": {
            "description": "The contract is not modifiable or the coupon offer has been already used",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/contracts/current/disableAutoRenewal": {
      "post": {
        "tags": [
          "Customer - Contracts"
        ],
        "summary": "Schedule termination of your current contract at the end of the commitment.",
        "description": "By default your contract are automatically renew. By calling this operation you can disable the auto renewal.",
        "operationId": "TerminateCurrentContract",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Indicate the termination reason",
            "required": true,
            "schema": {
              "$ref": "#/definitions/terminateContract"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Your current contract termination has been scheduled"
          },
          "400": {
            "description": "Invalid reason type",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "No current contract",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/contracts/current/reenableAutoRenewal": {
      "post": {
        "tags": [
          "Customer - Contracts"
        ],
        "summary": "Reactivate your terminated contract.",
        "description": "By calling this operation you can re-enable the auto renewal.",
        "operationId": "ReactivateCurrentContract",
        "responses": {
          "204": {
            "description": "Your current contract has been resumed"
          },
          "404": {
            "description": "No current contract",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/contracts/next": {
      "delete": {
        "tags": [
          "Customer - Contracts"
        ],
        "summary": "Delete your next contract",
        "operationId": "DeleteNextContract",
        "responses": {
          "204": {
            "description": "Next contract has been deleted"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/customer/invoices": {
      "get": {
        "tags": [
          "Customer - Invoices"
        ],
        "summary": "Get all your invoices",
        "operationId": "GetInvoices",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all invoices of a customer",
            "schema": {
              "$ref": "#/definitions/invoiceList"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/": {
      "get": {
        "tags": [
          "Catalogs - Global"
        ],
        "operationId": "CatalogIndex",
        "summary": "Get the index of the catalog API",
        "description": "The operation will give you all the operations you will be able to do and all the LOV used in this API.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/catalogIndex"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/beezupColumns": {
      "get": {
        "tags": [
          "Catalogs - Global"
        ],
        "operationId": "Catalog_GetBeezUPColumns",
        "summary": "Get the BeezUP columns",
        "description": "Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.",
        "responses": {
          "200": {
            "description": "The catalog API index",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/beezUPColumnConfiguration"
              }
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "CatalogStoreIndex",
        "summary": "Get the index of the catalog API for this store",
        "description": "The operation will give you all the operations you will be able to do on this store for this API.",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "The catalog index",
            "schema": {
              "$ref": "#/definitions/catalogStoreIndex"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/inputConfiguration": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Importation_GetManualUpdateLastInputConfig",
        "summary": "Get the last input configuration",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/lastManualImportInputConfiguration"
            }
          },
          "404": {
            "description": "StoreId or Manual Update last configuration not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/catalogColumns": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_GetCatalogColumns",
        "summary": "Get catalog column list",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Catalog column list",
            "schema": {
              "$ref": "#/definitions/catalogColumnList"
            }
          },
          "404": {
            "description": "StoreId not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/catalogColumns/{columnId}/rename": {
      "post": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_ChangeCatalogColumnUserName",
        "summary": "Change Catalog Column User Name",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/catalogColumnId"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changeUserColumnNameRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Catalog column user name changed"
          },
          "400": {
            "description": "When a user column name is duplicate.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "$ref": "#/responses/importAlreadyInProgress"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/customColumns": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_GetCustomColumns",
        "summary": "Get custom column list",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom column list",
            "schema": {
              "$ref": "#/definitions/customColumnList"
            }
          },
          "404": {
            "description": "StoreId not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/customColumns/{columnId}": {
      "put": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_SaveCustomColumn",
        "summary": "Create or replace a custom column",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/customColumnId"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createCustomColumnRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom column saved"
          },
          "400": {
            "description": "Occurs when a catalog custom column id is already used by a catalog column.\nWhen the catalog custom column count limit has been reached.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store."
          },
          "409": {
            "$ref": "#/responses/importAlreadyInProgress"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "summary": "Delete custom column",
        "operationId": "Catalog_DeleteCustomColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/customColumnId"
          }
        ],
        "responses": {
          "204": {
            "description": "Custom column deleted"
          },
          "403": {
            "description": "Occurs when the parent category is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "When a catalog importation is already in progress!",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/customColumns/{columnId}/rename": {
      "post": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "summary": "Change Custom Column User Name",
        "operationId": "Catalog_ChangeCustomColumnUserName",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/customColumnId"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changeUserColumnNameRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom column renamed"
          },
          "400": {
            "description": "When a user column name is duplicate.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "$ref": "#/responses/importAlreadyInProgress"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/customColumns/{columnId}/expression": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "summary": "Get the encrypted custom column expression",
        "operationId": "Catalog_GetCustomColumnExpression",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/customColumnId"
          }
        ],
        "responses": {
          "200": {
            "description": "Encrypted expression",
            "schema": {
              "type": "string",
              "example": "zlkzjkzjlzlknzklnzlknaklnaklanlknaklan"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when a catalog custom column is not found."
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "summary": "Change custom column expression",
        "operationId": "Catalog_ChangeCustomColumnExpression",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/customColumnId"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changeCustomColumnExpressionRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom column expression saved"
          },
          "403": {
            "description": "Occurs when the user try to change a custom column related to a Category. If you want to change this custom column expression you have to make a new manual importation.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when a catalog custom column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "$ref": "#/responses/importAlreadyInProgress"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/customColumns/computeExpression": {
      "post": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "summary": "Compute the expression for this catalog.",
        "operationId": "Catalog_ComputeExpression",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/computeExpressionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compute an expression",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/categories": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_GetCategories",
        "summary": "Get category list",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "Accept-Encoding",
            "description": "Indicates that the client accepts that the response will be compressed to reduce traffic size.",
            "in": "header",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories",
            "headers": {
              "Content-Encoding": {
                "description": "Indicates the compression use in the response",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/categoryList"
            }
          },
          "404": {
            "description": "StoreId not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/products/list": {
      "post": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_GetProducts",
        "summary": "Get product list",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/getProductsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product list",
            "schema": {
              "$ref": "#/definitions/productList"
            }
          },
          "404": {
            "description": "StoreId not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/products/random": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_GetRandomProducts",
        "summary": "Get random product list",
        "description": "We will return 10 products randomly selected with all product values",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Random product list",
            "schema": {
              "$ref": "#/definitions/randomProductList"
            }
          },
          "404": {
            "description": "StoreId not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/products/{productId}": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_GetProductByProductId",
        "summary": "Get product by ProductId",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "productId",
            "description": "The product identifier you want to get",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Product",
            "schema": {
              "$ref": "#/definitions/product"
            }
          },
          "404": {
            "description": "StoreId not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/products": {
      "get": {
        "tags": [
          "Catalogs - Catalog"
        ],
        "operationId": "Catalog_GetProductBySku",
        "summary": "Get product by Sku",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "sku",
            "description": "The product sku you want to get",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product",
            "schema": {
              "$ref": "#/definitions/product"
            }
          },
          "404": {
            "description": "StoreId or Product not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations": {
      "get": {
        "tags": [
          "Catalogs - Importation Process"
        ],
        "summary": "Get the latest catalog importation reporting",
        "operationId": "Importation_GetReportings",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "The last importation reportings",
            "schema": {
              "$ref": "#/definitions/importationsResponse"
            }
          },
          "404": {
            "description": "StoreId not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/start": {
      "post": {
        "tags": [
          "Catalogs - Importation Process"
        ],
        "summary": "Start Manual Import",
        "operationId": "Importation_StartManualUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/startManualImportRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/importStarted"
          },
          "400": {
            "description": "Missing Input configuration in the request\nOccurs when there is a duplicate file number in the input configuration\nOccurs when there is a duplicate file Uri in the input configuration",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "StoreId not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "$ref": "#/responses/importAlreadyInProgress"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}": {
      "get": {
        "tags": [
          "Catalogs - Importation Process"
        ],
        "summary": "Get the importation status",
        "operationId": "Importation_GetImportationMonitoring",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/importationMonitoring"
            }
          },
          "404": {
            "description": "ExecutionId not found or not yet synchronized. If not synchronized within 30 sec after the import has been started, please contact our support",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/cancel": {
      "post": {
        "tags": [
          "Catalogs - Importation Process"
        ],
        "summary": "Cancel importation",
        "operationId": "Importation_Cancel",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "204": {
            "description": "Catalog importation canceled"
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/technicalProgression": {
      "get": {
        "tags": [
          "Catalogs - Importation Process"
        ],
        "summary": "Get technical progression",
        "operationId": "Importation_TechnicalProgression",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "200": {
            "description": "When the technical progression is correctly retrived",
            "schema": {
              "$ref": "#/definitions/importationTechnicalProgression"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns": {
      "post": {
        "tags": [
          "Catalogs - Importation Process"
        ],
        "summary": "Configure remaining catalog columns",
        "description": "This operation should be used after you have mapped the required BeezUP Columns",
        "operationId": "Importation_ConfigureRemainingCatalogColumns",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "204": {
            "description": "Remaining catalog columns have been configured. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "400": {
            "description": "When a user column name is duplicate.\nWhen the catalog column name are duplicate.\nWhen the BeezUP column have duplicate mapping.\nOccurs when the required beezup column is not mapped to any column.\nOccurs when the category hierarchy is not correctly mapped.\nOccurs when the duplicate strategy on {catalogColumnName} is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished."
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/commitColumns": {
      "post": {
        "tags": [
          "Catalogs - Importation Process"
        ],
        "summary": "Commit columns",
        "operationId": "Importation_CommitColumns",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "204": {
            "description": "Columns configuration have been committed. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "400": {
            "description": "When a user column name is duplicate.\nWhen the catalog column name are duplicate.\nWhen the BeezUP column have duplicate mapping.\nOccurs when the required beezup column is not mapped to any column.\nOccurs when the category hierarchy is not correctly mapped.\nWhen the catalog column count limit has been reached.\nWhen the catalog custom column count limit has been reached.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/commit": {
      "post": {
        "tags": [
          "Catalogs - Importation Process"
        ],
        "summary": "Commit Importation",
        "operationId": "Importation_Commit",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "204": {
            "description": "Catalog importation committed"
          },
          "400": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}": {
      "get": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Get the product sample related to this importation with all columns (catalog and custom)",
        "operationId": "Importation_GetProductSample",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/productSampleIndex"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productSample"
            }
          },
          "404": {
            "description": "ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support\n      schema:\n$ref: '#/definitions/BeezUP.Common.ErrorResponseMessage'"
          },
          "409": {
            "description": "Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}": {
      "get": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Get product sample custom column value related to this importation.",
        "description": "/!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values",
        "operationId": "Importation_GetProductSampleCustomColumnValue",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/productSampleIndex"
          },
          {
            "$ref": "#/parameters/customColumnId"
          }
        ],
        "responses": {
          "200": {
            "description": "Product sample custom column value",
            "schema": {
              "type": "string",
              "example": "A value computed from a expression"
            }
          },
          "404": {
            "headers": {
              "Retry-After": {
                "description": "The duration in second to wait before polling this resource",
                "type": "integer",
                "minimum": 5,
                "default": 5,
                "x-example": 5
              }
            },
            "description": "ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns": {
      "get": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Get detected catalog columns during this importation.",
        "operationId": "Importation_GetDetectedCatalogColumns",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/detectedCatalogColumnList"
            }
          },
          "404": {
            "description": "ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}": {
      "post": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Configure catalog column",
        "operationId": "Importation_ConfigureCatalogColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/customColumnId"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configureCatalogColumnCatalogRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Catalog column configured. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "400": {
            "description": "\nWhen the catalog column name is not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore": {
      "post": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Ignore Column",
        "operationId": "Importation_IgnoreColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/customColumnId"
          }
        ],
        "responses": {
          "204": {
            "description": "Catalog column ignored. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend": {
      "post": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Reattend Column",
        "operationId": "Importation_ReattendColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/customColumnId"
          }
        ],
        "responses": {
          "204": {
            "description": "Catalog column reattended. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map": {
      "post": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Map catalog column to a BeezUP column",
        "operationId": "Importation_MapCatalogColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/catalogColumnId"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mapBeezUPColumnRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Catalog column mapped. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap": {
      "post": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Unmap catalog column",
        "operationId": "Importation_UnmapCatalogColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/catalogColumnId"
          }
        ],
        "responses": {
          "204": {
            "description": "Catalog Column unmapped. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/customColumns": {
      "get": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Get custom columns currently place in this importation",
        "operationId": "Importation_GetCustomColumns",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom columns of current Importation successfully retrieved",
            "schema": {
              "$ref": "#/definitions/importationCustomColumnList"
            }
          },
          "404": {
            "description": "ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression": {
      "get": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Get the encrypted custom column expression in this importation",
        "operationId": "Importation_GetCustomColumnExpression",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/customColumnId"
          }
        ],
        "responses": {
          "200": {
            "description": "Encrypted expression",
            "schema": {
              "type": "string",
              "example": "zlkzjkzjlzlknzklnzlknaklnaklanlknaklan"
            }
          },
          "404": {
            "description": "ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}": {
      "put": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Create or replace a custom column",
        "operationId": "Importation_SaveCustomColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/customColumnId"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changeCustomColumnRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom column configured. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Delete Custom Column",
        "operationId": "Importation_DeleteCustomColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/customColumnId"
          }
        ],
        "responses": {
          "204": {
            "description": "When the custom column for this importation is correctly deleted"
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map": {
      "post": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Map custom column to a BeezUP column",
        "operationId": "Importation_MapCustomColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/customColumnId"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mapBeezUPColumnRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom column mapped. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap": {
      "post": {
        "tags": [
          "Catalogs - Importation Catalog Info"
        ],
        "summary": "Unmap custom column",
        "operationId": "Importation_UnmapCustomColumn",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/customColumnId"
          }
        ],
        "responses": {
          "204": {
            "description": "Custom column unmapped. This operation has no impact on the current catalog until you commit the catalog importation."
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.\nOccurs when the message concerns the wrong execution.\nOccurs when a catalog column is not found.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Occurs when this importation is already finished.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/autoImport/activate": {
      "post": {
        "tags": [
          "Catalogs - Auto"
        ],
        "operationId": "Importation_ActivateAutoImport",
        "summary": "Activate the auto importation of the last successful manual catalog importation.",
        "description": "Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Auto import activated"
          },
          "400": {
            "description": "Occurs when the user tries to auto import a local file.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "When a catalog importation is already in progress!",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/autoImport": {
      "get": {
        "tags": [
          "Catalogs - Auto"
        ],
        "operationId": "Auto_GetAutoImportConfiguration",
        "summary": "Get the auto import configuration",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Auto import configuration",
            "schema": {
              "$ref": "#/definitions/autoImportConfiguration"
            }
          },
          "404": {
            "description": "StoreId or Auto Import configuration not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalogs - Auto"
        ],
        "operationId": "Auto_DeleteAutoImport",
        "summary": "Delete Auto Import",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Auto import deleted"
          },
          "400": {
            "description": "Occurs when the catalog auto import is not configured.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/autoImport/start": {
      "post": {
        "tags": [
          "Catalogs - Auto"
        ],
        "summary": "Start Auto Import Manually",
        "operationId": "Auto_StartAutoImport",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/importStarted"
          },
          "400": {
            "description": "Occurs when the catalog auto import is not configured.\nWhen a user column name is duplicate.\nWhen the catalog column name are duplicate.\nWhen the BeezUP column have duplicate mapping.\nOccurs when the required beezup column is not mapped to any column.\nOccurs when the category hierarchy is not correctly mapped.\nOccurs when the duplicate strategy on {catalogColumnName} is not found.\nWhen the user tries to import to ofen the catalog file to download count max limit has been reached.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "When a catalog importation is already in progress!",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/autoImport/pause": {
      "post": {
        "tags": [
          "Catalogs - Auto"
        ],
        "operationId": "Auto_PauseAutoImport",
        "summary": "Pause Auto Import",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Auto import paused"
          },
          "400": {
            "description": "Occurs when the catalog auto import is not configured.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/autoImport/resume": {
      "post": {
        "tags": [
          "Catalogs - Auto"
        ],
        "operationId": "Auto_ResumeAutoImport",
        "summary": "Resume Auto Import",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Auto import resumed"
          },
          "400": {
            "description": "Occurs when the catalog auto import is not configured.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/autoImport/scheduling/interval": {
      "post": {
        "tags": [
          "Catalogs - Auto"
        ],
        "operationId": "Auto_ConfigureAutoImportInterval",
        "summary": "Configure Auto Import Interval",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configureAutoImportIntervalRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Auto import scheduling interval saved"
          },
          "400": {
            "description": "\nWhen the min catalog Auto Import scheduling interval delay has been reached.\nWhen the max catalog Auto Import count has been reached.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/catalogs/{storeId}/autoImport/scheduling/schedules": {
      "post": {
        "tags": [
          "Catalogs - Auto"
        ],
        "summary": "Configure Auto Import Schedules",
        "operationId": "Auto_ScheduleAutoImport",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/scheduleAutoImportRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Auto import scheduling saved"
          },
          "400": {
            "description": "\nWhen the max catalog Auto Import count has been reached.\nWhen the min catalog Auto Import scheduling interval delay has been reached.\nWhen the max catalog Auto Import count has been reached.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong store.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channels/": {
      "get": {
        "tags": [
          "Channels - Channels Global"
        ],
        "summary": "List all available channel for this store",
        "operationId": "GetAvailableChannels",
        "parameters": [
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "description": "The store identifier",
            "type": "string",
            "format": "guid",
            "x-example": "04730364-9826-4ff3-92e4-51fccd02bf10"
          }
        ],
        "responses": {
          "200": {
            "description": "Available channel list for this store",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/channelHeader"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channels/{channelId}": {
      "get": {
        "tags": [
          "Channels - Channels Global"
        ],
        "summary": "Get channel information",
        "operationId": "GetChannelInfo",
        "parameters": [
          {
            "$ref": "#/parameters/channelIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel information",
            "schema": {
              "$ref": "#/definitions/channelInfo"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channels/{channelId}/categories": {
      "get": {
        "tags": [
          "Channels - Channels Global"
        ],
        "summary": "Get channel categories",
        "operationId": "GetChannelCategories",
        "parameters": [
          {
            "$ref": "#/parameters/channelIdParameter"
          },
          {
            "name": "Accept-Encoding",
            "description": "Indicates that the client accepts that the response will be compressed to reduce traffic size.",
            "in": "header",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel categories",
            "headers": {
              "Content-Encoding": {
                "description": "Indicates the compression use in the response",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/channelRootCategory"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channels/{channelId}/columns": {
      "post": {
        "tags": [
          "Channels - Channels Global"
        ],
        "summary": "Get channel columns",
        "operationId": "GetChannelColumns",
        "parameters": [
          {
            "$ref": "#/parameters/channelIdParameter"
          },
          {
            "name": "Accept-Encoding",
            "description": "Indicates that the client accepts that the response will be compressed to reduce traffic size.",
            "in": "header",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "request",
            "in": "body",
            "description": "Allow you to filter the channel column identifier list your want to get",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BeezUP.Common.ChannelColumnId"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel columns",
            "headers": {
              "Content-Encoding": {
                "description": "Indicates the compression use in the response",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/channelColumn"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/": {
      "get": {
        "tags": [
          "Channel Catalogs - Global"
        ],
        "summary": "List all your current channel catalogs",
        "operationId": "GetChannelCatalogs",
        "parameters": [
          {
            "name": "storeId",
            "in": "query",
            "required": false,
            "description": "The store identifier",
            "type": "string",
            "format": "guid",
            "x-example": "04730364-9826-4ff3-92e4-51fccd02bf10"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/channelCatalogList"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Channel Catalogs - Global"
        ],
        "summary": "Add a new channel catalog",
        "operationId": "AddChannelCatalog",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addChannelCatalogRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "When the channel has been successfully added for this store",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The new location",
                "x-example": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0"
              },
              "Retry-After": {
                "description": "The duration in second to wait before polling this resource",
                "type": "integer",
                "minimum": 5,
                "default": 5,
                "x-example": 5
              }
            },
            "schema": {
              "$ref": "#/definitions/links.GetChannelCatalogLink"
            }
          },
          "404": {
            "description": "StoreId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}": {
      "get": {
        "tags": [
          "Channel Catalogs - Global"
        ],
        "summary": "Get the channel catalog information",
        "operationId": "GetChannelCatalog",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog",
            "schema": {
              "$ref": "#/definitions/channelCatalog"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Channel Catalogs - Global"
        ],
        "summary": "Delete the channel catalog",
        "operationId": "DeleteChannelCatalog",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog deleted"
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/enable": {
      "post": {
        "tags": [
          "Channel Catalogs - Settings"
        ],
        "summary": "Enable a channel catalog",
        "operationId": "EnableChannelCatalog",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog enabled"
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong ChanelCatalogId.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "402": {
            "description": "You have to upgrade your offer to activate this channel catalog",
            "schema": {
              "$ref": "#/definitions/upgradeOfferRequired"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/disable": {
      "post": {
        "tags": [
          "Channel Catalogs - Settings"
        ],
        "summary": "Disable a channel catalog",
        "operationId": "DisableChannelCatalog",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog disabled"
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong ChanelCatalogId.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/settings/general": {
      "put": {
        "tags": [
          "Channel Catalogs - Settings"
        ],
        "summary": "Configure channel catalog general settings",
        "operationId": "ConfigureChannelCatalogGeneralSettings",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/generalSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog general settings configured"
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong ChanelCatalogId.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/settings/cost": {
      "put": {
        "tags": [
          "Channel Catalogs - Settings"
        ],
        "summary": "Configure channel catalog cost settings",
        "operationId": "ConfigureChannelCatalogCostSettings",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/costSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog cost settings configured"
          },
          "404": {
            "description": "Occurs when a user tries to work on the wrong ChanelCatalogId.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/columnMappings": {
      "put": {
        "tags": [
          "Channel Catalogs - Column Mappings"
        ],
        "summary": "Configure channel catalog column mappings",
        "operationId": "ConfigureChannelCatalogColumnMappings",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/channelCatalogColumnMappingList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog column mappings configured"
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/categoryMappings": {
      "get": {
        "tags": [
          "Channel Catalogs - Category Mappings"
        ],
        "summary": "Get channel catalog categories",
        "operationId": "GetChannelCatalogCategories",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog category mappings",
            "schema": {
              "$ref": "#/definitions/channelCatalogCategoryMappingList"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/categoryMappings/disable": {
      "post": {
        "tags": [
          "Channel Catalogs - Category Mappings"
        ],
        "summary": "Disable a channel catalog category mapping",
        "operationId": "DisableChannelCatalogCategoryMapping",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog category mapping disabled"
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/categoryMappings/reenable": {
      "post": {
        "tags": [
          "Channel Catalogs - Category Mappings"
        ],
        "summary": "Reenable a channel catalog category mapping",
        "operationId": "ReenableChannelCatalogCategoryMapping",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog category mapping reenabled"
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/categoryMappings/map": {
      "post": {
        "tags": [
          "Channel Catalogs - Category Mappings"
        ],
        "summary": "Map channel catalog category",
        "operationId": "MapChannelCatalogCategory",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mapCategoryRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog category mapped"
          },
          "400": {
            "description": "BadRequest. See Error Response for more details",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap": {
      "post": {
        "tags": [
          "Channel Catalogs - Category Mappings"
        ],
        "summary": "Unmap channel catalog category",
        "operationId": "UnmapChannelCatalogCategory",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unmapCategoryRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog category unmapped"
          },
          "400": {
            "description": "BadRequest. See Error Response for more details",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/exclusionFilterOperators": {
      "get": {
        "tags": [
          "Channel Catalogs - Exclusion Filters"
        ],
        "summary": "Get channel catalog exclusion filter operators",
        "operationId": "GetChannelCatalogExclusionFilterOperators",
        "responses": {
          "200": {
            "description": "Channel catalog exclusion filter operator list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/exclusionFilterOperator"
              }
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/exclusionFilters": {
      "get": {
        "tags": [
          "Channel Catalogs - Exclusion Filters"
        ],
        "summary": "Get channel catalog exclusion filters",
        "operationId": "GetChannelCatalogExclusionFilters",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog exclusion filter list",
            "schema": {
              "$ref": "#/definitions/exclusionFiltersResponse"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Channel Catalogs - Exclusion Filters"
        ],
        "summary": "Configure channel catalog exclusion filters",
        "operationId": "ConfigureChannelCatalogExclusionFilters",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exclusionFilters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog exclusion filter list configured"
          },
          "400": {
            "description": "BadRequest. See Error Response for more details",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/products": {
      "post": {
        "tags": [
          "Channel Catalogs - Products"
        ],
        "summary": "Get channel catalog product information list",
        "operationId": "GetChannelCatalogProductInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "The channel catalog product list filter",
            "schema": {
              "$ref": "#/definitions/getChannelCatalogProductInfoListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog product information",
            "schema": {
              "$ref": "#/definitions/channelCatalogProductInfoList"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/products/export": {
      "post": {
        "tags": [
          "Channel Catalogs - Products"
        ],
        "summary": "Export channel catalog product information list",
        "operationId": "ExportChannelCatalogProductInfoList",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "$ref": "#/parameters/exportFormatInQueryGeneralParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "The channel catalog product list filter",
            "schema": {
              "$ref": "#/definitions/getChannelCatalogProductInfoListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog product information list exported",
            "headers": {
              "Location": {
                "description": "To indicate the url of the export file\nExample: https://beezupchannel.blob.core.windows.net/reports/exports/Excel_Products.xslx\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.Link3"
            },
            "examples": {
              "application/json": {
                "href": "https://beezupchannel.blob.core.windows.net/reports/exports/Excel_Products.xslx",
                "method": "GET"
              }
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/products/counters": {
      "get": {
        "tags": [
          "Channel Catalogs - Products"
        ],
        "summary": "Get channel catalog products' counters",
        "operationId": "GetChannelCatalogProductsCounters",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog products' counters",
            "schema": {
              "$ref": "#/definitions/channelCatalogProductsCounters"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/products": {
      "post": {
        "tags": [
          "Channel Catalogs - Products"
        ],
        "summary": "Get channel catalog products related to these channel catalogs",
        "operationId": "GetChannelCatalogProductByChannelCatalog",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/channelCatalogProductByChannelCatalogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel catalog product by channel catalog",
            "schema": {
              "$ref": "#/definitions/channelCatalogProductByChannelCatalogResponse"
            }
          },
          "404": {
            "description": "ProductId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/products/{productId}": {
      "get": {
        "tags": [
          "Channel Catalogs - Products"
        ],
        "summary": "Get channel catalog product information",
        "operationId": "GetChannelCatalogProductInfo",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "$ref": "#/parameters/productIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog product information",
            "schema": {
              "$ref": "#/definitions/channelCatalogProductInfo"
            }
          },
          "404": {
            "description": "ChannelCatalog or ProductId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides": {
      "put": {
        "tags": [
          "Channel Catalogs - Products Overrides"
        ],
        "summary": "Override channel catalog product values",
        "operationId": "OverrideChannelCatalogProductValues",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "$ref": "#/parameters/productIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/productOverrides"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog product overriden"
          },
          "400": {
            "description": "BadRequest. See Error Response for more details",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "ChannelCatalogId or ProductId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}": {
      "delete": {
        "tags": [
          "Channel Catalogs - Products Overrides"
        ],
        "summary": "Delete a specific channel catalog product value override",
        "operationId": "DeleteChannelCatalogProductValueOverride",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "$ref": "#/parameters/productIdParameter"
          },
          {
            "name": "channelColumnId",
            "description": "The channel column identifier",
            "in": "path",
            "type": "string",
            "format": "guid",
            "required": true,
            "x-example": "8a76f06a-fefc-4c0d-bcfe-b210f1482977"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog product value override deleted"
          },
          "404": {
            "description": "ChannelCatalogId or ProductId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable": {
      "post": {
        "tags": [
          "Channel Catalogs - Products Optimisation"
        ],
        "summary": "Disable channel catalog product",
        "operationId": "DisableChannelCatalogProduct",
        "description": "By default a all your catalog products are exposed to the channel.\nYou can disable a product by using this operation.\n/!\\ In case of massive optimisation we recommand you to use the analytics api\n",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "$ref": "#/parameters/productIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog product disabled"
          },
          "404": {
            "description": "ChannelCatalogId Or ProductId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable": {
      "post": {
        "tags": [
          "Channel Catalogs - Products Optimisation"
        ],
        "summary": "Reenable channel catalog product",
        "description": "By default a all your catalog products are exposed to the channel.\nYou can reenable a product by using this operation.\n/!\\ In case of massive optimisation we recommand you to use the analytics api\n",
        "operationId": "ReenableChannelCatalogProduct",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "$ref": "#/parameters/productIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog product reenabled"
          },
          "404": {
            "description": "ChannelCatalogId or ProductId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/exportations/cache": {
      "get": {
        "tags": [
          "Channel Catalogs - Exportations"
        ],
        "summary": "Get the exportation cache information",
        "operationId": "GetChannelCatalogExportationCacheInfo",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog exportation cache information",
            "schema": {
              "$ref": "#/definitions/channelCatalogExportCacheInfoResponse"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/exportations/cache/clear": {
      "post": {
        "tags": [
          "Channel Catalogs - Exportations"
        ],
        "summary": "Clear the exportation cache",
        "operationId": "ClearChannelCatalogExportationCache",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel catalog exportation cache cleared"
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/channelCatalogs/{channelCatalogId}/exportations/history": {
      "get": {
        "tags": [
          "Channel Catalogs - Exportations"
        ],
        "summary": "Get the exportation history",
        "operationId": "GetChannelCatalogExportationHistory",
        "parameters": [
          {
            "$ref": "#/parameters/channelCatalogIdParameter"
          },
          {
            "$ref": "#/parameters/pageNumberQueryStrngParameter"
          },
          {
            "$ref": "#/parameters/pageSizeQueryStrngParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel catalog exportation history",
            "schema": {
              "$ref": "#/definitions/channelCatalogExportationHistory"
            }
          },
          "404": {
            "description": "ChannelCatalogId not found or not authorized",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/channelcatalogs/": {
      "get": {
        "tags": [
          "Marketplaces - Channel catalogs - Global"
        ],
        "summary": "Get  you marketplace channel catalog list",
        "operationId": "GetMarketplaceAccountStores",
        "responses": {
          "200": {
            "description": "Marketplace channel catalog list",
            "schema": {
              "$ref": "#/definitions/marketplaceChannelCatalogList"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/history": {
      "get": {
        "tags": [
          "Marketplaces - Channel catalogs - Publications"
        ],
        "summary": "Fetch the publication history for an account, sorted by descending start date",
        "operationId": "GetPublications",
        "parameters": [
          {
            "name": "marketplaceTechnicalCode",
            "in": "path",
            "description": "Marketplace Technical Code to query (required)",
            "required": true,
            "type": "string",
            "x-lov": "MarketplaceTechnicalCode"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to query (required)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "channelCatalogId",
            "in": "query",
            "description": "Channel Catalog Id by which to filter (optional)",
            "required": false,
            "type": "string",
            "format": "guid"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Amount of entries to fetch (optional, default set to 10)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 10,
            "maximum": 100
          },
          {
            "name": "publicationTypes",
            "x-lov": "MarketplacePublicationType",
            "in": "query",
            "description": "Publication types by which to filter (optional)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PublishProducts",
                "PublishOffers",
                "Unpublish"
              ],
              "format": "publicationType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched channel catalog settings",
            "schema": {
              "$ref": "#/definitions/accountPublications"
            }
          },
          "400": {
            "description": "Feature only available for Amazon, Ebay, CDiscount and Mirakl marketplaces"
          },
          "404": {
            "description": "Requested account, marketplace or authorization for current user not found"
          },
          "503": {
            "$ref": "#/responses/processingResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/channelcatalogs/{channelCatalogId}/properties": {
      "get": {
        "tags": [
          "Marketplaces - Channel catalogs - Settings"
        ],
        "summary": "Get the marketplace properties for a channel catalog",
        "operationId": "GetChannelCatalogMarketplaceProperties",
        "parameters": [
          {
            "name": "channelCatalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "name": "redirectionPageUrl",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uri"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched channel catalog properties",
            "schema": {
              "$ref": "#/definitions/channelCatalogMarketplaceProperties"
            }
          },
          "404": {
            "description": "Requested channel catalog or authorization for current user not found"
          },
          "503": {
            "$ref": "#/responses/processingResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/channelcatalogs/{channelCatalogId}/settings": {
      "get": {
        "tags": [
          "Marketplaces - Channel catalogs - Settings"
        ],
        "summary": "Get the marketplace settings for a channel catalog",
        "operationId": "GetChannelCatalogMarketplaceSettings",
        "parameters": [
          {
            "name": "channelCatalogId",
            "in": "path",
            "description": "Channel Catalog Id to query (required)",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched channel catalog settings",
            "schema": {
              "$ref": "#/definitions/channelCatalogMarketplaceSettings"
            }
          },
          "404": {
            "description": "Requested channel catalog or authorization for current user not found"
          },
          "503": {
            "$ref": "#/responses/processingResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Marketplaces - Channel catalogs - Settings"
        ],
        "summary": "Save new marketplace settings for a channel catalog",
        "description": "Allow you to configure your marketplace settings.\nPartial update accepted.\n",
        "operationId": "SetChannelCatalogMarketplaceSettings",
        "parameters": [
          {
            "name": "channelCatalogId",
            "in": "path",
            "description": "Channel Catalog Id to query",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Settings to save",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setChannelCatalogMarketplaceSettingsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully saved channel catalog settings"
          },
          "400": {
            "description": "One or more channel catalog property keys or values are invalid for requested channel catalog. See response for details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Requested channel catalog or authorization for current user not found"
          },
          "503": {
            "$ref": "#/responses/processingResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/": {
      "get": {
        "tags": [
          "Marketplaces - Orders - Global"
        ],
        "x-tagGroups": "Martketplaces Orders",
        "operationId": "GetOrderIndex",
        "summary": "Get all actions you can do on the order API",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Order index",
            "schema": {
              "$ref": "#/definitions/orderIndex"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/status": {
      "get": {
        "tags": [
          "Marketplaces - Orders - Global"
        ],
        "x-tagGroups": "Martketplaces Orders",
        "operationId": "GetMarketplaceAccountsSynchronization",
        "summary": "Get current synchronization status between your marketplaces and BeezUP accounts",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched current synchronization status",
            "schema": {
              "$ref": "#/definitions/accountSynchronizationList"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/harvest": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Global"
        ],
        "operationId": "HarvestAll",
        "summary": "Send harvest request to all your marketplaces",
        "responses": {
          "202": {
            "description": "Successfully sent harvest request to all marketplaces",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Indicates the duration in seconds to wait to be able to make this request again"
              }
            }
          },
          "409": {
            "description": "Failed to send harvest request because allowed rate limits have been exceeded",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Indicates the duration in seconds to wait to be able to make this request again"
              }
            },
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/automaticTransitions": {
      "get": {
        "tags": [
          "Marketplaces - Orders - AutoTransitions"
        ],
        "operationId": "GetAutomaticTransitions",
        "summary": "Get list of configured automatic Order status transitions",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of configured automatic Order status transitions",
            "schema": {
              "$ref": "#/definitions/automaticTransitionInfoList"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Marketplaces - Orders - AutoTransitions"
        ],
        "operationId": "ConfigureAutomaticTransitions",
        "summary": "Configure new or existing automatic Order status transition",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configureAutomaticTransitionRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully confirugred new or existing automatic Order status transition"
          },
          "400": {
            "description": "Requested automatic Order status transition could not be configured",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/list/full": {
      "post": {
        "tags": [
          "Marketplaces - Orders - List"
        ],
        "operationId": "GetOrderListFull",
        "summary": "Get a paginated list of all Orders with all Order and Order Item(s) properties",
        "description": "The purpose of this operation is to reduce the amount of request to the API.\\\n\\\nPrevious implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties.\n",
        "parameters": [
          {
            "name": "Accept-Encoding",
            "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size",
            "in": "header",
            "required": true,
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orderListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the full list of Orders",
            "schema": {
              "$ref": "#/definitions/orderListFull"
            }
          },
          "400": {
            "description": "Could not process request for given parameters values. Please check error message for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/list/light": {
      "post": {
        "tags": [
          "Marketplaces - Orders - List"
        ],
        "operationId": "GetOrderListLight",
        "summary": "Get a paginated list of all Orders without details",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orderListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the list of Orders",
            "schema": {
              "$ref": "#/definitions/orderListLight"
            }
          },
          "400": {
            "description": "Could not process request for given parameters values. Please check error message for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/exportations": {
      "get": {
        "tags": [
          "Marketplaces - Orders - Exports"
        ],
        "operationId": "GetOrderExportations",
        "summary": "Get a paginated list of Order report exportations",
        "parameters": [
          {
            "$ref": "#/parameters/pageNumberQueryStrngParameter"
          },
          {
            "$ref": "#/parameters/pageSizeQueryStrngParameter"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "guid",
            "description": "The store identifier to regroup the order exportations"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the list of Order report exportations",
            "schema": {
              "$ref": "#/definitions/orderExportations"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "400": {
            "description": "Could not process request for given parameters values. Please check error message for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Marketplaces - Orders - Exports"
        ],
        "operationId": "ExportOrders",
        "summary": "Request a new Order report exportation to be generated",
        "description": "A new file will be generated containing a summary of all the Orders matching the requested filter settings.",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exportOrderListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully requested new Order report exportation generation"
          },
          "400": {
            "description": "Could not process request for given parameters values. Please check error message for more details.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "No orders have been found for this request.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/batches/setMerchantOrderInfos": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Batches"
        ],
        "operationId": "SetMerchantOrderInfoList",
        "summary": "Send a batch of operations to set an Order's merchant information  (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setMerchantOrderInfoListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Succesfully received and processed batched operations. Please check response to see the status per operation.",
            "schema": {
              "$ref": "#/definitions/batchOrderOperationResponse"
            }
          },
          "400": {
            "description": "Requested too many batch operations",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/batches/clearMerchantOrderInfos": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Batches"
        ],
        "operationId": "ClearMerchantOrderInfoList",
        "summary": "Send a batch of operations to clear an Order's merchant information (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clearMerchantOrderInfoListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Succesfully received and processed batched operations. Please check response to see the status per operation.",
            "schema": {
              "$ref": "#/definitions/batchOrderOperationResponse"
            }
          },
          "400": {
            "description": "Requested too many batch operations",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/batches/changeOrders/{changeOrderType}": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Batches"
        ],
        "operationId": "ChangeOrderList",
        "summary": "Send a batch of operations to change your marketplace Order information (accept, ship, etc.)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/changeOrderTypeParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changeOrderListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Succesfully received and processed batched operations. Please check response to see the status per operation.",
            "schema": {
              "$ref": "#/definitions/batchOrderOperationResponse"
            }
          },
          "400": {
            "description": "Requested too many batch operations",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}": {
      "head": {
        "tags": [
          "Marketplaces - Orders - Order"
        ],
        "operationId": "HeadOrder",
        "summary": "Get the meta information about the order (ETag, Last-Modified)",
        "description": "The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body.\nThis could be useful \n",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceTechnicalCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/beezUPOrderIdParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched Order and Order Item(s) properties",
            "headers": {
              "Last-Modified": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification UTC date of the order\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
              },
              "ETag": {
                "type": "string",
                "description": "ETag value to identify the current version of requested Order\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
              }
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "Requested Order could not be found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "tags": [
          "Marketplaces - Orders - Order"
        ],
        "operationId": "GetOrder",
        "summary": "Get full Order and Order Item(s) properties",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceTechnicalCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/beezUPOrderIdParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched Order and Order Item(s) properties",
            "headers": {
              "Last-Modified": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification UTC date of the order\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
              },
              "ETag": {
                "type": "string",
                "description": "ETag value to identify the current version of requested Order\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/order"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "Requested Order could not be found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history": {
      "get": {
        "tags": [
          "Marketplaces - Orders - Order"
        ],
        "operationId": "GetOrderHistory",
        "summary": "Get an Order's harvest and change history",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceTechnicalCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/beezUPOrderIdParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched Order history",
            "schema": {
              "$ref": "#/definitions/orderHistory"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "description": "Requested Order could not be found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Order"
        ],
        "operationId": "HarvestOrder",
        "summary": "Send harvest request for a single Order",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceTechnicalCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/beezUPOrderIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully sent Order harvest request",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Indicates the duration in seconds to wait to be able to make this request again"
              }
            }
          },
          "404": {
            "description": "Requested Order could not be found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Failed to send harvest request because allowed rate limits have been exceeded",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Indicates the duration in seconds to wait to be able to make this request again"
              }
            },
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Order"
        ],
        "operationId": "SetMerchantOrderInfo",
        "summary": "Set an Order's merchant information",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceTechnicalCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/beezUPOrderIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setMerchantOrderInfoRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully set Order merchant order info set"
          },
          "400": {
            "description": "Could not update Order merchant information. Please see body for more information.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Requested Order could not be found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Order"
        ],
        "operationId": "ClearMerchantOrderInfo",
        "summary": "Clear an Order's merchant information",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceTechnicalCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/beezUPOrderIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully cleared Order merchant order info set"
          },
          "400": {
            "description": "Could not update Order merchant information. Please see body for more information.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Requested Order could not be found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Order"
        ],
        "operationId": "ChangeOrder",
        "summary": "Change your marketplace Order Information (accept, ship, etc.)",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceTechnicalCodeParameter"
          },
          {
            "$ref": "#/parameters/accountIdParameter"
          },
          {
            "$ref": "#/parameters/beezUPOrderIdParameter"
          },
          {
            "$ref": "#/parameters/changeOrderTypeParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/changeOrderRequest"
            }
          },
          {
            "$ref": "#/parameters/ifMatchParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Order change request accepted"
          },
          "400": {
            "description": "Invalid order change request, could not be send to the marketplace. Please check the body of this request.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Requested Order could not be found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Already processing a change request for this Order.\\\nPlease refresh your clients Order information and retry later. \n",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Indicates the duration in seconds to wait to be able to make this request again"
              }
            },
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "412": {
            "$ref": "#/responses/412_PreConditionFailed"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/": {
      "get": {
        "tags": [
          "Analytics - Global"
        ],
        "summary": "Get the Analytics API operation index",
        "operationId": "AnalyticsIndex",
        "responses": {
          "200": {
            "description": "Analytics API operation index",
            "schema": {
              "$ref": "#/definitions/analyticsIndex"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}": {
      "get": {
        "tags": [
          "Analytics - Global"
        ],
        "summary": "Get the Analytics API operation index for one store",
        "operationId": "AnalyticsStoreIndex",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics API operation index for one store",
            "schema": {
              "$ref": "#/definitions/analyticsStoreIndex"
            }
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/tracking/status": {
      "get": {
        "tags": [
          "Analytics - Tracking"
        ],
        "summary": "Display the synchronization status of the clicks and orders",
        "description": "Your clicks and orders are eventually consistent. \\\nThis operation indicates you at which date the projections are.\n",
        "operationId": "GetTrackingStatus",
        "responses": {
          "200": {
            "description": "The tracking status informations",
            "schema": {
              "$ref": "#/definitions/trackingStatus"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/reports/filters": {
      "get": {
        "tags": [
          "Analytics - Reports"
        ],
        "summary": "Get report filter list for the given store",
        "operationId": "GetReportFilters",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Report filter list",
            "schema": {
              "$ref": "#/definitions/reportFilterList"
            }
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/reports/filters/{reportFilterId}": {
      "get": {
        "tags": [
          "Analytics - Reports"
        ],
        "summary": "Get the report filter description",
        "operationId": "GetReportFilter",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/reportFilterIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Report filter",
            "schema": {
              "$ref": "#/definitions/reportFilter"
            }
          },
          "404": {
            "description": "Report filter not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Analytics - Reports"
        ],
        "summary": "Delete the report filter",
        "operationId": "DeleteReportFilter",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/reportFilterIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Report filter deleted"
          },
          "404": {
            "description": "Report filter not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "401": {
            "description": "This report filter is used by rule. In the error message you will find the rule identifier.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Analytics - Reports"
        ],
        "summary": "Save the report filter",
        "operationId": "SaveReportFilter",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/reportFilterIdOnlyGeneralParameters"
          },
          {
            "name": "reportFilter",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/saveReportFilterRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Report filter saved"
          },
          "409": {
            "description": "Report filter name already exists",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "401": {
            "description": "This report filter is used by rule. In the error message you will find the rule identifier.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "403": {
            "description": "This report filter identifier is already used by another store, please check your identifiers.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/reports/byday": {
      "post": {
        "tags": [
          "Analytics - Reports"
        ],
        "summary": "Get the report by day",
        "description": "Get the report by day",
        "operationId": "GetStoreReportByDay",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reportByDayRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Your reporting by day",
            "schema": {
              "$ref": "#/definitions/reportByDayResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/reports/bychannel": {
      "post": {
        "tags": [
          "Analytics - Reports"
        ],
        "summary": "Get the report by channel",
        "description": "Get the report by channel",
        "operationId": "GetStoreReportByChannel",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reportByChannelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Your reporting by channel",
            "schema": {
              "$ref": "#/definitions/reportByChannelResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/reports/bycategory": {
      "post": {
        "tags": [
          "Analytics - Reports"
        ],
        "summary": "Get the report by category",
        "description": "Get the report by category",
        "operationId": "GetStoreReportByCategory",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reportByCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Your reporting by channel",
            "schema": {
              "$ref": "#/definitions/reportByCategoryResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/reports/byproduct": {
      "post": {
        "tags": [
          "Analytics - Reports"
        ],
        "summary": "Get the report by product",
        "description": "Get the report by product",
        "operationId": "GetStoreReportByProduct",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reportByProductRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Your reporting by product",
            "schema": {
              "$ref": "#/definitions/reportByProductResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/optimisations/copy": {
      "post": {
        "tags": [
          "Analytics - Optimisations"
        ],
        "summary": "Copy products optimisation between 2 channels",
        "operationId": "CopyOptimisation",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/copyOptimisationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Products optimisatisation copied"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/optimisations/{actionName}": {
      "post": {
        "tags": [
          "Analytics - Optimisations"
        ],
        "summary": "Optimise products",
        "description": "/!\\ WARNING /!\\ \\\nApply the operation on every product related to this request. \\\nThis operation is used at the bottom of the analytics page result.\n",
        "operationId": "Optimise",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/optimisationActionNameGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/optimiseRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Products optimisatized"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}": {
      "post": {
        "tags": [
          "Analytics - Optimisations"
        ],
        "summary": "Optimise products",
        "description": "/!\\ WARNING /!\\ \\\nThis operation will reenable or disable this product for every channel indicated in the body.\n",
        "operationId": "OptimiseByProduct",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The product identifier concerned by this optimisation",
            "type": "string",
            "format": "guid"
          },
          {
            "$ref": "#/parameters/optimisationActionNameGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "description": "The channel identifier list concerned by this optimisation",
            "schema": {
              "type": "array",
              "minItems": 1,
              "maxItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "string",
                "format": "guid"
              },
              "example": [
                "a2d38563-50f0-43f1-be2b-b16e7ec4f007"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product(s) optimisatized"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}": {
      "post": {
        "tags": [
          "Analytics - Optimisations"
        ],
        "summary": "Optimise products's category",
        "description": "/!\\ WARNING /!\\ \\\nThis operation will reenable or disable products's category for every channel indicated in the body.\n",
        "operationId": "OptimiseByCategory",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "catalogCategoryId",
            "in": "path",
            "required": true,
            "description": "The category identifier concerned by this optimisation",
            "type": "string",
            "format": "guid"
          },
          {
            "$ref": "#/parameters/optimisationActionNameGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "description": "The channel identifier list concerned by this optimisation",
            "schema": {
              "type": "array",
              "minItems": 1,
              "maxItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "string",
                "format": "guid"
              },
              "example": [
                "a2d38563-50f0-43f1-be2b-b16e7ec4f007"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Products optimisatized"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}": {
      "post": {
        "tags": [
          "Analytics - Optimisations"
        ],
        "summary": "Optimise products's category",
        "description": "/!\\ WARNING /!\\ \\\nApply the operation on every product on this channel.\n",
        "operationId": "OptimiseByChannel",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "description": "The channel identifier concerned by this optimisation",
            "type": "string",
            "format": "guid"
          },
          {
            "$ref": "#/parameters/optimisationActionNameGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Products optimisatized"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/tracking/status": {
      "get": {
        "tags": [
          "Analytics - Tracking"
        ],
        "summary": "Get store tracking synchronization status",
        "description": "Your clicks and orders are eventually consistent. \\\nThis operation indicates you at which date the projections are for this store.\n",
        "operationId": "GetStoreTrackingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Store Tracking Status",
            "schema": {
              "$ref": "#/definitions/storeTrackingStatus"
            }
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/tracking/clicks": {
      "get": {
        "tags": [
          "Analytics - Tracking"
        ],
        "summary": "Get the latest clicks tracked",
        "operationId": "GetStoreTrackedClicks",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "count",
            "in": "query",
            "type": "integer",
            "description": "The click's count you want to get",
            "required": false,
            "default": 100,
            "minimum": 5,
            "maximum": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Clicks information",
            "schema": {
              "$ref": "#/definitions/trackedClicks"
            }
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/tracking/orders": {
      "get": {
        "tags": [
          "Analytics - Tracking"
        ],
        "summary": "Get the latest orders tracked",
        "operationId": "GetStoreTrackedOrders",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "count",
            "in": "query",
            "type": "integer",
            "description": "The order's count you want to get",
            "required": false,
            "default": 100,
            "minimum": 5,
            "maximum": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Order list",
            "schema": {
              "$ref": "#/definitions/trackedOrders"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/tracking/externalorders": {
      "get": {
        "tags": [
          "Analytics - Tracking"
        ],
        "summary": "Get the latest external orders tracked",
        "operationId": "GetStoreTrackedExternalOrders",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "count",
            "in": "query",
            "type": "integer",
            "description": "The external order's count you want to get",
            "required": false,
            "default": 100,
            "minimum": 5,
            "maximum": 100
          }
        ],
        "responses": {
          "200": {
            "description": "External Order list",
            "schema": {
              "$ref": "#/definitions/trackedExternalOrders"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules": {
      "get": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Gets the list of rules for a given store",
        "operationId": "GetRules",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Rule list",
            "schema": {
              "$ref": "#/definitions/ruleList"
            }
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Rule creation",
        "operationId": "CreateRule",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createRuleRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rule created"
          },
          "400": {
            "description": "Period on filter cannot be custom or filter does not exist",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "401": {
            "description": "Store not allowed to use rules. Please upgrade your offer or contact us.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "403": {
            "description": "Reached the maximum amount of rules allowed for your offer. Please upgrade your offer or contact us.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules/run": {
      "post": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Run all rules for this store",
        "operationId": "RunRules",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "All rules executed."
          },
          "401": {
            "description": "Store not allowed to use rules. Please upgrade your offer or contact us.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Rules for this store are currently running. Please try again later.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules/executions": {
      "get": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Get the rules execution history",
        "operationId": "GetRulesExecutions",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page to retrieve",
            "required": true,
            "type": "integer",
            "default": 1,
            "minimum": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The count of rule history to retrieve",
            "required": true,
            "type": "integer",
            "default": 10,
            "minimum": 10,
            "maximum": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Rules executions list",
            "schema": {
              "$ref": "#/definitions/ruleExecutionReportings"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules/{ruleId}": {
      "get": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Gets the rule",
        "operationId": "GetRule",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ruleIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Rule",
            "schema": {
              "$ref": "#/definitions/rule"
            }
          },
          "404": {
            "$ref": "#/responses/StoreNotFoundResponse"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Delete Rule",
        "operationId": "DeleteRule",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ruleIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Rule deleted"
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Rules for this store are currently running. Please try again later.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Update Rule",
        "operationId": "UpdateRule",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ruleIdOnlyGeneralParameters"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateRuleRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rule updated"
          },
          "400": {
            "description": "Filter does not exist or period on filter cannot be custom",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "401": {
            "description": "Store not allowed to use rules. Please upgrade your offer or contact us.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Rules for this store are currently running. Please try again later.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules/{ruleId}/run": {
      "post": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Run rule",
        "operationId": "RunRule",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ruleIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Rule executed"
          },
          "400": {
            "description": "Rule is not enabled. Please enable this run before trying to run it.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "401": {
            "description": "Store not allowed to use rules. Please upgrade your offer or contact us.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Rules for this store are currently running. Please try again later.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules/{ruleId}/moveup": {
      "post": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Move the rule up",
        "operationId": "MoveUpRule",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ruleIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Rule moved up"
          },
          "400": {
            "description": "Priority can only be changed when more than one rule is defined",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Rules for this store are currently running. Please try again later.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules/{ruleId}/movedown": {
      "post": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Move the rule down",
        "operationId": "MoveDownRule",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ruleIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Rule moved down"
          },
          "400": {
            "description": "Priority can only be changed when more than one rule is defined",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Rules for this store are currently running. Please try again later.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules/{ruleId}/enable": {
      "post": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Enable rule",
        "operationId": "EnableRule",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ruleIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Rune enabled"
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Rules for this store are currently running. Please try again later.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user/analytics/{storeId}/rules/{ruleId}/disable": {
      "post": {
        "tags": [
          "Analytics - Rules"
        ],
        "summary": "Disable rule",
        "operationId": "DisableRule",
        "parameters": [
          {
            "$ref": "#/parameters/storeIdOnlyGeneralParameters"
          },
          {
            "$ref": "#/parameters/ruleIdOnlyGeneralParameters"
          }
        ],
        "responses": {
          "204": {
            "description": "Rule disabled"
          },
          "404": {
            "description": "Rule not found",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "409": {
            "description": "Rules for this store are currently running. Please try again later.",
            "schema": {
              "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "definitions": {
    "loginRequest": {
      "required": [
        "login",
        "password"
      ],
      "type": "object",
      "properties": {
        "login": {
          "$ref": "#/definitions/BeezUP.Common.Email"
        },
        "password": {
          "description": "Your password",
          "type": "string",
          "format": "password",
          "example": "I@mW0nder$Full"
        }
      }
    },
    "apiCredentials": {
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Your API credential list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiCredential"
          },
          "example": [
            {
              "productName": "UserApi",
              "primaryToken": "3b22980d8d1143c6ba7adf4e55b9a153",
              "secondaryToken": "162ae17fd52044c38cce3388ea5b0c91"
            }
          ]
        }
      }
    },
    "apiCredential": {
      "description": "Your api credential",
      "type": "object",
      "properties": {
        "productName": {
          "description": "The product name related to this credential",
          "type": "string",
          "example": "UserAPI"
        },
        "primaryToken": {
          "description": "The primary token to be used in the next call in the user scope API",
          "type": "string",
          "example": "3b22980d8d1143c6ba7adf4e55b9a153"
        },
        "secondaryToken": {
          "description": "The secondary token. Could be usefull if you want to share your access with someone else.",
          "type": "string",
          "example": "162ae17fd52044c38cce3388ea5b0c91"
        }
      }
    },
    "registerRequest": {
      "required": [
        "email",
        "password"
      ],
      "type": "object",
      "properties": {
        "email": {
          "description": "Your email. We refuse disposable email.",
          "type": "string",
          "example": "myemail@mycompany.com"
        },
        "password": {
          "description": "The password you want to use for your new account. \\\nThe password length must be greater or equals to 6 and lower or equals to 128. \\\nThe password must contains at least one number and one special character\n",
          "type": "string",
          "example": "I@mW0nder$Full"
        },
        "cultureName": {
          "type": "string",
          "description": "Can be null. Default: en-GB. The culture name you want to use. FYI. \\\nThe email activation will use this culture.\n",
          "example": "en-GB"
        },
        "commercialOwnerUserId": {
          "format": "uuid",
          "description": "The user id of your commercial in BeezUP.",
          "type": "string",
          "example": "47ea14ab-195d-4f9a-a24e-32c329ee40f6"
        }
      }
    },
    "publicChannelIndex": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "object",
          "description": "The key is the country iso code",
          "additionalProperties": {
            "$ref": "#/definitions/links.GetChannelsLink"
          },
          "example": {
            "FRA": {
              "href": "/v2/public/channels/FRA",
              "method": "GET"
            },
            "DEU": {
              "href": "/v2/public/channels/DEU",
              "method": "GET"
            },
            "ESP": {
              "href": "/v2/public/channels/ESP'",
              "method": "GET"
            },
            "ITA": {
              "href": "/v2/public/channels/ITA",
              "method": "GET"
            },
            "GBR": {
              "href": "/v2/public/channels/GBR",
              "method": "GET"
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "$ref": "#/definitions/links.GetChannelsIndexLink"
            },
            "channelCountryLov": {
              "$ref": "#/definitions/links.GetPublicListOfValuesLink"
            },
            "channelTypeLov": {
              "$ref": "#/definitions/links.GetPublicListOfValuesLink"
            },
            "sectorLov": {
              "$ref": "#/definitions/links.GetPublicListOfValuesLink"
            }
          },
          "example": {
            "self": {
              "href": "/v2/public/channels",
              "method": "GET"
            },
            "channelCountryLov": {
              "href": "/v2/public/lov/www_ChannelCountry",
              "method": "GET"
            },
            "channelTypeLov": {
              "href": "/v2/public/lov/ChannelType",
              "method": "GET"
            },
            "sectorLov": {
              "href": "/v2/public/lov/ParamSector",
              "method": "GET"
            }
          }
        }
      }
    },
    "links.GetPublicListOfValuesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/public/lov/ChannelType",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetChannelsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/public/channels/FRA",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetChannelsIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/public/channels",
            "method": "GET"
          }
        }
      ]
    },
    "channelInfoList": {
      "type": "object",
      "properties": {
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "$ref": "#/definitions/links.GetChannelsLink"
            }
          }
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelInfo"
          }
        }
      }
    },
    "channelInfo": {
      "type": "object",
      "required": [
        "name",
        "homeUrl",
        "logoUrl",
        "types"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The channel name",
          "example": "Amazon Direct FRA"
        },
        "homeUrl": {
          "type": "string",
          "format": "uri",
          "description": "The channel home url",
          "example": "http://www.amazon.fr"
        },
        "logoUrl": {
          "type": "string",
          "format": "uri",
          "description": "The channel logo url",
          "example": "http://beezupcdn.blob.core.windows.net/comparators/Amazon%2520Direct%2520FRA.png"
        },
        "types": {
          "description": "The type list related to a channel",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Marketplace"
          ]
        },
        "sectors": {
          "description": "The sector list related to a channel",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "BRICOLAGE",
            "INFO",
            "GENERALIST"
          ]
        }
      }
    },
    "publicLovIndex": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/publicLovIndexLinks"
        }
      }
    },
    "publicLovIndexLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetPublicLovIndexLink"
        },
        "lists": {
          "$ref": "#/definitions/publicLovLinks"
        }
      }
    },
    "publicLovLinks": {
      "description": "List of lov link. The key is the list name.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/links.GetPublicListOfValuesLink"
      }
    },
    "links.GetPublicLovIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/public/lov",
            "method": "GET"
          }
        }
      ]
    },
    "publicListOfValuesResponse": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/publicListOfValuesResponseLinks"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.ListOfValueItem"
          }
        }
      }
    },
    "publicListOfValuesResponseLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetPublicListOfValuesLink"
        }
      }
    },
    "userLovIndex": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/userLovIndexLinks"
        }
      }
    },
    "userLovIndexLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetUserLovIndexLink"
        },
        "lists": {
          "$ref": "#/definitions/userLovLinks"
        }
      }
    },
    "userLovLinks": {
      "description": "List of lov link. The key is the list name.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/links.GetUserListOfValuesLink"
      }
    },
    "links.GetUserListOfValuesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/lov/Go2CultureName",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetUserLovIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/lov",
            "method": "GET"
          }
        }
      ]
    },
    "userListOfValuesResponse": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/userListOfValuesResponseLinks"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.ListOfValueItem"
          }
        }
      }
    },
    "userListOfValuesResponseLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetUserListOfValuesLink"
        }
      }
    },
    "links.logoutLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/security/logout",
            "method": "POST"
          }
        }
      ]
    },
    "links.getFriendInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/friends/{userId}",
            "method": "GET",
            "parameters": {
              "userId": {
                "in": "path",
                "type": "string",
                "required": true
              }
            }
          }
        }
      ]
    },
    "links.getStandardOffersLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/offers",
            "method": "GET"
          }
        }
      ]
    },
    "links.getOfferLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/offers",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "offerRequest"
              }
            }
          }
        }
      ]
    },
    "links.getBillingPeriodsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/billingPeriods",
            "method": "GET"
          }
        }
      ]
    },
    "links.getInvoicesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/invoices",
            "method": "GET"
          }
        }
      ]
    },
    "links.getUserAccountInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account",
            "method": "GET"
          }
        }
      ]
    },
    "links.shareStoreLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/stores/51afae05-277e-4902-8b17-5a811a23a2c6/shares",
            "method": "POST",
            "parameters": {
              "email": {
                "type": "string",
                "in": "body",
                "required": true
              }
            }
          }
        }
      ]
    },
    "links.deleteStoreShareLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/stores/51afae05-277e-4902-8b17-5a811a23a2c6/shares/277596c1-a5a9-4cce-9f34-b5906451a98f",
            "method": "DELETE"
          }
        }
      ]
    },
    "links.getStoresLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/stores",
            "method": "GET"
          }
        }
      ]
    },
    "links.createStoreLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/stores",
            "method": "POST"
          }
        }
      ]
    },
    "links.getStoreLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/stores/51afae05-277e-4902-8b17-5a811a23a2c6",
            "method": "GET"
          }
        }
      ]
    },
    "links.deleteStoreLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/stores/51afae05-277e-4902-8b17-5a811a23a2c6",
            "method": "DELETE"
          }
        }
      ]
    },
    "links.updateStoreLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/stores/51afae05-277e-4902-8b17-5a811a23a2c6",
            "method": "PATCH"
          }
        }
      ]
    },
    "links.getStoreSharesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/stores/51afae05-277e-4902-8b17-5a811a23a2c6/shares",
            "method": "GET"
          }
        }
      ]
    },
    "links.createContractLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/contracts",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "value": {
                  "offerId": 1,
                  "storeCount": 1,
                  "couponDiscountCode": "I-LOVE-BEEZUP",
                  "couponOfferCode": "04efc310-bc25-4710-a83a-faf200284fe5",
                  "billingPeriodInMonth": 12
                }
              }
            }
          }
        }
      ]
    },
    "links.saveCreditCardInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account/creditCardInfo",
            "method": "PUT"
          }
        }
      ]
    },
    "links.saveStoreAlertsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/stores/51afae05-277e-4902-8b17-5a811a23a2c6/alerts",
            "method": "POST"
          }
        }
      ]
    },
    "links.savePersonalInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account/personalInfo",
            "method": "PUT"
          }
        }
      ]
    },
    "links.changePasswordLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account/changePassword",
            "method": "POST"
          }
        }
      ]
    },
    "links.saveCompanyInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account/companyInfo",
            "method": "PUT"
          }
        }
      ]
    },
    "links.saveProfilePictureInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account/profilePictureInfo",
            "method": "PUT"
          }
        }
      ]
    },
    "links.getCreditCardInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account/creditCardInfo",
            "method": "GET"
          }
        }
      ]
    },
    "links.getContractsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/contracts",
            "method": "GET"
          }
        }
      ]
    },
    "links.reactivateCurrentContractLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/contracts/current/reenableAutoRenewal",
            "method": "POST"
          }
        }
      ]
    },
    "links.terminateCurrentContractLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/contracts/current/disableAutoRenewal",
            "method": "POST"
          }
        }
      ]
    },
    "links.deleteNextContractLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/contracts/next",
            "method": "DELETE"
          }
        }
      ]
    },
    "links.activateUserAccountLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account/activate",
            "method": "POST"
          }
        }
      ]
    },
    "links.getProfilePictureInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer/account/profilePictureInfo",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetCustomerIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/customer",
            "method": "GET"
          }
        }
      ]
    },
    "errorResponseMessagePaymentRequiredLinks": {
      "type": "object",
      "required": [
        "offer"
      ],
      "properties": {
        "offer": {
          "$ref": "#/definitions/links.getOfferLink"
        }
      }
    },
    "errorResponseMessagePaymentRequired": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
        },
        {
          "type": "object",
          "required": [
            "errors",
            "links"
          ],
          "properties": {
            "links": {
              "$ref": "#/definitions/errorResponseMessagePaymentRequiredLinks"
            }
          }
        }
      ]
    },
    "customerIndex": {
      "description": "The index of the customer API",
      "type": "object",
      "required": [
        "links",
        "lovLinks"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/customerIndexLinks"
        },
        "lovLinks": {
          "$ref": "#/definitions/customerIndexLovLinks"
        }
      }
    },
    "customerIndexLinks": {
      "description": "Gives you want you can do on this API",
      "type": "object",
      "required": [
        "self",
        "accountInfo",
        "billingPeriods",
        "standardOffers",
        "friendInfo"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetCustomerIndexLink"
        },
        "accountInfo": {
          "$ref": "#/definitions/links.getUserAccountInfoLink"
        },
        "friendInfo": {
          "$ref": "#/definitions/links.getFriendInfoLink"
        },
        "logout": {
          "$ref": "#/definitions/links.logoutLink"
        },
        "stores": {
          "$ref": "#/definitions/links.getStoresLink"
        },
        "billingPeriods": {
          "$ref": "#/definitions/links.getBillingPeriodsLink"
        },
        "standardOffers": {
          "$ref": "#/definitions/links.getStandardOffersLink"
        },
        "getOffer": {
          "$ref": "#/definitions/links.getOfferLink"
        },
        "invoices": {
          "$ref": "#/definitions/links.getInvoicesLink"
        },
        "contracts": {
          "$ref": "#/definitions/links.getContractsLink"
        }
      }
    },
    "customerIndexLovLinks": {
      "type": "object",
      "properties": {
        "offerLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "activeOfferLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "customerStatusLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "beezUPTimeZoneLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "storeCountryLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "storeSectorLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "countryLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "contractTerminationReasonLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "invoicePaymentStatusLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        }
      }
    },
    "storeShares": {
      "type": "object",
      "required": [
        "links",
        "shares"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/storeSharesLinks"
        },
        "shares": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeShare"
          }
        }
      }
    },
    "storeSharesLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getStoreSharesLink"
        },
        "share": {
          "$ref": "#/definitions/links.shareStoreLink"
        }
      }
    },
    "storeShare": {
      "type": "object",
      "required": [
        "userId",
        "userRole",
        "links"
      ],
      "properties": {
        "userId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "userRole": {
          "$ref": "#/definitions/storeUserRole"
        },
        "links": {
          "$ref": "#/definitions/storeShareLinks"
        }
      }
    },
    "storeShareLinks": {
      "description": "The different actions you can make on this store share",
      "type": "object",
      "properties": {
        "deleteShare": {
          "$ref": "#/definitions/links.deleteStoreShareLink"
        }
      }
    },
    "storeListLinks": {
      "type": "object",
      "description": "The action links you can do globally on stores",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getStoresLink"
        },
        "createStore": {
          "$ref": "#/definitions/links.createStoreLink"
        }
      }
    },
    "storeList": {
      "type": "object",
      "required": [
        "links",
        "stores"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/storeListLinks"
        },
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/store"
          }
        }
      }
    },
    "storeUserRole": {
      "type": "string",
      "description": "Indicates the role can have a user on a store.\n* Owner: Indicates that you are the owner of this store\n* User: Indicates that you are a simple user on this store\n",
      "enum": [
        "Owner",
        "User"
      ],
      "example": "User"
    },
    "storeStatus": {
      "type": "string",
      "description": "The store status\n* Active:  When the store is active\n* SystemBlocked:  When the store is blocked by the system\n* UserBlocked: When the store is blocked on GO not on the system\n",
      "enum": [
        "Active",
        "SystemBlocked",
        "UserBlocked"
      ],
      "example": "Active"
    },
    "accountStatus": {
      "type": "string",
      "description": "The account status\n* Active:  When the account is active\n* SystemBlocked:  When all stores on the account are blocked by the system\n* UserBlocked: When all stores on the account are blocked on GO not on the system\n* NotActivated: When the email is not verified\n",
      "enum": [
        "Active",
        "SystemBlocked",
        "UserBlocked",
        "NotActivated"
      ],
      "example": "Active"
    },
    "store": {
      "type": "object",
      "required": [
        "storeId",
        "name",
        "url",
        "countryIsoCodeAlpha3",
        "userRole",
        "status",
        "ownerUserId",
        "shareCount",
        "creationUtcDate",
        "sectors",
        "links"
      ],
      "properties": {
        "storeId": {
          "$ref": "#/definitions/BeezUP.Common.StoreId"
        },
        "name": {
          "$ref": "#/definitions/storeName"
        },
        "url": {
          "$ref": "#/definitions/storeUrl"
        },
        "countryIsoCodeAlpha3": {
          "$ref": "#/definitions/storeCountryIsoCodeAlpha3"
        },
        "sectors": {
          "$ref": "#/definitions/storeSectors"
        },
        "userRole": {
          "$ref": "#/definitions/storeUserRole"
        },
        "status": {
          "$ref": "#/definitions/storeStatus"
        },
        "ownerUserId": {
          "format": "guid",
          "description": "The user id of the owner of the store",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "shareCount": {
          "description": "The share count related to this store",
          "type": "integer",
          "example": 5
        },
        "creationUtcDate": {
          "format": "date-time",
          "description": "The creation date of the store",
          "type": "string",
          "example": "2017-04-01T22:30:00Z"
        },
        "links": {
          "$ref": "#/definitions/storeLinks"
        }
      }
    },
    "storeLinks": {
      "description": "The action links for this store",
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getStoreLink"
        },
        "deleteStore": {
          "$ref": "#/definitions/links.deleteStoreLink"
        },
        "updateStore": {
          "$ref": "#/definitions/links.updateStoreLink"
        },
        "shares": {
          "$ref": "#/definitions/links.getStoreSharesLink"
        },
        "share": {
          "$ref": "#/definitions/links.shareStoreLink"
        }
      }
    },
    "storeName": {
      "description": "The store name. Must be unique.",
      "type": "string",
      "example": "My Store"
    },
    "storeUrl": {
      "type": "string",
      "description": "The url of your store",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "http://www.mystore.com"
    },
    "storeCountryIsoCodeAlpha3": {
      "type": "string",
      "description": "The country iso code alpha 3 based on the list of values /user/lov/StoreCountry",
      "x-lov": "StoreCountry",
      "example": "DEU"
    },
    "storeSectors": {
      "description": "The store's sectors based on the list of values /user/lov/ParamSector",
      "type": "array",
      "items": {
        "$ref": "#/definitions/storeSector"
      },
      "example": [
        "ANIMALERIE",
        "AUTOMOTO"
      ]
    },
    "storeSector": {
      "description": "The store's sector based on the list of values /user/lov/ParamSector",
      "type": "string",
      "example": "ANIMALERIE",
      "x-lov": "ParamSector"
    },
    "contractId": {
      "description": "Your contract identifier",
      "format": "guid",
      "type": "string",
      "example": "7098487a-86f6-4322-b8a5-b67f7363b3e7"
    },
    "invoiceNumber": {
      "type": "string",
      "description": "Your invoice number",
      "example": "B1234"
    },
    "createStoreRequest": {
      "description": "The request to create a store. The store identifier is optional, if null it will be automatically computed.",
      "type": "object",
      "required": [
        "name",
        "url",
        "countryIsoCodeAlpha3",
        "sectors"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/BeezUP.Common.StoreId"
        },
        "name": {
          "$ref": "#/definitions/storeName"
        },
        "url": {
          "$ref": "#/definitions/storeUrl"
        },
        "countryIsoCodeAlpha3": {
          "$ref": "#/definitions/storeCountryIsoCodeAlpha3"
        },
        "sectors": {
          "$ref": "#/definitions/storeSectors"
        }
      }
    },
    "updateStoreRequest": {
      "required": [
        "name",
        "url",
        "sectors"
      ],
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/storeName"
        },
        "url": {
          "$ref": "#/definitions/storeUrl"
        },
        "sectors": {
          "$ref": "#/definitions/storeSectors"
        }
      }
    },
    "functionalityRightInfo": {
      "type": "object",
      "description": "Describe the rights for a functionality",
      "required": [
        "functionalityCode"
      ],
      "properties": {
        "functionalityCode": {
          "type": "string",
          "example": "COMPAMANA",
          "description": "The functionality code"
        },
        "maxValueInterger": {
          "type": "integer",
          "description": "The max value for this functionality code considering your rights",
          "example": 10
        },
        "unlimited": {
          "type": "boolean",
          "example": true,
          "description": "If you can use this functionality unlimitedly"
        }
      }
    },
    "invoiceListLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getInvoicesLink"
        }
      }
    },
    "invoiceList": {
      "type": "object",
      "required": [
        "links",
        "invoices"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/invoiceListLinks"
        },
        "invoices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/invoice"
          },
          "example": [
            {
              "invoiceDate": "2016-05-01",
              "contractId": "7098487a-86f6-4322-b8a5-b67f7363b3e7",
              "invoiceNumber": "B1234",
              "amount": 101.42,
              "amountToBePaid": 0.0,
              "currencyCode": "EUR",
              "paymentStatus": "Paid",
              "dueDate": "2016-05-10",
              "invoiceUrl": "https://beezupbilling.blob.core.windows.net/invoicepdf/2000/CustomerUserId_00000000-0000-0000-0000-000000000000/ContractId_00000000-0000-0000-0000-000000000000/2000-01-01_B1234.pdf"
            }
          ]
        }
      }
    },
    "invoicePaymentStatus": {
      "description": "The payment status",
      "type": "string",
      "enum": [
        "Paid",
        "NotPaid",
        "PartiallyPaid",
        "Loss"
      ],
      "example": "Paid"
    },
    "invoice": {
      "type": "object",
      "required": [
        "invoiceDate",
        "contractId",
        "invoiceNumber",
        "amount",
        "amountToBePaid",
        "currencyCode",
        "paymentStatus",
        "dueDate"
      ],
      "properties": {
        "invoiceDate": {
          "description": "The invoice date",
          "format": "date",
          "type": "string",
          "example": "2016-05-01"
        },
        "contractId": {
          "$ref": "#/definitions/contractId"
        },
        "invoiceNumber": {
          "$ref": "#/definitions/invoiceNumber"
        },
        "amount": {
          "format": "double",
          "type": "number",
          "example": 101.42,
          "description": "The amount of your invoice"
        },
        "amountToBePaid": {
          "format": "double",
          "type": "number",
          "example": 0.0,
          "description": "The remaining amount to be paid for this invoice"
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "paymentStatus": {
          "$ref": "#/definitions/invoicePaymentStatus"
        },
        "dueDate": {
          "format": "date",
          "type": "string",
          "example": "2016-05-10"
        },
        "invoiceUrl": {
          "description": "The url of the invoice document",
          "type": "string",
          "format": "uri",
          "example": "https://beezupbilling.blob.core.windows.net/invoicepdf/2000/CustomerUserId_00000000-0000-0000-0000-000000000000/ContractId_00000000-0000-0000-0000-000000000000/2000-01-01_B1234.pdf"
        }
      }
    },
    "friendEmail": {
      "description": "Your friend's user email",
      "example": "humphray.bogart@yahoo.ma",
      "type": "string",
      "format": "email",
      "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
    },
    "friendCountryIsoCodeAlpha3": {
      "type": "string",
      "x-lov": "Country",
      "description": "Your friend's user country iso code alpha 3",
      "example": "USA"
    },
    "friendProfilePictureUrl": {
      "type": "string",
      "description": "Your friend's user profile picture url",
      "example": "https://www.biography.com/.image/c_fill,cs_srgb,dpr_1.0,g_face,h_300,q_80,w_300/MTE4MDAzNDEwNDU3MjMyOTEw/humphrey-bogart-9217486-1-402.jpg",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$"
    },
    "userFriendInfo": {
      "required": [
        "userId",
        "lastName",
        "firstName",
        "email",
        "countryIsoCodeAlpha3",
        "company"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "guid",
          "description": "Your friend's user id",
          "type": "string",
          "example": "00c4a9d2-fc8e-4b3d-8e52-c4f276245bc1"
        },
        "lastName": {
          "description": "Your friend's user last name",
          "type": "string",
          "example": "Humphrey"
        },
        "firstName": {
          "description": "Your friend's user first name",
          "type": "string",
          "example": "Bogart"
        },
        "email": {
          "$ref": "#/definitions/friendEmail"
        },
        "profilePictureUrl": {
          "$ref": "#/definitions/friendProfilePictureUrl"
        },
        "countryIsoCodeAlpha3": {
          "$ref": "#/definitions/friendCountryIsoCodeAlpha3"
        },
        "company": {
          "description": "Your friend's user company name",
          "type": "string",
          "example": "World company"
        },
        "whatIDo": {
          "description": "Your friend's user occupation in his company",
          "type": "string",
          "example": "I'm an actor..."
        }
      }
    },
    "createContract": {
      "allOf": [
        {
          "$ref": "#/definitions/offerRequest"
        }
      ]
    },
    "createContractResponseLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.createContractLink"
        },
        "contracts": {
          "$ref": "#/definitions/links.getContractsLink"
        }
      }
    },
    "createContractResponse": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/createContractResponseLinks"
        },
        "info": {
          "$ref": "#/definitions/BeezUP.Common.InfoSummaries"
        }
      }
    },
    "contractsLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getContractsLink"
        },
        "create": {
          "$ref": "#/definitions/links.createContractLink"
        }
      }
    },
    "currentContractInfoLinks": {
      "type": "object",
      "properties": {
        "disable": {
          "$ref": "#/definitions/links.terminateCurrentContractLink"
        },
        "reenable": {
          "$ref": "#/definitions/links.reactivateCurrentContractLink"
        }
      }
    },
    "nextContractInfoLinks": {
      "type": "object",
      "properties": {
        "delete": {
          "$ref": "#/definitions/links.deleteNextContractLink"
        }
      }
    },
    "currentContractInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/contractInfo"
        },
        {
          "type": "object",
          "description": "Get the conditions of your current contract",
          "required": [
            "links"
          ],
          "properties": {
            "links": {
              "$ref": "#/definitions/currentContractInfoLinks"
            }
          }
        }
      ]
    },
    "contracts": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/contractsLinks"
        },
        "current": {
          "$ref": "#/definitions/currentContractInfo"
        },
        "next": {
          "$ref": "#/definitions/nextContractInfo"
        }
      }
    },
    "nextContractInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/contractInfo"
        },
        {
          "type": "object",
          "description": "Get the conditions of your next contract",
          "required": [
            "links"
          ],
          "properties": {
            "links": {
              "$ref": "#/definitions/nextContractInfoLinks"
            }
          }
        }
      ]
    },
    "contractInfo": {
      "description": "Describe the conditions of a contract",
      "type": "object",
      "properties": {
        "trialPeriodInMonth": {
          "format": "int32",
          "description": "The trial period in month",
          "type": "integer"
        },
        "billingPeriodPercentDiscount": {
          "format": "double",
          "description": "The percent discount related to the billing period",
          "type": "number"
        },
        "discountDurationInMonth": {
          "format": "int32",
          "description": "The discount duration in month",
          "type": "integer"
        },
        "percentDiscount": {
          "format": "double",
          "description": "The percent of the discount",
          "type": "number"
        },
        "offerId": {
          "$ref": "#/definitions/offerId"
        },
        "storeCount": {
          "$ref": "#/definitions/storeCount"
        },
        "startUtcDate": {
          "format": "date-time",
          "description": "The start date of your contract",
          "type": "string"
        },
        "commitmentCalculatedFinishUtcDate": {
          "format": "date-time",
          "description": "The calculated end date of commitment",
          "type": "string"
        },
        "billingPeriodInMonth": {
          "format": "int32",
          "description": "The billing period in month",
          "type": "integer"
        },
        "fixedPrice": {
          "format": "double",
          "description": "The fixed price of your contract",
          "type": "number"
        },
        "offerName": {
          "description": "The offer name based on /offers",
          "type": "string"
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "contractId": {
          "$ref": "#/definitions/contractId"
        },
        "commitmentPeriodInMonth": {
          "format": "int32",
          "description": "The commitment period in month",
          "type": "integer"
        },
        "clickIncluded": {
          "format": "int32",
          "description": "The click included",
          "type": "integer"
        },
        "additionalClickPrice": {
          "format": "double",
          "description": "Additional click price",
          "type": "number"
        },
        "ipUserCreation": {
          "description": "The IP of the user who creates the contract",
          "type": "string"
        },
        "ipUserModification": {
          "description": "The IP of the user who modified the contract",
          "type": "string"
        },
        "fixedAndVariableClickInfo": {
          "$ref": "#/definitions/fixedAndVariableClickModelInfo"
        },
        "variableModelInfo": {
          "$ref": "#/definitions/variableModelInfo"
        },
        "isCommitmentRenewalAutomatically": {
          "description": "Is commitment is automatically renewed",
          "type": "boolean"
        },
        "discountEndUtcDate": {
          "format": "date-time",
          "description": "The end of your discount",
          "type": "string"
        },
        "isModifiableContract": {
          "description": "Is the contract is modifiable ?",
          "type": "boolean"
        }
      }
    },
    "clickIncludedAndAdditionalClickPrice": {
      "type": "object",
      "properties": {
        "clickIncluded": {
          "format": "int32",
          "description": "The click included",
          "type": "integer"
        },
        "additionalClickPrice": {
          "format": "double",
          "description": "The additional click price",
          "type": "number"
        }
      }
    },
    "clickIncludedAndVariablePrice": {
      "type": "object",
      "properties": {
        "clickIncluded": {
          "format": "int32",
          "description": "Click included",
          "type": "integer"
        },
        "variablePrice": {
          "format": "double",
          "description": "The pricing applied for this range",
          "type": "number"
        }
      }
    },
    "terminateContract": {
      "description": "The contract termination info",
      "required": [
        "contractTerminationReasonType"
      ],
      "type": "object",
      "properties": {
        "contractTerminationReasonType": {
          "$ref": "#/definitions/contractTerminationReasonType"
        },
        "contractTerminationReason": {
          "$ref": "#/definitions/contractTerminationReason"
        }
      }
    },
    "offerId": {
      "format": "int32",
      "description": "The offer id based on /offers. Not a free offer of course.",
      "type": "integer",
      "example": 1,
      "minimum": 1
    },
    "storeCount": {
      "format": "int32",
      "description": "The store count you want to have in your contract.",
      "type": "integer",
      "example": 1,
      "minimum": 1
    },
    "couponDiscountCode": {
      "description": "The coupon discount code",
      "type": "string",
      "example": "I-LOVE-BEEZUP"
    },
    "couponOfferCode": {
      "format": "guid",
      "description": "Your special coupon offer identifier",
      "type": "string",
      "example": "04efc310-bc25-4710-a83a-faf200284fe5"
    },
    "billingPeriodInMonth": {
      "format": "int32",
      "description": "Can be null. The billing period in month based on /billingPeriods",
      "type": "integer",
      "example": 12,
      "minimum": 1
    },
    "contractTerminationReasonType": {
      "format": "int32",
      "description": "The contract termination reason type identifier, if your current contract is scheduled to be terminated. The value is based on the list of values /user/lov/ContractTerminationReason",
      "type": "integer",
      "x-lov": "ContractTerminationReason",
      "example": 1
    },
    "contractTerminationReason": {
      "description": "The termination reason, if your current contract is scheduled to be terminated.",
      "type": "string",
      "example": "I'm crazy, I want to leave your splendid service..."
    },
    "offerRequest": {
      "required": [
        "offerId",
        "storeCount",
        "billingPeriodInMonth"
      ],
      "type": "object",
      "properties": {
        "offerId": {
          "$ref": "#/definitions/offerId"
        },
        "storeCount": {
          "$ref": "#/definitions/storeCount"
        },
        "couponDiscountCode": {
          "$ref": "#/definitions/couponDiscountCode"
        },
        "couponOfferCode": {
          "$ref": "#/definitions/couponOfferCode"
        },
        "billingPeriodInMonth": {
          "$ref": "#/definitions/billingPeriodInMonth"
        }
      }
    },
    "paymentMethod": {
      "description": "Payment method",
      "enum": [
        "Transfer",
        "Debit",
        "Paypal",
        "Check",
        "CreditNote",
        "Loss",
        "OnlinePayment"
      ],
      "type": "string",
      "default": "OnlinePayment"
    },
    "offer": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/offerContent"
        },
        "info": {
          "$ref": "#/definitions/BeezUP.Common.InfoSummaries"
        },
        "links": {
          "$ref": "#/definitions/offerLinks"
        }
      }
    },
    "offerLinks": {
      "description": "The different actions you can make on this offer",
      "type": "object",
      "properties": {
        "createContract": {
          "$ref": "#/definitions/links.createContractLink"
        }
      }
    },
    "offerContent": {
      "type": "object",
      "required": [
        "previousFixPeriodInvoiceProrataInfo",
        "contractBillingPeriodInfo",
        "contractClickInfo",
        "contractCommitmentInfo",
        "contractDiscountInfo",
        "contractMoneyInfo",
        "contractStoreInfo",
        "contractBonusInfo",
        "notifyVatExemption"
      ],
      "properties": {
        "previousFixPeriodInvoiceProrataInfo": {
          "$ref": "#/definitions/previousFixPeriodInvoiceProrataInfo"
        },
        "contractBillingPeriodInfo": {
          "$ref": "#/definitions/contractBillingPeriodInfo"
        },
        "contractClickInfo": {
          "$ref": "#/definitions/contractClickInfo"
        },
        "contractCommitmentInfo": {
          "$ref": "#/definitions/contractCommitmentInfo"
        },
        "contractDiscountInfo": {
          "$ref": "#/definitions/contractDiscountInfo"
        },
        "contractMoneyInfo": {
          "$ref": "#/definitions/contractMoneyInfo"
        },
        "contractStoreInfo": {
          "$ref": "#/definitions/contractStoreInfo"
        },
        "contractBonusInfo": {
          "$ref": "#/definitions/contractBonusInfo"
        },
        "contractTerminationReasonType": {
          "$ref": "#/definitions/contractTerminationReasonType"
        },
        "contractTerminationReason": {
          "$ref": "#/definitions/contractTerminationReason"
        },
        "notifyVatExemption": {
          "description": "Internal usage: Indicates if we have to notify you about VAT exemption.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "previousFixPeriodInvoiceProrataInfo": {
      "description": "Describe the prorata info based on your previous invoice",
      "type": "object",
      "properties": {
        "computedProrataToBeDeducted": {
          "format": "double",
          "description": "The prorata amount",
          "type": "number",
          "example": 194.66
        },
        "invoiceNumber": {
          "description": "The previous invoice number",
          "type": "string",
          "example": "B1234"
        },
        "amountToBePaid": {
          "format": "double",
          "description": "The amount to be payed of the previous invoice",
          "type": "number",
          "example": 0.0
        },
        "amountAfterTax": {
          "format": "double",
          "description": "The amout after tax of the previous invoice",
          "type": "number",
          "example": 101.42
        },
        "contractId": {
          "format": "guid",
          "description": "The contract id related to the previous invoice",
          "type": "string",
          "example": "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
        },
        "fixedPeriodEndDate": {
          "format": "date",
          "description": "The fixed end period of the previous invoice",
          "type": "string",
          "example": "2017-05-01"
        },
        "fixedPeriodStartDate": {
          "format": "date",
          "description": "The fixed start period of the previous invoice",
          "type": "string",
          "example": "2017-04-01"
        }
      }
    },
    "contractBillingPeriodInfo": {
      "description": "Describe the billing period information related to the offer.",
      "type": "object",
      "properties": {
        "amountBillingPeriodDiscount": {
          "format": "double",
          "description": "The amount discounted related to the billing period",
          "type": "number",
          "example": 20
        },
        "billingPeriodPercentDiscount": {
          "format": "double",
          "description": "The discount percent related to the billing period",
          "type": "number",
          "example": 10
        },
        "billingPeriodInMonth": {
          "$ref": "#/definitions/billingPeriodInMonth"
        }
      }
    },
    "contractClickInfo": {
      "description": "Describe the click information related to the offer.",
      "type": "object",
      "properties": {
        "additionalClickPrice": {
          "format": "double",
          "description": "The addition click price in the offer",
          "type": "number",
          "example": 0.001
        },
        "clickIncluded": {
          "format": "int32",
          "description": "The click included in the offer",
          "type": "integer",
          "example": 5000
        },
        "initialOfferClickIncluded": {
          "format": "int32",
          "description": "The click included in your current contract",
          "type": "integer",
          "example": 5000
        }
      }
    },
    "contractCommitmentInfo": {
      "description": "Describe the commitment information related to the offer.",
      "type": "object",
      "properties": {
        "commitmentCalculatedFinishDate": {
          "format": "date",
          "description": "The commitment end date related to the offer",
          "type": "string",
          "example": "2017-06-02"
        },
        "newContractStartDate": {
          "format": "date-time",
          "description": "The start date related to the offer",
          "type": "string",
          "example": "2017-05-01T13:02:24"
        },
        "commitmentPeriodInMonth": {
          "format": "int32",
          "description": "The commitment period in month related to the offer",
          "type": "integer",
          "example": 1
        },
        "trialPeriodInMonth": {
          "format": "int32",
          "description": "The trial period in month related to the offer",
          "type": "integer",
          "example": 0
        },
        "trialPeriodFinishDate": {
          "format": "date",
          "description": "The trial period end date related to the offer",
          "type": "string"
        },
        "paymentDelayInDays": {
          "format": "int32",
          "description": "The payment delay in days related to the offer",
          "type": "integer",
          "example": 1
        },
        "offerId": {
          "$ref": "#/definitions/offerId"
        },
        "offerName": {
          "description": "The offer Name",
          "type": "string",
          "example": "Premium"
        },
        "currentContractId": {
          "format": "guid",
          "description": "Your current contract id",
          "type": "string",
          "example": "dce56457-aa23-478d-8d76-b56eb9be799f"
        },
        "commercialUserId": {
          "format": "guid",
          "description": "Your current commercial user id",
          "type": "string",
          "example": "0ddc2b79-10fe-4071-8161-42faa897082f"
        },
        "model": {
          "description": "Interal usage: Old offer type. The model description",
          "type": "string",
          "example": "BLABLA"
        },
        "currentContractTerminationDate": {
          "format": "date",
          "description": "The current contract termination date",
          "type": "string",
          "example": "2017-06-02"
        },
        "requestedPaymentMethod": {
          "$ref": "#/definitions/paymentMethod"
        },
        "currentCustomerPaymentMethod": {
          "$ref": "#/definitions/paymentMethod"
        },
        "contractType": {
          "format": "int32",
          "description": "Internal usage: Old offer type. Your contract type",
          "type": "integer",
          "example": 1234
        },
        "isModelMustBeTransmittedInNewContract": {
          "description": "Internal usage: Old offer type. Is the current contract model needs to be converted into a new contract type",
          "type": "boolean",
          "example": false
        },
        "fixedAndVariableClickInfo": {
          "$ref": "#/definitions/fixedAndVariableClickModelInfo"
        },
        "variableModelInfo": {
          "$ref": "#/definitions/variableModelInfo"
        },
        "paymentMethodAuthorized": {
          "$ref": "#/definitions/paymentMethod"
        },
        "couponOfferCode": {
          "$ref": "#/definitions/couponOfferCode"
        },
        "commercialCreatorUserId": {
          "format": "guid",
          "description": "The commercial that is responsible of the creation of your account",
          "type": "string",
          "example": "6e07814d-26a9-494b-91b2-e5ed0b9aba8c"
        },
        "minBillingPeriodInMonths": {
          "format": "int32",
          "description": "The minimum billing period in month authorized for this offer.",
          "type": "integer",
          "example": 1
        },
        "isCustomerWantsToTerminateHisContract": {
          "description": "If true, this means you want to leave us and that's sad... :'-(",
          "type": "boolean",
          "example": false
        }
      }
    },
    "contractDiscountInfo": {
      "description": "Describe the discount information related to the offer.",
      "type": "object",
      "properties": {
        "amountCodePromoDiscountPerMonth": {
          "format": "double",
          "description": "The amount discounted per month",
          "type": "number",
          "example": 101.42
        },
        "discountDurationInMonth": {
          "format": "int32",
          "description": "Duration of the discount in month",
          "type": "integer",
          "example": 1
        },
        "percentDiscount": {
          "format": "double",
          "description": "Percentage of the discount",
          "type": "number",
          "example": 20.0
        },
        "promotionalCodeValidity": {
          "$ref": "#/definitions/promotionalCodeValidity"
        },
        "amountCodePromoDiscount": {
          "format": "double",
          "description": "The discount amount",
          "type": "number",
          "example": 101.42
        },
        "couponDiscountCode": {
          "description": "The discount code",
          "type": "string",
          "example": "I-LOVE-BEEZUP"
        },
        "couponDiscountId": {
          "format": "int32",
          "description": "Internal use: The discount id",
          "type": "integer",
          "example": 1
        },
        "isCouponDiscountLinkedToCouponOffer": {
          "description": "Is this discount is related to a coupon offer",
          "type": "boolean",
          "example": true
        },
        "customerHasActualDiscount": {
          "description": "Do you have currently a discount on your contract ?",
          "type": "boolean",
          "example": true
        }
      }
    },
    "contractMoneyInfo": {
      "description": "Describe the pricing information related to the offer.",
      "type": "object",
      "properties": {
        "amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount": {
          "format": "double",
          "description": "The amount excluding taxes and excluding code promo discount including billing period discount.",
          "type": "number"
        },
        "amountExcludingTaxesIncludingDiscounts": {
          "format": "double",
          "description": "The amount excluding taxes including discounts.",
          "type": "number"
        },
        "amountTaxesExcludingDiscountIncludingBillingPeriodDiscount": {
          "format": "double",
          "description": "The taxes excluding discount including billing period discount.",
          "type": "number"
        },
        "amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount": {
          "format": "double",
          "description": "The amount including taxes excluding discount including billing period discount.",
          "type": "number"
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "vatPercent": {
          "format": "double",
          "description": "The VAT percent.",
          "type": "number"
        },
        "amountExcludingTaxesIncludingDiscountsPerMonth": {
          "format": "double",
          "description": "The amount excluding taxes including discounts per month.",
          "type": "number"
        },
        "amountExcludingTaxesAndExcludingDiscounts": {
          "format": "double",
          "description": "The amount excluding taxes and excluding discounts.",
          "type": "number"
        },
        "amountTaxesIncludingDiscounts": {
          "format": "double",
          "description": "Taxes including discounts.",
          "type": "number"
        },
        "amountIncludingTaxesIncludingDiscounts": {
          "format": "double",
          "description": "The amount including taxes including discounts.",
          "type": "number"
        },
        "initialOfferFixedPrice": {
          "format": "double",
          "description": "The initial offer fixed price.",
          "type": "number"
        }
      }
    },
    "contractStoreInfo": {
      "description": "Describe the store information related to the offer.",
      "type": "object",
      "properties": {
        "storeCount": {
          "$ref": "#/definitions/storeCount"
        },
        "maxStoreCount": {
          "format": "int32",
          "description": "The maximum store count related to the offer.",
          "type": "integer"
        },
        "minStoreCount": {
          "format": "int32",
          "description": "The minimum store count related to the offer.",
          "type": "integer"
        },
        "ownedStoreCount": {
          "format": "int32",
          "description": "The owned store count.",
          "type": "integer"
        },
        "additionalStorePrice": {
          "format": "double",
          "description": "The additional store price.",
          "type": "number"
        },
        "storeIncluded": {
          "format": "int32",
          "description": "The store count included in the offer.",
          "type": "integer"
        }
      }
    },
    "contractBonusInfo": {
      "description": "Describe the bonus information related to your current contract.",
      "type": "object",
      "required": [
        "bonuses"
      ],
      "properties": {
        "bonuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bonusInfo"
          }
        }
      }
    },
    "fixedAndVariableClickModelInfo": {
      "description": "Internal usage: Old offer type. Describe the fix and variable model information",
      "type": "object",
      "required": [
        "clickIncludedAndAdditionalClickPrices"
      ],
      "properties": {
        "clickIncludedAndAdditionalClickPrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clickIncludedAndAdditionalClickPrice"
          }
        }
      }
    },
    "variableModelInfo": {
      "description": "Internal usage: Old offer type. Describe the fix and variable model information",
      "type": "object",
      "required": [
        "clickIncludedAndVariablePrices",
        "overflowClickCount",
        "overflowClickPrice"
      ],
      "properties": {
        "clickIncludedAndVariablePrices": {
          "description": "Click included with variable pricing information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/clickIncludedAndVariablePrice"
          }
        },
        "overflowClickCount": {
          "format": "int32",
          "description": "The overflow click count",
          "type": "integer"
        },
        "overflowClickPrice": {
          "format": "double",
          "description": "The overflow click price",
          "type": "number"
        }
      }
    },
    "bonusInfo": {
      "type": "object",
      "required": [
        "bonusType",
        "amount"
      ],
      "properties": {
        "bonusType": {
          "$ref": "#/definitions/bonusType"
        },
        "amount": {
          "format": "double",
          "type": "number",
          "example": 12.34
        }
      }
    },
    "lastName": {
      "description": "Your last name",
      "type": "string",
      "example": "Simon"
    },
    "firstName": {
      "description": "Your first name",
      "type": "string",
      "example": "Paul"
    },
    "phoneNumber": {
      "description": "Your phone number",
      "type": "string",
      "example": 5551234
    },
    "address": {
      "description": "Your address",
      "type": "string",
      "example": "21 jump street"
    },
    "postalCode": {
      "description": "Your address postal code",
      "type": "string",
      "example": 13014
    },
    "city": {
      "description": "Your address city",
      "type": "string",
      "example": "New-York"
    },
    "company": {
      "description": "Your company name",
      "type": "string",
      "example": "My super company"
    },
    "vatNumber": {
      "description": "Your company VATNumber. Used for french company. This number is checked with official web service before being saved.",
      "type": "string",
      "example": 1234567890
    },
    "accountingEmails": {
      "description": "Your company accounting emails",
      "type": "array",
      "items": {
        "$ref": "#/definitions/BeezUP.Common.Email"
      },
      "example": [
        "myaccountemail@mysupercompany.com"
      ]
    },
    "profilePictureUrl": {
      "description": "Indicate the url of your picture profil",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Marlon_Brando_%28cropped%29.jpg/220px-Marlon_Brando_%28cropped%29.jpg",
      "type": "string"
    },
    "profilePictureSelected": {
      "description": "Your profile picture choice about usage of gravatar picture, initials picture or uploaded picture.",
      "type": "string",
      "enum": [
        "gravatar",
        "initials",
        "uploaded"
      ],
      "example": "initials"
    },
    "whatIDo": {
      "description": "Your role in your company",
      "type": "string",
      "example": "I'm the Manager on this company"
    },
    "beezUPTimeZoneId": {
      "format": "int32",
      "description": "The time zone identifier based on the list of values /v2/user/lov/BeezUPTimeZone",
      "type": "integer",
      "x-lov": "BeezUPTimeZone",
      "example": 79
    },
    "cardNumber": {
      "description": "Card number",
      "type": "string",
      "example": 1234567890091234
    },
    "cardVerificationCode": {
      "description": "Card Verification Code",
      "type": "string",
      "example": 123
    },
    "expirationMonth": {
      "format": "int32",
      "description": "Expiration Month",
      "type": "integer",
      "example": 12,
      "minimum": 1,
      "maximum": 12
    },
    "expirationYear": {
      "format": "int32",
      "description": "Expiration Year",
      "type": "integer",
      "example": 2017,
      "minimum": 2017,
      "maximum": 9000
    },
    "accountInfoLinks": {
      "description": "The different actions you can make on this account",
      "type": "object",
      "required": [
        "self",
        "savePersonalInfo",
        "changePassword",
        "getProfilePictureInfo",
        "saveCompanyInfo",
        "saveProfilePictureInfo",
        "getCreditCardInfo",
        "saveCreditCardInfo"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getUserAccountInfoLink"
        },
        "savePersonalInfo": {
          "$ref": "#/definitions/links.savePersonalInfoLink"
        },
        "changePassword": {
          "$ref": "#/definitions/links.changePasswordLink"
        },
        "saveCompanyInfo": {
          "$ref": "#/definitions/links.saveCompanyInfoLink"
        },
        "getProfilePictureInfo": {
          "$ref": "#/definitions/links.getProfilePictureInfoLink"
        },
        "saveProfilePictureInfo": {
          "$ref": "#/definitions/links.saveProfilePictureInfoLink"
        },
        "getCreditCardInfo": {
          "$ref": "#/definitions/links.getCreditCardInfoLink"
        },
        "saveCreditCardInfo": {
          "$ref": "#/definitions/links.saveCreditCardInfoLink"
        },
        "activateUserAccount": {
          "$ref": "#/definitions/links.activateUserAccountLink"
        }
      }
    },
    "accountInfo": {
      "type": "object",
      "required": [
        "userId",
        "email",
        "status",
        "links"
      ],
      "properties": {
        "userId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "email": {
          "$ref": "#/definitions/BeezUP.Common.Email"
        },
        "personalInfo": {
          "$ref": "#/definitions/personalInfo"
        },
        "status": {
          "$ref": "#/definitions/accountStatus"
        },
        "companyInfo": {
          "$ref": "#/definitions/companyInfo"
        },
        "profilePictureUrl": {
          "$ref": "#/definitions/profilePictureUrl"
        },
        "links": {
          "$ref": "#/definitions/accountInfoLinks"
        },
        "info": {
          "$ref": "#/definitions/BeezUP.Common.InfoSummaries"
        }
      }
    },
    "personalInfo": {
      "required": [
        "firstName",
        "lastName",
        "phoneNumber",
        "beezUPTimeZoneId"
      ],
      "type": "object",
      "properties": {
        "lastName": {
          "$ref": "#/definitions/lastName"
        },
        "firstName": {
          "$ref": "#/definitions/firstName"
        },
        "phoneNumber": {
          "$ref": "#/definitions/phoneNumber"
        },
        "whatIDo": {
          "$ref": "#/definitions/whatIDo"
        },
        "beezUPTimeZoneId": {
          "$ref": "#/definitions/beezUPTimeZoneId"
        }
      }
    },
    "changePasswordRequest": {
      "required": [
        "oldPassword",
        "newPassword"
      ],
      "type": "object",
      "properties": {
        "oldPassword": {
          "description": "Your current password",
          "type": "string",
          "format": "password"
        },
        "newPassword": {
          "description": "Your new password. Which must respect the same constraints as the user registeration",
          "type": "string",
          "format": "password"
        }
      }
    },
    "companyInfo": {
      "required": [
        "company",
        "address",
        "postalCode",
        "city",
        "countryIsoCodeAlpha3"
      ],
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/address"
        },
        "postalCode": {
          "$ref": "#/definitions/postalCode"
        },
        "city": {
          "$ref": "#/definitions/city"
        },
        "countryIsoCodeAlpha3": {
          "$ref": "#/definitions/BeezUP.Common.CountryIsoCodeAlpha3"
        },
        "company": {
          "$ref": "#/definitions/company"
        },
        "vatNumber": {
          "$ref": "#/definitions/vatNumber"
        },
        "accountingEmails": {
          "$ref": "#/definitions/accountingEmails"
        }
      }
    },
    "profilePictureInfoResponseLinks": {
      "type": "object",
      "required": [
        "self",
        "save"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getProfilePictureInfoLink"
        },
        "save": {
          "$ref": "#/definitions/links.saveProfilePictureInfoLink"
        }
      }
    },
    "profilePictureInfoResponse": {
      "type": "object",
      "required": [
        "profilePictureInfo",
        "links"
      ],
      "properties": {
        "profilePictureInfo": {
          "$ref": "#/definitions/profilePictureInfoWithDefault"
        },
        "links": {
          "$ref": "#/definitions/profilePictureInfoResponseLinks"
        }
      }
    },
    "profilePictureInfoWithDefault": {
      "allOf": [
        {
          "$ref": "#/definitions/profilePictureInfo"
        },
        {
          "type": "object",
          "required": [
            "profilePictureSelected",
            "initialsProfilePictureUrl",
            "gravatarProfilePictureUrl"
          ],
          "properties": {
            "initialsProfilePictureUrl": {
              "$ref": "#/definitions/initialsProfilePictureUrl"
            },
            "gravatarProfilePictureUrl": {
              "$ref": "#/definitions/gravatarProfilePictureUrl"
            }
          }
        }
      ]
    },
    "initialsProfilePictureUrl": {
      "description": "Indicate the url of your picture profil based on your initials",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "https://dummyimage.com/50x50/000000/fff&text=AM",
      "type": "string"
    },
    "gravatarProfilePictureUrl": {
      "description": "Indicate the url of your picture profil based on gravatar",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?d=mm",
      "type": "string"
    },
    "profilePictureInfo": {
      "required": [
        "profilePictureSelected"
      ],
      "type": "object",
      "properties": {
        "profilePictureUrl": {
          "$ref": "#/definitions/profilePictureUrl"
        },
        "profilePictureSelected": {
          "$ref": "#/definitions/profilePictureSelected"
        }
      }
    },
    "creditCardInfoResponseLinks": {
      "description": "The different actions you can make on this offer",
      "type": "object",
      "required": [
        "self",
        "saveCreditCardInfo"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getCreditCardInfoLink"
        },
        "saveCreditCardInfo": {
          "$ref": "#/definitions/links.saveCreditCardInfoLink"
        }
      }
    },
    "creditCardInfoResponse": {
      "type": "object",
      "required": [
        "links",
        "currentPaymentMethod"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/creditCardInfoResponseLinks"
        },
        "currentPaymentMethod": {
          "$ref": "#/definitions/paymentMethod"
        },
        "creditCardInfo": {
          "$ref": "#/definitions/creditCardInfoWithCardType"
        },
        "info": {
          "$ref": "#/definitions/BeezUP.Common.InfoSummaries"
        }
      }
    },
    "creditCardInfo": {
      "required": [
        "cardNumber",
        "cardVerificationCode",
        "expirationMonth",
        "expirationYear"
      ],
      "type": "object",
      "properties": {
        "cardNumber": {
          "$ref": "#/definitions/cardNumber"
        },
        "cardVerificationCode": {
          "$ref": "#/definitions/cardVerificationCode"
        },
        "expirationMonth": {
          "$ref": "#/definitions/expirationMonth"
        },
        "expirationYear": {
          "$ref": "#/definitions/expirationYear"
        }
      }
    },
    "creditCardInfoWithCardType": {
      "required": [
        "cardNumber",
        "expirationMonth",
        "expirationYear",
        "cardType"
      ],
      "properties": {
        "cardNumber": {
          "$ref": "#/definitions/cardNumber"
        },
        "expirationMonth": {
          "$ref": "#/definitions/expirationMonth"
        },
        "expirationYear": {
          "$ref": "#/definitions/expirationYear"
        },
        "cardType": {
          "description": "Your credit card type. Example: VISA, MasterCard, etc...",
          "type": "string",
          "example": "VISA"
        }
      }
    },
    "storeAlerts": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeAlert"
          },
          "example": [
            {
              "alertId": 8,
              "alertName": "NoImportSinceXDays",
              "isActive": true,
              "properties": [
                {
                  "propertyId": 2,
                  "propertyValidationExpression": "\\b0*([1-9]|[12][0-9]|30)\\b",
                  "propertyValue": 2
                }
              ]
            }
          ]
        }
      }
    },
    "alertId": {
      "format": "int32",
      "description": "Alert identifier",
      "type": "integer",
      "example": 8
    },
    "alertName": {
      "description": "The alert name",
      "type": "string",
      "example": "NoImportSinceXDays"
    },
    "alertEnabled": {
      "description": "Is the alert enable ?",
      "type": "boolean",
      "example": true
    },
    "storeAlert": {
      "type": "object",
      "required": [
        "links",
        "alertId",
        "alertName",
        "enabled"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/storeAlertLinks"
        },
        "alertId": {
          "$ref": "#/definitions/alertId"
        },
        "alertName": {
          "$ref": "#/definitions/alertName"
        },
        "enabled": {
          "$ref": "#/definitions/alertEnabled"
        },
        "properties": {
          "description": "The current configuration properties of the alert",
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeAlertPropertyInfo"
          },
          "example": [
            {
              "propertyId": 2,
              "propertyValidationExpression": "\\b0*([1-9]|[12][0-9]|30)\\b",
              "propertyValue": "2"
            }
          ]
        }
      }
    },
    "storeAlertLinks": {
      "description": "The different actions you can make on this alert",
      "type": "object",
      "properties": {
        "save": {
          "$ref": "#/definitions/links.saveStoreAlertsLink"
        }
      }
    },
    "alertPropertyId": {
      "format": "int32",
      "description": "The property identifier of the alert",
      "type": "integer",
      "example": 2
    },
    "alertPropertyValue": {
      "description": "The property value",
      "type": "string",
      "example": "2"
    },
    "storeAlertPropertyInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/storeAlertProperty"
        },
        {
          "type": "object",
          "required": [
            "propertyId",
            "propertyName",
            "propertyValue"
          ],
          "properties": {
            "propertyName": {
              "description": "The property name of the alert",
              "type": "string",
              "example": "NbDays"
            },
            "propertyValidationExpression": {
              "description": "The regular expression related to the alert property",
              "type": "string",
              "example": "\\b0*([1-9]|[12][0-9]|30)\\b"
            }
          }
        }
      ]
    },
    "saveStoreAlertsRequest": {
      "type": "object",
      "description": "The key is the alert identifier (alertId)",
      "additionalProperties": {
        "$ref": "#/definitions/saveStoreAlertRequest"
      }
    },
    "saveStoreAlertRequest": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "$ref": "#/definitions/alertEnabled"
        },
        "properties": {
          "description": "Properties to configure the alert",
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeAlertProperty"
          },
          "example": [
            {
              "propertyId": 2,
              "propertyValue": "3"
            }
          ]
        }
      }
    },
    "storeAlertProperty": {
      "type": "object",
      "required": [
        "propertyId",
        "propertyValue"
      ],
      "properties": {
        "propertyId": {
          "$ref": "#/definitions/alertPropertyId"
        },
        "propertyValue": {
          "$ref": "#/definitions/alertPropertyValue"
        }
      }
    },
    "standardOffersLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getStandardOffersLink"
        }
      }
    },
    "standardOffers": {
      "type": "object",
      "required": [
        "links",
        "offers",
        "functionalities"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/standardOffersLinks"
        },
        "offers": {
          "description": "All standard offers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/standardOffer"
          },
          "example": [
            {
              "additionalClickPrice": 0.1234,
              "includedClick": 1200,
              "isMostPopular": true,
              "name": "Wonder offer",
              "offerId": 1234,
              "fixedPrice": 101.42,
              "currencyCode": "EUR",
              "position": 1,
              "functionalities": [
                {
                  "functionalityCode": "MARKETMANA",
                  "maxValueInteger": 4,
                  "unlimited": false,
                  "text": "Marketplace management"
                }
              ]
            }
          ]
        },
        "functionalities": {
          "description": "All functionalities...",
          "type": "array",
          "items": {
            "$ref": "#/definitions/functionality"
          },
          "example": [
            {
              "code": "MARKETMANA",
              "order": 1
            }
          ]
        }
      }
    },
    "standardOfferLinks": {
      "type": "object",
      "properties": {
        "getOffer": {
          "$ref": "#/definitions/links.getOfferLink"
        }
      }
    },
    "standardOffer": {
      "type": "object",
      "required": [
        "offerId",
        "name",
        "links"
      ],
      "properties": {
        "offerId": {
          "format": "int32",
          "description": "The offer Id",
          "type": "integer",
          "example": 1234
        },
        "name": {
          "description": "The offer name",
          "type": "string",
          "example": "Wonder offer"
        },
        "additionalClickPrice": {
          "format": "double",
          "description": "The additional click price",
          "type": "number",
          "example": 0.1234
        },
        "includedClick": {
          "format": "int32",
          "description": "The included click",
          "type": "integer",
          "example": 1200
        },
        "isMostPopular": {
          "description": "UI purpose. Is the offer is the most popular",
          "type": "boolean",
          "example": true
        },
        "isOldOffer": {
          "description": "Is an old offer",
          "type": "boolean",
          "example": false
        },
        "fixedPrice": {
          "format": "double",
          "description": "The fixed price of the offer",
          "type": "number",
          "example": 101.42
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "position": {
          "format": "int32",
          "description": "UI purpose. The position of the offer",
          "type": "integer",
          "example": 1
        },
        "functionalities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/offerFunctionality"
          },
          "example": [
            {
              "functionalityCode": "MARKETMANA",
              "maxValueInteger": 4,
              "unlimited": false,
              "text": "Marketplace management"
            }
          ]
        },
        "links": {
          "$ref": "#/definitions/standardOfferLinks"
        }
      }
    },
    "functionality": {
      "type": "object",
      "required": [
        "code",
        "order"
      ],
      "properties": {
        "code": {
          "description": "The functionality code",
          "type": "string",
          "example": "MARKETMANA"
        },
        "order": {
          "format": "int32",
          "description": "UI purpose: Indicate the position of the functionality",
          "type": "integer",
          "example": 1
        }
      }
    },
    "offerFunctionality": {
      "type": "object",
      "required": [
        "functionalityCode",
        "unlimited"
      ],
      "properties": {
        "functionalityCode": {
          "description": "The functionality code",
          "type": "string",
          "example": "MARKETMANA"
        },
        "maxValueInteger": {
          "format": "int32",
          "description": "The max value in integer for this feature in this offer",
          "type": "integer",
          "example": 4
        },
        "unlimited": {
          "description": "Is this feature is unlimited for this offer?",
          "type": "boolean",
          "example": false
        },
        "text": {
          "description": "A description text of this feature",
          "type": "string",
          "example": "Marketplace management"
        }
      }
    },
    "billingPeriodListLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.getBillingPeriodsLink"
        }
      }
    },
    "billingPeriodList": {
      "type": "object",
      "required": [
        "links",
        "billingPeriods"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/billingPeriodListLinks"
        },
        "billingPeriods": {
          "description": "The billing period list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/billingPeriod"
          },
          "example": [
            {
              "billingPeriodInMonth": 12,
              "discountPercentage": 20.0
            }
          ]
        }
      }
    },
    "billingPeriod": {
      "type": "object",
      "required": [
        "billingPeriodInMonth",
        "discountPercentage"
      ],
      "properties": {
        "billingPeriodInMonth": {
          "format": "int32",
          "description": "The billing period in month",
          "type": "integer",
          "example": 12
        },
        "discountPercentage": {
          "format": "double",
          "description": "The discount percentage related to this billing period",
          "type": "number",
          "example": 20.0
        }
      }
    },
    "promotionalCodeValidity": {
      "description": "Indicate the validaty of the discount",
      "enum": [
        "None",
        "Valid",
        "Invalid",
        "ExpiredOrInactive"
      ],
      "type": "string",
      "example": "Valid"
    },
    "bonusType": {
      "enum": [
        "OnlinePaymentMethodBonus",
        "PreviousInvoiceProrataBonus",
        "PreviousContractBonus"
      ],
      "type": "string"
    },
    "links.Catalog_ComputeExpressionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/customColumns/computeExpression",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "computeExpressionRequest"
              }
            }
          }
        }
      ]
    },
    "links.Catalog_ChangeCatalogColumnUserNameLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/catalogColumns/b45c1999-e089-4bb1-a219-80a7a50a6f53/rename",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "changeUserColumnNameRequest"
              }
            }
          }
        }
      ]
    },
    "links.Catalog_GetBeezUPColumnsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/beezupColumns",
            "method": "GET"
          }
        }
      ]
    },
    "links.CatalogIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs",
            "method": "GET"
          }
        }
      ]
    },
    "links.CatalogStoreIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3",
            "method": "GET"
          }
        }
      ]
    },
    "links.Auto_GetAutoImportConfigurationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/autoImport",
            "method": "GET"
          }
        }
      ]
    },
    "links.Auto_StartAutoImportLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/autoImport/start",
            "method": "POST"
          }
        }
      ]
    },
    "links.Auto_PauseAutoImportLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/autoImport/pause",
            "method": "POST"
          }
        }
      ]
    },
    "links.Auto_ResumeAutoImportLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/autoImport/resume",
            "method": "POST"
          }
        }
      ]
    },
    "links.Auto_ConfigureAutoImportIntervalLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/autoImport/scheduling/interval",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "configureAutoImportIntervalRequest"
              }
            }
          }
        }
      ]
    },
    "links.Auto_ScheduleAutoImportLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/autoImport/scheduling/schedules",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "scheduleAutoImportRequest"
              }
            }
          }
        }
      ]
    },
    "links.Catalog_GetCatalogColumnsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/catalogColumns",
            "method": "GET"
          }
        }
      ]
    },
    "links.Catalog_GetCustomColumnsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/customColumns",
            "method": "GET"
          }
        }
      ]
    },
    "links.Catalog_SaveCustomColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/customColumns/{columnId}",
            "method": "POST",
            "parameters": {
              "columnId": {
                "type": "string",
                "required": true,
                "in": "path"
              },
              "request": {
                "type": "object",
                "required": true,
                "in": "body",
                "schema": "createCustomColumnRequest"
              }
            }
          }
        }
      ]
    },
    "links.Catalog_DeleteCustomColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb",
            "method": "DELETE"
          }
        }
      ]
    },
    "links.Catalog_ChangeCustomColumnUserNameLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb/rename",
            "method": "POST",
            "parameters": {
              "request": {
                "type": "object",
                "required": true,
                "in": "body",
                "schema": "changeUserColumnNameRequest"
              }
            }
          }
        }
      ]
    },
    "links.Catalog_GetCustomColumnExpressionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb/expression",
            "method": "GET"
          }
        }
      ]
    },
    "links.Catalog_ChangeCustomColumnExpressionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb/expression",
            "method": "PUT",
            "parameters": {
              "request": {
                "type": "object",
                "required": true,
                "in": "body",
                "schema": "changeCustomColumnExpressionRequest"
              }
            }
          }
        }
      ]
    },
    "links.Catalog_GetCategoriesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/categories",
            "method": "GET"
          }
        }
      ]
    },
    "links.Catalog_GetProductsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/products/list",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "getProductsRequest"
              }
            }
          }
        }
      ]
    },
    "links.Catalog_GetRandomProductsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/products/random",
            "method": "GET"
          }
        }
      ]
    },
    "links.Importation_ConfigureCatalogColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/catalogColumns/b45c1999-e089-4bb1-a219-80a7a50a6f53",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "configureCatalogColumnCatalogRequest"
              }
            }
          }
        }
      ]
    },
    "links.Importation_IgnoreColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/catalogColumns/b45c1999-e089-4bb1-a219-80a7a50a6f53/ignore",
            "method": "POST"
          }
        }
      ]
    },
    "links.Importation_ReattendColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/catalogColumns/b45c1999-e089-4bb1-a219-80a7a50a6f53/reattend",
            "method": "POST"
          }
        }
      ]
    },
    "links.Importation_MapCatalogColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/catalogColumns/b45c1999-e089-4bb1-a219-80a7a50a6f53/map",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "mapBeezUPColumnRequest"
              }
            }
          }
        }
      ]
    },
    "links.Importation_UnmapCatalogColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/catalogColumns/b45c1999-e089-4bb1-a219-80a7a50a6f53/map",
            "method": "POST"
          }
        }
      ]
    },
    "links.Importation_GetImportationMonitoringLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c",
            "method": "GET"
          }
        }
      ]
    },
    "links.Importation_CancelLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/cancel",
            "method": "POST"
          }
        }
      ]
    },
    "links.Importation_ConfigureRemainingCatalogColumnsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/configureRemainingCatalogColumns",
            "method": "POST"
          }
        }
      ]
    },
    "links.Importation_CommitColumnsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/commitColumns",
            "method": "POST"
          }
        }
      ]
    },
    "links.Importation_CommitLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/commit",
            "method": "POST"
          }
        }
      ]
    },
    "links.Importation_TechnicalProgressionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/technicalProgression",
            "method": "GET"
          }
        }
      ]
    },
    "links.Importation_GetReportingsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations",
            "method": "GET"
          }
        }
      ]
    },
    "links.Importation_StartManualUpdateLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/start",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "startManualImportRequest"
              }
            }
          }
        }
      ]
    },
    "links.Importation_GetManualUpdateLastInputConfigLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/inputConfiguration",
            "method": "GET"
          }
        }
      ]
    },
    "links.Importation_GetDetectedCatalogColumnsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/catalogColumns",
            "method": "GET"
          }
        }
      ]
    },
    "links.Importation_GetCustomColumnsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/customColumns",
            "method": "GET"
          }
        }
      ]
    },
    "links.Importation_SaveCustomColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/customColumns/{columnId}",
            "method": "POST",
            "parameters": {
              "columnId": {
                "type": "string",
                "required": true,
                "in": "path"
              },
              "request": {
                "type": "object",
                "required": true,
                "in": "body",
                "schema": "createCustomColumnRequest"
              }
            }
          }
        }
      ]
    },
    "links.Importation_DeleteCustomColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb",
            "method": "DELETE"
          }
        }
      ]
    },
    "links.Importation_GetCustomColumnExpressionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb/expression",
            "method": "GET"
          }
        }
      ]
    },
    "links.Importation_MapCustomColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb/map",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "mapBeezUPColumnRequest"
              }
            }
          }
        }
      ]
    },
    "links.Importation_UnmapCustomColumnLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb/map",
            "method": "POST"
          }
        }
      ]
    },
    "links.Importation_GetProductSampleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/productSamples/{productSampleIndex}",
            "method": "GET",
            "parameters": {
              "productSampleIndex": {
                "in": "path",
                "required": true,
                "type": "integer"
              }
            }
          }
        }
      ]
    },
    "links.Importation_GetProductSampleCustomColumnValueLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c/productSamples/{productSampleIndex}/customColumns/5b56bb78-bc0b-485e-abd8-8db7eed995cb",
            "method": "GET",
            "parameters": {
              "productSampleIndex": {
                "in": "path",
                "required": true,
                "type": "integer"
              }
            }
          }
        }
      ]
    },
    "links.Importation_ActivateAutoImportLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/autoImport/activate",
            "method": "POST"
          }
        }
      ]
    },
    "catalogIndexLinks": {
      "type": "object",
      "required": [
        "self",
        "beezUPColumns"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.CatalogIndexLink"
        },
        "beezUPColumns": {
          "$ref": "#/definitions/links.Catalog_GetBeezUPColumnsLink"
        }
      }
    },
    "catalogIndexLOVLinks": {
      "type": "object",
      "required": [
        "beezUPColumnLov",
        "beezUPColumnDataTypeLov",
        "beezUPColumnImportanceLov",
        "beezUPColumnDisplayGroupLov",
        "duplicateProductValueStrategyLov",
        "compareOptionLov"
      ],
      "properties": {
        "beezUPColumnLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "beezUPColumnDataTypeLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "beezUPColumnImportanceLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "beezUPColumnDisplayGroupLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "duplicateProductValueStrategyLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "compareOptionLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        }
      }
    },
    "catalogIndex": {
      "type": "object",
      "required": [
        "links",
        "lovLinks"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/catalogIndexLinks"
        },
        "lovLinks": {
          "$ref": "#/definitions/catalogIndexLOVLinks"
        },
        "storeLinks": {
          "$ref": "#/definitions/catalogStoreIndexList"
        }
      }
    },
    "catalogStoreIndexList": {
      "type": "object",
      "properties": {
        "links": {
          "description": "The key is the store identifier.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/catalogStoreIndex"
          }
        }
      }
    },
    "catalogStoreIndexLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.CatalogStoreIndexLink"
        },
        "inputConfiguration": {
          "$ref": "#/definitions/links.Importation_GetManualUpdateLastInputConfigLink"
        },
        "autoImportInfo": {
          "$ref": "#/definitions/links.Auto_GetAutoImportConfigurationLink"
        },
        "importations": {
          "$ref": "#/definitions/links.Importation_GetReportingsLink"
        },
        "startImportation": {
          "$ref": "#/definitions/links.Importation_StartManualUpdateLink"
        },
        "catalogColumns": {
          "$ref": "#/definitions/links.Catalog_GetCatalogColumnsLink"
        },
        "customColumns": {
          "$ref": "#/definitions/links.Catalog_GetCustomColumnsLink"
        },
        "categories": {
          "$ref": "#/definitions/links.Catalog_GetCategoriesLink"
        },
        "products": {
          "$ref": "#/definitions/links.Catalog_GetProductsLink"
        },
        "randomProducts": {
          "$ref": "#/definitions/links.Catalog_GetRandomProductsLink"
        },
        "computeExpression": {
          "$ref": "#/definitions/links.Catalog_ComputeExpressionLink"
        }
      }
    },
    "catalogStoreStatus": {
      "description": "Indicates the status of the catalog store.\n* OK: If the latest importation is a success!\n* Failed: If the latest importation has failed !\n* Outdated: If the latest succeed importation is later than 1 day.\n",
      "type": "string",
      "enum": [
        "OK",
        "Failed",
        "Outdated"
      ],
      "example": "OK"
    },
    "catalogStoreIndex": {
      "type": "object",
      "required": [
        "links",
        "status"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/catalogStoreIndexLinks"
        },
        "status": {
          "$ref": "#/definitions/catalogStoreStatus"
        }
      }
    },
    "importationsResponseLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.Importation_GetReportingsLink"
        },
        "start": {
          "$ref": "#/definitions/links.Importation_StartManualUpdateLink"
        }
      }
    },
    "importationsResponse": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/importationsResponseLinks"
        },
        "importations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/importationReporting"
          }
        }
      }
    },
    "importAlreadyInProgressResponse": {
      "type": "object",
      "required": [
        "errors",
        "links"
      ],
      "properties": {
        "errors": {
          "description": "The error message list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.UserErrorMessage"
          }
        },
        "links": {
          "$ref": "#/definitions/importAlreadyInProgressResponseLinks"
        }
      }
    },
    "importAlreadyInProgressResponseLinks": {
      "description": "The action links",
      "type": "object",
      "required": [
        "currentImportation",
        "cancelCurrentImportation"
      ],
      "properties": {
        "currentImportation": {
          "$ref": "#/definitions/links.Importation_GetImportationMonitoringLink"
        },
        "cancelCurrentImportation": {
          "$ref": "#/definitions/links.Importation_CancelLink"
        }
      }
    },
    "schedulingType": {
      "description": "Indicate the scheduling type. Schedule or Interval. We recommand you to use interval for a better reporting.",
      "enum": [
        "Schedule",
        "Interval"
      ],
      "type": "string",
      "default": "Interval",
      "example": "Schedule"
    },
    "duplicateProductValueStrategy": {
      "description": "Indicate the duplicate product sku strategy.",
      "enum": [
        "None",
        "SkipAllDuplicateProducts",
        "KeepFirstDuplicateProductOnly",
        "FailImportationIfAnyDuplicateProduct"
      ],
      "type": "string",
      "default": "None",
      "example": "KeepFirstDuplicateProductOnly"
    },
    "compareOptions": {
      "description": "Indicate how the product sku are compared for the duplication check.",
      "enum": [
        "None",
        "IgnoreCase",
        "IgnoreNonSpace",
        "IgnoreSymbols",
        "OrdinalIgnoreCase",
        "StringSort",
        "Ordinal"
      ],
      "type": "string",
      "default": "None",
      "example": "IgnoreCase"
    },
    "autoImportConfigurationLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.Auto_GetAutoImportConfigurationLink"
        },
        "activate": {
          "$ref": "#/definitions/links.Importation_ActivateAutoImportLink"
        },
        "start": {
          "$ref": "#/definitions/links.Auto_StartAutoImportLink"
        },
        "pause": {
          "$ref": "#/definitions/links.Auto_PauseAutoImportLink"
        },
        "resume": {
          "$ref": "#/definitions/links.Auto_ResumeAutoImportLink"
        },
        "scheduleInterval": {
          "$ref": "#/definitions/links.Auto_ConfigureAutoImportIntervalLink"
        },
        "schedule": {
          "$ref": "#/definitions/links.Auto_ScheduleAutoImportLink"
        }
      }
    },
    "autoImportConfiguration": {
      "type": "object",
      "required": [
        "input",
        "inputConfiguredByUserId",
        "schedulingType",
        "schedulingValue",
        "paused",
        "duplicateProductConfiguration"
      ],
      "properties": {
        "input": {
          "$ref": "#/definitions/inputConfiguration"
        },
        "inputConfiguredByUserId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "schedulingType": {
          "$ref": "#/definitions/schedulingType"
        },
        "scheduledByUserId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "schedulingValue": {
          "description": "Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "example": [
            "21:00:00",
            "23:00:00",
            "08:30:00"
          ]
        },
        "paused": {
          "description": "Indicate if the auto import is in pause or not.",
          "type": "boolean",
          "default": false,
          "example": false
        },
        "pauseStatusChangedByUserId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "pauseStatusChangedUtcDate": {
          "format": "date-time",
          "description": "Indicate when the pause status has changed in UTC date.",
          "type": "string",
          "example": "2017-04-01T13:21:42Z"
        },
        "duplicateProductConfiguration": {
          "$ref": "#/definitions/duplicateProductValueConfiguration"
        },
        "schedulingLocalTimeZoneName": {
          "description": "Indicate the time zone name of the scheduling. If the scheduling type is \"Schedule\"",
          "type": "string",
          "default": "Romance Standard Time",
          "example": "Romance Standard Time"
        }
      }
    },
    "inputConfiguration": {
      "description": "Describe the input configuration",
      "required": [
        "files"
      ],
      "type": "object",
      "properties": {
        "transformFileUrl": {
          "description": "Can be null. Use to transform multiple files with an XSLT file.",
          "type": "string",
          "format": "uri",
          "example": "http://beezupblob.com/Mytransformation.xslt"
        },
        "files": {
          "description": "The list of files to get and read",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/inputFileConfiguration"
          }
        }
      }
    },
    "inputFileConfiguration": {
      "description": "Describe how to get and read a file",
      "required": [
        "fileNumber",
        "fetch",
        "read"
      ],
      "type": "object",
      "properties": {
        "fileNumber": {
          "format": "int32",
          "description": "The file number starting by 1",
          "type": "integer",
          "minimum": 1,
          "example": 1
        },
        "fetch": {
          "$ref": "#/definitions/inputFileFetchConfiguration"
        },
        "read": {
          "$ref": "#/definitions/inputFileReadConfiguration"
        }
      }
    },
    "downloadCatalogStrategy": {
      "description": "Indicate the download strategy (simple uri, ftps, ftplatest file, etc...)",
      "enum": [
        "SimpleUri",
        "FtpLatest",
        "Sftp",
        "SftpLatest",
        "Ftps",
        "FtpsLatest",
        "Local"
      ],
      "type": "string",
      "example": "SimpleUri"
    },
    "compressionFormatStrategy": {
      "description": "Indicate the compression type",
      "enum": [
        "None",
        "Zip",
        "TarGz",
        "Gzip",
        "Bzip2",
        "Rar"
      ],
      "type": "string",
      "example": "None"
    },
    "inputFileFetchConfiguration": {
      "description": "Describe the way to download the file",
      "required": [
        "uri",
        "downloadCatalogStrategy"
      ],
      "type": "object",
      "properties": {
        "uri": {
          "description": "Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)",
          "type": "string",
          "example": "http://www.mywebsite.com/mycatalog.csv"
        },
        "credential": {
          "$ref": "#/definitions/credential"
        },
        "downloadCatalogStrategy": {
          "$ref": "#/definitions/downloadCatalogStrategy"
        },
        "compressionFormatStrategy": {
          "$ref": "#/definitions/compressionFormatStrategy"
        },
        "compressedRelativePath": {
          "description": "Indicate the relative path in the compressed file",
          "type": "string",
          "example": "folder/file.xxx"
        },
        "downloadTimeout": {
          "description": "Indicate the download time out in second",
          "type": "integer",
          "format": "int32",
          "default": 30,
          "example": 360
        }
      }
    },
    "fileFormatStrategy": {
      "description": "CSV or XML",
      "enum": [
        "Unknown",
        "Csv",
        "Xml",
        "Json"
      ],
      "type": "string",
      "example": "Csv"
    },
    "inputFileReadConfiguration": {
      "description": "Describe how to read the file. If FileFormatStrategy is CSV, csvFileReadProperties is required. Otherwise the xmlFileReadProperties is required.\n",
      "required": [
        "format"
      ],
      "type": "object",
      "properties": {
        "format": {
          "$ref": "#/definitions/fileFormatStrategy"
        },
        "encodingTypeName": {
          "description": "The encoding type. UTF-8 by default.",
          "type": "string",
          "example": "UTF-8",
          "default": "UTF-8"
        },
        "cultureName": {
          "description": "The culture name of the file.  (i.e. fr-FR). If null then Invariant culture will be used.",
          "type": "string",
          "example": "fr-FR",
          "default": ""
        },
        "csvFileReadProperties": {
          "$ref": "#/definitions/inputFileReadCsvConfiguration"
        },
        "xmlFileReadProperties": {
          "$ref": "#/definitions/inputFileReadXmlConfiguration"
        }
      }
    },
    "credential": {
      "description": "Provides the credentials",
      "required": [
        "userName"
      ],
      "type": "object",
      "properties": {
        "userName": {
          "description": "The user name",
          "type": "string",
          "example": "MyLogin"
        },
        "password": {
          "description": "The password",
          "type": "string",
          "example": "MyPassword",
          "format": "password"
        }
      }
    },
    "inputFileReadCsvConfiguration": {
      "description": "The CSV file description",
      "required": [
        "hasHeaderRecord",
        "ignoreHeaderRecord",
        "csvSeparator"
      ],
      "type": "object",
      "properties": {
        "hasHeaderRecord": {
          "description": "Indicate if the csv file contains the column name at the first row",
          "type": "boolean",
          "default": true,
          "example": true
        },
        "ignoreHeaderRecord": {
          "description": "Indicate if the importation should not use the csv column name from the file",
          "type": "boolean",
          "default": false,
          "example": true
        },
        "csvSeparator": {
          "description": "Indicate the separator of the values in the CSV file. Generally \";\"",
          "type": "string",
          "default": ";",
          "example": ";"
        },
        "csvTextQualifier": {
          "description": "Indicate the text qualifier of the CSV file. Generally the value is \"",
          "type": "string",
          "default": "\"",
          "example": "\""
        }
      }
    },
    "inputFileReadXmlConfiguration": {
      "description": "The XML file description",
      "type": "object",
      "required": [
        "useXmlAttributes",
        "flattenXmlChildElements"
      ],
      "properties": {
        "useXmlAttributes": {
          "description": "Indicate if the importation should take in account the attribute in the xml nodes.",
          "type": "boolean",
          "example": true
        },
        "flattenXmlChildElements": {
          "description": "Indicate if the children xml nodes should be flatten with there parent to take in account the sub node values.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "configureAutoImportIntervalRequest": {
      "description": "The message request to configure the auto import interval",
      "required": [
        "interval"
      ],
      "type": "object",
      "properties": {
        "interval": {
          "description": "Indicate the interval in time span. (i.e. \"04:00:00\" for every 4 hours)",
          "type": "string",
          "pattern": "(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])",
          "example": "04:00:00"
        }
      }
    },
    "scheduleAutoImportRequest": {
      "description": "The message request to schedule the auto import",
      "required": [
        "schedules"
      ],
      "type": "object",
      "properties": {
        "schedules": {
          "description": "Indicate the time span you want to import your catalog. (i.e. \"21:00:00\" to import your catalog at 9PM)",
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "pattern": "(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])"
          },
          "example": [
            "21:00:00",
            "23:00:00",
            "08:30:00"
          ]
        },
        "localTimeZoneName": {
          "description": "If null the local time zone name will be \"Romance Standard Time\"",
          "type": "string",
          "default": "Romance Standard Time",
          "example": "Romance Standard Time"
        }
      }
    },
    "lastManualImportInputConfiguration": {
      "description": "Last manual import input configuration",
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "$ref": "#/definitions/inputConfiguration"
        }
      }
    },
    "displayGroupName": {
      "description": "Indicate the display group name where the column must be putted",
      "type": "string",
      "example": "Category"
    },
    "canBeTruncated": {
      "description": "If the size of the value is greater than the limit we can truncate the value instead of failing...",
      "type": "boolean",
      "default": false,
      "example": false
    },
    "userColumName": {
      "description": "Column named by the user",
      "type": "string",
      "example": "My SKU"
    },
    "beezUPColumnConfiguration": {
      "description": "Describe a BeezUP column",
      "required": [
        "beezUPColumnName",
        "columnImportance",
        "displayGroupName"
      ],
      "type": "object",
      "properties": {
        "beezUPColumnName": {
          "$ref": "#/definitions/BeezUP.Common.BeezUPColumnName"
        },
        "unique": {
          "description": "/!\\ ONLY AVAILABLE ON CATALOG COLUMN NOT ON CUSTOM COLUMNS!!\r\nIf true, an error happen at the second occurence of the same value for this column\r\nThis information will be used during the importation process and later for mapping proposal",
          "type": "boolean",
          "example": false,
          "default": false
        },
        "columnImportance": {
          "$ref": "#/definitions/BeezUP.Common.ColumnImportance"
        },
        "columnDataType": {
          "$ref": "#/definitions/BeezUP.Common.ColumnDataType"
        },
        "canBeTruncated": {
          "$ref": "#/definitions/canBeTruncated"
        },
        "displayGroupName": {
          "$ref": "#/definitions/displayGroupName"
        },
        "description": {
          "type": "string",
          "description": "Describe the BeezUP column",
          "example": "Use for big text, like description"
        }
      }
    },
    "changeUserColumnNameRequest": {
      "description": "The message request for the change user column name",
      "required": [
        "userColumName"
      ],
      "type": "object",
      "properties": {
        "userColumName": {
          "$ref": "#/definitions/userColumName"
        }
      }
    },
    "encryptedExpression": {
      "description": "The encrypted excel expression of the column",
      "type": "string",
      "example": "uziushdczaniodnndonisodndsiondsoidsndoin"
    },
    "encryptedBlocklyExpression": {
      "description": "The encrypted XML Blockly representation of the expression",
      "type": "string",
      "example": "apokpoa,opz,sixsoisiosnoisn"
    },
    "createCustomColumnRequest": {
      "description": "The request message to create a custom column",
      "required": [
        "userColumnName",
        "encryptedExpression",
        "encryptedBlocklyExpression",
        "displayGroupName"
      ],
      "type": "object",
      "properties": {
        "userColumnName": {
          "$ref": "#/definitions/userColumName"
        },
        "encryptedExpression": {
          "$ref": "#/definitions/encryptedExpression"
        },
        "encryptedBlocklyExpression": {
          "$ref": "#/definitions/encryptedBlocklyExpression"
        },
        "displayGroupName": {
          "$ref": "#/definitions/displayGroupName"
        }
      }
    },
    "changeCustomColumnExpressionRequest": {
      "description": "The request message to change the custom column expression",
      "required": [
        "encryptedExpression",
        "encryptedBlocklyExpression"
      ],
      "type": "object",
      "properties": {
        "encryptedExpression": {
          "$ref": "#/definitions/encryptedExpression"
        },
        "encryptedBlocklyExpression": {
          "$ref": "#/definitions/encryptedBlocklyExpression"
        }
      }
    },
    "computeExpressionRequest": {
      "description": "The request message to compute an expression based on the provided product values",
      "required": [
        "productValues",
        "encryptedExpression"
      ],
      "type": "object",
      "properties": {
        "productValues": {
          "$ref": "#/definitions/productValues"
        },
        "encryptedExpression": {
          "$ref": "#/definitions/encryptedExpression"
        }
      }
    },
    "executionId": {
      "description": "The execution identifier of the catalog importation",
      "format": "guid",
      "type": "string",
      "example": "bf3bc288-604c-4267-925e-66b1a15dca75"
    },
    "importationMonitoring": {
      "description": "Describe the reporting of the catalog importation",
      "type": "object",
      "required": [
        "success",
        "executionId",
        "lastUpdateUtcDate",
        "beginUtcDate",
        "steps"
      ],
      "properties": {
        "userId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "success": {
          "description": "Indicates if the importation was successfully completed or not",
          "type": "boolean",
          "example": true
        },
        "executionId": {
          "$ref": "#/definitions/executionId"
        },
        "lastUpdateUtcDate": {
          "description": "The last update of the reporting",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:09Z"
        },
        "beginUtcDate": {
          "description": "The start date of the importation",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:01:01Z"
        },
        "errors": {
          "description": "In case of error a description will be indicated",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.UserErrorMessage"
          }
        },
        "steps": {
          "description": "Contains all steps of the importation process with a boolean. If true the step has been passed, false the step is not complete",
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "example": {
            "isCatalogImportPrepareReadCompleted": false,
            "isCatalogImportComputeDiffCompleted": false,
            "isCatalogUpdateCompleted": false,
            "isSavedInDb": false
          }
        },
        "links": {
          "$ref": "#/definitions/importationMonitoringLinks"
        }
      }
    },
    "importationMonitoringLinks": {
      "description": "Applicable operations considering the state of the importation",
      "type": "object",
      "required": [
        "self",
        "technicalProgression"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.Importation_GetImportationMonitoringLink"
        },
        "technicalProgression": {
          "$ref": "#/definitions/links.Importation_TechnicalProgressionLink"
        },
        "cancel": {
          "$ref": "#/definitions/links.Importation_CancelLink"
        },
        "configureRemainingCatalogColumns": {
          "$ref": "#/definitions/links.Importation_ConfigureRemainingCatalogColumnsLink"
        },
        "commitColumns": {
          "$ref": "#/definitions/links.Importation_CommitColumnsLink"
        },
        "commit": {
          "$ref": "#/definitions/links.Importation_CommitLink"
        },
        "activateAutoImport": {
          "$ref": "#/definitions/links.Importation_ActivateAutoImportLink"
        },
        "catalogColumns": {
          "$ref": "#/definitions/links.Importation_GetDetectedCatalogColumnsLink"
        },
        "customColumns": {
          "$ref": "#/definitions/links.Importation_GetCustomColumnsLink"
        },
        "productSamples": {
          "$ref": "#/definitions/links.Importation_GetProductSampleLink"
        }
      }
    },
    "catalogColumnName": {
      "description": "The catalog column name",
      "type": "string",
      "example": "SKU"
    },
    "columnId": {
      "description": "The catalog column identifier",
      "type": "string",
      "format": "guid",
      "example": "8f6671d6-a9bc-4de0-a0c4-4643b0c3f871"
    },
    "detectedCatalogColumnListLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.Importation_GetDetectedCatalogColumnsLink"
        }
      }
    },
    "detectedCatalogColumnList": {
      "description": "The list of detected catalog column",
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/detectedCatalogColumnListLinks"
        },
        "detectedCatalogColumns": {
          "description": "Contains all deteted catalog columns",
          "type": "array",
          "items": {
            "$ref": "#/definitions/detectedCatalogColumn"
          }
        }
      }
    },
    "detectedCatalogColumnLinks": {
      "type": "object",
      "properties": {
        "configure": {
          "$ref": "#/definitions/links.Importation_ConfigureCatalogColumnLink"
        },
        "ignore": {
          "$ref": "#/definitions/links.Importation_IgnoreColumnLink"
        },
        "reattend": {
          "$ref": "#/definitions/links.Importation_ReattendColumnLink"
        },
        "map": {
          "$ref": "#/definitions/links.Importation_MapCatalogColumnLink"
        },
        "unmap": {
          "$ref": "#/definitions/links.Importation_UnmapCatalogColumnLink"
        }
      }
    },
    "detectedCatalogColumn": {
      "allOf": [
        {
          "$ref": "#/definitions/catalogColumn"
        },
        {
          "type": "object",
          "description": "The catalog column detected during the first parsing step",
          "required": [
            "id",
            "catalogColumnName",
            "links"
          ],
          "properties": {
            "links": {
              "$ref": "#/definitions/detectedCatalogColumnLinks"
            }
          }
        }
      ]
    },
    "productValues": {
      "description": "The key is the column identifier",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "68082b11-4ffd-4bec-964a-465a471c7d37": "SKU1234",
        "b6d74510-41ce-42ec-947a-0bdf62e9beee": "Refrigerateur",
        "012929c0-e78b-462a-a96e-25c061575385": "http://media.conforama.fr/Medias/500000/80000/5000/500/10/G_585511_A.jpg",
        "ba270fa0-8482-46be-905a-cae4ca746b92": "http://www.conforama.fr/gros-electromenager/encastrable/refrigerateur-encastrable/refrigerateur-combine-161-litres-far-r5115s/p/585511",
        "46602e10-bc45-4944-a440-63d5f7ece1f8": "42"
      }
    },
    "productSample": {
      "description": "Describe a product sample",
      "type": "object",
      "properties": {
        "productValues": {
          "$ref": "#/definitions/productValues"
        }
      }
    },
    "configureCatalogColumnCatalogRequest": {
      "description": "The request to configure a catalog column",
      "required": [
        "catalogColumn"
      ],
      "type": "object",
      "properties": {
        "catalogColumn": {
          "$ref": "#/definitions/catalogColumn"
        }
      }
    },
    "catalogColumnList": {
      "type": "object",
      "required": [
        "catalogColumns"
      ],
      "properties": {
        "catalogColumns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/catalogColumn"
          }
        }
      }
    },
    "customColumnListLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.Catalog_GetCustomColumnsLink"
        },
        "add": {
          "$ref": "#/definitions/links.Catalog_SaveCustomColumnLink"
        }
      }
    },
    "customColumnList": {
      "type": "object",
      "required": [
        "links",
        "customColumns"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/customColumnListLinks"
        },
        "customColumns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/customColumn"
          }
        }
      }
    },
    "importationCustomColumnListLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.Importation_GetCustomColumnsLink"
        },
        "add": {
          "$ref": "#/definitions/links.Importation_SaveCustomColumnLink"
        }
      }
    },
    "importationCustomColumnList": {
      "type": "object",
      "required": [
        "links",
        "customColumns"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/customColumnListLinks"
        },
        "customColumns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/importationCustomColumn"
          }
        }
      }
    },
    "catalogColumnLinks": {
      "type": "object",
      "properties": {
        "rename": {
          "$ref": "#/definitions/links.Catalog_ChangeCatalogColumnUserNameLink"
        }
      }
    },
    "catalogColumn": {
      "description": "The catalog column configuration",
      "required": [
        "id",
        "catalogColumnName",
        "userColumName",
        "configuration",
        "links"
      ],
      "type": "object",
      "properties": {
        "ignored": {
          "description": "IF true, the product values of this column will be not taken in account during the importation process",
          "type": "boolean",
          "default": false
        },
        "duplicateProductValueConfiguration": {
          "$ref": "#/definitions/duplicateProductValueConfiguration"
        },
        "id": {
          "$ref": "#/definitions/columnId"
        },
        "catalogColumnName": {
          "$ref": "#/definitions/catalogColumnName"
        },
        "userColumName": {
          "$ref": "#/definitions/userColumName"
        },
        "configuration": {
          "$ref": "#/definitions/columnConfiguration"
        },
        "links": {
          "$ref": "#/definitions/catalogColumnLinks"
        }
      },
      "example": {
        "ignored": true,
        "duplicateProductValueConfiguration": {
          "strategy": "KeepFirstDuplicateProductOnly",
          "compareOptions": "IgnoreCase"
        },
        "id": "8a76f06a-fefc-4c0d-bcfe-b210f1482977",
        "catalogColumnName": "SKU",
        "userColumName": "My SKU",
        "configuration": {
          "beezUPColumnName": "CategoryFirstLevel",
          "columnImportance": "Required",
          "columnDataType": "String",
          "columnCultureName": "fr-FR",
          "columnFormat": "MM/dd/yyyy",
          "canBeTruncated": false,
          "displayGroupName": "Category"
        }
      }
    },
    "duplicateProductValueConfiguration": {
      "description": "Describe how you want to manage the duplication of the product value",
      "required": [
        "strategy",
        "compareOptions"
      ],
      "type": "object",
      "properties": {
        "strategy": {
          "$ref": "#/definitions/duplicateProductValueStrategy"
        },
        "compareOptions": {
          "$ref": "#/definitions/compareOptions"
        }
      }
    },
    "columnConfiguration": {
      "description": "Indicates the configuration applied on the column (catalog or custom) during the importation process.",
      "type": "object",
      "required": [
        "columnImportance",
        "columnDataType"
      ],
      "properties": {
        "beezUPColumnName": {
          "$ref": "#/definitions/BeezUP.Common.BeezUPColumnName"
        },
        "columnImportance": {
          "$ref": "#/definitions/BeezUP.Common.ColumnImportance"
        },
        "columnDataType": {
          "$ref": "#/definitions/BeezUP.Common.ColumnDataType"
        },
        "columnCultureName": {
          "$ref": "#/definitions/columnCultureName"
        },
        "columnFormat": {
          "$ref": "#/definitions/columnFormat"
        },
        "canBeTruncated": {
          "$ref": "#/definitions/canBeTruncated"
        },
        "displayGroupName": {
          "$ref": "#/definitions/displayGroupName"
        }
      }
    },
    "columnCultureName": {
      "description": "If non null, culture used to parse the value to the storage type of this column\\r\\n will be used for parsing and for consolidation proces",
      "type": "string",
      "example": "fr-FR"
    },
    "columnFormat": {
      "description": "If non null, format used to parse the value to the storage type of this column\\r\\n will be used for parsing and for consolidation proces",
      "type": "string",
      "example": "MM/dd/yyyy"
    },
    "mapBeezUPColumnRequest": {
      "required": [
        "beezUPColumnName"
      ],
      "type": "object",
      "properties": {
        "beezUPColumnName": {
          "$ref": "#/definitions/BeezUP.Common.BeezUPColumnName"
        }
      }
    },
    "importationReporting": {
      "description": "The catalog importation reporting",
      "type": "object",
      "required": [
        "beginUtcDate",
        "lastUpdateUtcDate",
        "steps"
      ],
      "properties": {
        "stepName": {
          "description": "The last step name of the importation process",
          "type": "string",
          "example": "IsSaveInDb"
        },
        "userId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "success": {
          "description": "Indicate if the importation succeed or not.",
          "type": "boolean",
          "example": true
        },
        "totalProductCount": {
          "format": "int32",
          "description": "Indicate the total product count detected in the catalog during the importation.",
          "type": "integer",
          "example": 101
        },
        "totalProductErrorCount": {
          "format": "int32",
          "description": "Indicate the total product count in error detected in the catalog during the importation.",
          "type": "integer",
          "example": 0
        },
        "totalProductSuccessCount": {
          "format": "int32",
          "description": "Indicate the total product count in success in the catalog during the importation.",
          "type": "integer",
          "example": 101
        },
        "errors": {
          "description": "Indicate the error message list related to this importation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.UserErrorMessage"
          }
        },
        "lastUpdateUtcDate": {
          "format": "date-time",
          "description": "Indicate the last update UTC date of the reporting.",
          "type": "string",
          "example": "2017-04-01T13:10:09Z"
        },
        "autoImported": {
          "description": "Indicate if this importation is an auto import or not.",
          "type": "boolean",
          "example": true
        },
        "beginUtcDate": {
          "format": "date-time",
          "description": "Indicate the begin UTC date of this importation.",
          "type": "string",
          "example": "2017-04-01T13:01:01Z"
        },
        "endUtcDate": {
          "format": "date-time",
          "description": "Indicate the end UTC date of this importation.",
          "type": "string",
          "example": "2017-04-01T13:10:09Z"
        },
        "inputConfigurationUrl": {
          "description": "Indicate the input url of this importation.",
          "type": "string",
          "format": "uri",
          "example": "http://blal.com/catalog.csv"
        },
        "steps": {
          "description": "Indicate the steps that have been passed during the importation process",
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "example": {
            "isCatalogImportPrepareReadCompleted": false,
            "isCatalogImportComputeDiffCompleted": false,
            "isCatalogUpdateCompleted": false,
            "isSavedInDb": false
          }
        }
      }
    },
    "startManualImportRequest": {
      "description": "The message request start a manual importation process.  Indicate the way to handle duplicate product. Can be null if you want to reuse the configuration of the previous importation succeed.",
      "required": [
        "input"
      ],
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/inputConfiguration"
        },
        "duplicateProductSkuConfiguration": {
          "$ref": "#/definitions/duplicateProductValueConfiguration"
        }
      }
    },
    "importationTechnicalProgression": {
      "type": "object",
      "properties": {
        "stepsProgression": {
          "description": "Indicate for each step of the importation the uris to look at",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "changeCustomColumnRequest": {
      "description": "The message request to change a custom column expression an user name",
      "required": [
        "encryptedExpression",
        "encryptedBlocklyExpression",
        "userColumName"
      ],
      "type": "object",
      "properties": {
        "encryptedExpression": {
          "$ref": "#/definitions/encryptedExpression"
        },
        "encryptedBlocklyExpression": {
          "$ref": "#/definitions/encryptedBlocklyExpression"
        },
        "userColumName": {
          "$ref": "#/definitions/userColumName"
        }
      }
    },
    "customColumnLinks": {
      "type": "object",
      "required": [
        "save",
        "delete",
        "rename",
        "expression",
        "saveExpression"
      ],
      "properties": {
        "save": {
          "$ref": "#/definitions/links.Catalog_SaveCustomColumnLink"
        },
        "delete": {
          "$ref": "#/definitions/links.Catalog_DeleteCustomColumnLink"
        },
        "rename": {
          "$ref": "#/definitions/links.Catalog_ChangeCustomColumnUserNameLink"
        },
        "expression": {
          "$ref": "#/definitions/links.Catalog_GetCustomColumnExpressionLink"
        },
        "saveExpression": {
          "$ref": "#/definitions/links.Catalog_ChangeCustomColumnExpressionLink"
        }
      }
    },
    "customColumn": {
      "description": "The custom column configuration",
      "required": [
        "id",
        "userColumName",
        "configuration",
        "links"
      ],
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/columnId"
        },
        "userColumName": {
          "$ref": "#/definitions/userColumName"
        },
        "configuration": {
          "$ref": "#/definitions/columnConfiguration"
        },
        "links": {
          "$ref": "#/definitions/customColumnLinks"
        }
      }
    },
    "importationCustomColumnLinks": {
      "type": "object",
      "required": [
        "save",
        "delete",
        "expression"
      ],
      "properties": {
        "save": {
          "$ref": "#/definitions/links.Importation_SaveCustomColumnLink"
        },
        "delete": {
          "$ref": "#/definitions/links.Catalog_DeleteCustomColumnLink"
        },
        "expression": {
          "$ref": "#/definitions/links.Catalog_GetCustomColumnExpressionLink"
        },
        "map": {
          "$ref": "#/definitions/links.Importation_MapCustomColumnLink"
        },
        "unmap": {
          "$ref": "#/definitions/links.Importation_UnmapCustomColumnLink"
        },
        "productSampleValue": {
          "$ref": "#/definitions/links.Importation_GetProductSampleCustomColumnValueLink"
        }
      }
    },
    "importationCustomColumn": {
      "description": "The custom column configuration",
      "required": [
        "id",
        "userColumName",
        "configuration",
        "links"
      ],
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/columnId"
        },
        "userColumName": {
          "$ref": "#/definitions/userColumName"
        },
        "configuration": {
          "$ref": "#/definitions/columnConfiguration"
        },
        "links": {
          "$ref": "#/definitions/importationCustomColumnLinks"
        }
      }
    },
    "randomProductList": {
      "type": "object",
      "required": [
        "products"
      ],
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product"
          }
        }
      }
    },
    "productList": {
      "type": "object",
      "required": [
        "paginationResult",
        "products"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product"
          }
        }
      }
    },
    "product": {
      "description": "Represent a catalog product",
      "required": [
        "productId",
        "categoryId",
        "values",
        "exists"
      ],
      "properties": {
        "productId": {
          "$ref": "#/definitions/BeezUP.Common.ProductId"
        },
        "categoryId": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryId"
        },
        "values": {
          "$ref": "#/definitions/productValues"
        },
        "exists": {
          "type": "boolean",
          "description": "Indicates if the product exists in the current catalog",
          "example": true
        }
      }
    },
    "getProductsRequest": {
      "type": "object",
      "description": "The request message to get products based on these filters",
      "required": [
        "pageNumber",
        "pageSize",
        "columnIdList"
      ],
      "properties": {
        "pageNumber": {
          "$ref": "#/definitions/BeezUP.Common.PageNumber"
        },
        "pageSize": {
          "$ref": "#/definitions/BeezUP.Common.PageSize"
        },
        "columnIdList": {
          "type": "array",
          "minItems": 1,
          "maxItems": 5,
          "items": {
            "$ref": "#/definitions/BeezUP.Common.CatalogColumnId"
          }
        },
        "exists": {
          "type": "boolean",
          "description": "Search for existing products or not. If null you will received both.",
          "example": true
        },
        "productIdList": {
          "type": "array",
          "description": "Filter with a list of product identifier",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.ProductId"
          }
        },
        "sku": {
          "description": "Search for products containing this SKU (merchant product dentifier).",
          "type": "string",
          "example": "MySku123"
        },
        "title": {
          "description": "Search for products containing this title",
          "type": "string",
          "example": "Frigo"
        },
        "categoryPath": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryPath"
        }
      }
    },
    "categoryList": {
      "description": "The object which contains the category list",
      "type": "object",
      "required": [
        "categories"
      ],
      "properties": {
        "categories": {
          "description": "The category list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/category"
          }
        }
      }
    },
    "category": {
      "description": "The catalog category",
      "required": [
        "categoryId",
        "categoryPath",
        "productCount"
      ],
      "properties": {
        "categoryId": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryId"
        },
        "categoryPath": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryPath"
        },
        "productCount": {
          "type": "integer",
          "format": "int32",
          "description": "The product count related to this category",
          "example": 101
        }
      }
    },
    "channelHeader": {
      "description": "The available channel",
      "type": "object",
      "required": [
        "channelId",
        "channelName",
        "channelLogoUrl",
        "descriptionAvailable",
        "links",
        "isMarketplace"
      ],
      "properties": {
        "channelId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelId"
        },
        "channelName": {
          "$ref": "#/definitions/BeezUP.Common.ChannelName"
        },
        "channelLogoUrl": {
          "$ref": "#/definitions/BeezUP.Common.HttpUrl"
        },
        "descriptionAvailable": {
          "type": "boolean",
          "description": "Indicates if we have more detailed information about this channel",
          "default": false,
          "example": true
        },
        "isMarketplace": {
          "type": "boolean",
          "description": "Indicates if the channel is a marketplace",
          "default": false,
          "example": true
        },
        "links": {
          "$ref": "#/definitions/channelHeaderLinks"
        }
      }
    },
    "channelHeaderLinks": {
      "description": "The links related to an available channel",
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        }
      }
    },
    "channelCategoryDefaultCost": {
      "description": "The default cost on this channel category",
      "type": "number",
      "format": "decimal",
      "example": 10.42
    },
    "channelCategoryChannelCode": {
      "description": "The channel category channel code identifier",
      "type": "string",
      "example": "1342"
    },
    "channelCategoryLevel": {
      "type": "integer",
      "format": "int32",
      "minimum": 1,
      "maximum": 9,
      "description": "The channel category level starting from 1",
      "example": 3
    },
    "channelRootCategory": {
      "description": "Get channel first level category list",
      "type": "object",
      "required": [
        "firstLevelCategories"
      ],
      "properties": {
        "firstLevelCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelFirstLevelCategory"
          }
        }
      }
    },
    "channelFirstLevelCategory": {
      "description": "The first level category with his sub categories",
      "type": "object",
      "required": [
        "channelCategoryId",
        "channelCategoryName",
        "channelCategoryLevel"
      ],
      "properties": {
        "channelCategoryId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelCategoryId"
        },
        "channelCategoryName": {
          "type": "string",
          "description": "The channel category name",
          "example": "Clothing"
        },
        "channelCategoryLevel": {
          "$ref": "#/definitions/channelCategoryLevel"
        },
        "channelCategoryDefaultCost": {
          "$ref": "#/definitions/channelCategoryDefaultCost"
        },
        "channelCategoryChannelCode": {
          "$ref": "#/definitions/channelCategoryChannelCode"
        },
        "channelCategoryColumnOverrides": {
          "$ref": "#/definitions/channelCategoryColumnOverrides"
        },
        "subCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelCategory"
          }
        }
      }
    },
    "channelCategory": {
      "description": "The channel category",
      "type": "object",
      "required": [
        "channelCategoryId",
        "channelCategoryPath",
        "channelCategoryLevel"
      ],
      "properties": {
        "channelCategoryId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelCategoryId"
        },
        "channelCategoryPath": {
          "$ref": "#/definitions/BeezUP.Common.ChannelCategoryPath"
        },
        "channelCategoryLevel": {
          "$ref": "#/definitions/channelCategoryLevel"
        },
        "channelCategoryDefaultCost": {
          "$ref": "#/definitions/channelCategoryDefaultCost"
        },
        "channelCategoryChannelCode": {
          "$ref": "#/definitions/channelCategoryChannelCode"
        },
        "channelCategoryColumnOverrides": {
          "$ref": "#/definitions/channelCategoryColumnOverrides"
        }
      }
    },
    "channelCategoryColumnOverrides": {
      "description": "The channel category column overrides",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/channelCategoryColumnOverride"
      }
    },
    "channelCategoryColumnOverride": {
      "type": "object",
      "required": [
        "channelColumnId",
        "channelColumnName",
        "showInMapping",
        "configuration"
      ],
      "properties": {
        "channelColumnId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelColumnId"
        },
        "channelColumnName": {
          "$ref": "#/definitions/BeezUP.Common.ChannelColumnName"
        },
        "channelColumnDescription": {
          "$ref": "#/definitions/channelColumnDescription"
        },
        "showInMapping": {
          "$ref": "#/definitions/channelColumnShowInMapping"
        },
        "configuration": {
          "$ref": "#/definitions/channelColumnConfiguration"
        },
        "restrictedValues": {
          "$ref": "#/definitions/channelColumnRestrictedValues"
        }
      }
    },
    "channelColumnDescription": {
      "type": "string",
      "description": "The channel column description",
      "example": "Please enter the base prices (price per unit) according to <a href=\"http://www.gesetze-im-internet.de/pangv/__2.html\">Article PAngV</a>"
    },
    "channelColumnShowInMapping": {
      "type": "boolean",
      "description": "Indicates if this column must shown in the mapping page or not",
      "example": true
    },
    "channelColumn": {
      "description": "The channel column",
      "type": "object",
      "required": [
        "channelColumnId",
        "channelColumnName",
        "showInMapping",
        "position",
        "configuration"
      ],
      "properties": {
        "channelColumnId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelColumnId"
        },
        "channelColumnName": {
          "$ref": "#/definitions/BeezUP.Common.ChannelColumnName"
        },
        "channelColumnDescription": {
          "$ref": "#/definitions/channelColumnDescription"
        },
        "showInMapping": {
          "$ref": "#/definitions/channelColumnShowInMapping"
        },
        "position": {
          "type": "integer",
          "description": "The position of the column starting from 1",
          "example": 1
        },
        "configuration": {
          "$ref": "#/definitions/channelColumnConfiguration"
        },
        "restrictedValues": {
          "$ref": "#/definitions/channelColumnRestrictedValues"
        }
      }
    },
    "channelColumnRestrictedValues": {
      "type": "object",
      "description": "The restricted values. The key will be the restricted value identifier (format:guid) and the value will be the restriced value\n",
      "additionalProperties": {
        "type": "string"
      }
    },
    "channelColumnConfiguration": {
      "description": "The channel column configuration. The BeezUP Column Name is optional. If the BeezUP column is mapped we will indicate the data type and column importance of the BeezUP column.",
      "type": "object",
      "required": [
        "columnImportance",
        "columnDataType"
      ],
      "properties": {
        "columnImportance": {
          "$ref": "#/definitions/BeezUP.Common.ColumnImportance"
        },
        "columnDataType": {
          "$ref": "#/definitions/BeezUP.Common.ColumnDataType"
        },
        "beezUPColumnName": {
          "$ref": "#/definitions/BeezUP.Common.BeezUPColumnName"
        }
      }
    },
    "links.GetChannelCatalogsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetChannelCatalogExclusionFilterOperatorsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/exclusionFilterOperators",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetChannelCatalogExportationCacheInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/exportations/cache",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetChannelCatalogExportationHistoryLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/exportations/history",
            "method": "GET"
          }
        }
      ]
    },
    "links.ClearChannelCatalogExportationCacheLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/exportations/cache/clear",
            "method": "POST"
          }
        }
      ]
    },
    "links.GetChannelCatalogLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0",
            "method": "GET"
          }
        }
      ]
    },
    "links.DeleteChannelCatalogLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0",
            "method": "DELETE"
          }
        }
      ]
    },
    "links.GetChannelCatalogCategoriesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "description": "If you did not configure the cost settings this link will not be displayed."
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/categoryMappings",
            "method": "GET"
          }
        }
      ]
    },
    "links.DisableChannelCatalogCategoryMappingLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/categoryMappings/disable",
            "method": "POST"
          }
        }
      ]
    },
    "links.ReenableChannelCatalogCategoryMappingLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/categoryMappings/reenable",
            "method": "POST"
          }
        }
      ]
    },
    "links.MapChannelCatalogCategoryLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/categoryMappings/map",
            "method": "POST"
          }
        }
      ]
    },
    "links.UnmapChannelCatalogCategoryLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/categoryMappings/unmap",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "required": true,
                "value": {
                  "catalogCategoryPath": [
                    "VÃªtements",
                    "Femmes",
                    "Chaussures"
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "links.EnableChannelCatalogLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/enable",
            "method": "POST"
          }
        }
      ]
    },
    "links.DisableChannelCatalogLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/disable",
            "method": "POST"
          }
        }
      ]
    },
    "links.GetChannelCatalogProductInfoListLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/products",
            "method": "POST"
          }
        }
      ]
    },
    "links.ExportChannelCatalogProductInfoListLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/products/export",
            "method": "POST",
            "parameters": {
              "format": {
                "in": "query",
                "required": true,
                "type": "string",
                "value": "csv"
              }
            }
          }
        }
      ]
    },
    "links.ConfigureChannelCatalogColumnMappingsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/columnMappings",
            "method": "PUT"
          }
        }
      ]
    },
    "links.ConfigureChannelCatalogGeneralSettingsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/settings/general",
            "method": "POST"
          }
        }
      ]
    },
    "links.ConfigureChannelCatalogCostSettingsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/settings/cost",
            "method": "POST"
          }
        }
      ]
    },
    "links.AddChannelCatalogLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs",
            "method": "POST"
          }
        }
      ]
    },
    "links.ConfigureChannelCatalogExclusionFiltersLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/exclusionFilters",
            "method": "PUT"
          }
        }
      ]
    },
    "links.GetChannelCatalogExclusionFiltersLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/exclusionFilters",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetChannelCatalogProductInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/products/578419df-1bbf-41a6-96fa-862e42182b67",
            "method": "GET"
          }
        }
      ]
    },
    "links.DisableChannelCatalogProductLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/products/578419df-1bbf-41a6-96fa-862e42182b67/disable",
            "method": "POST"
          }
        }
      ]
    },
    "links.ReenableChannelCatalogProductLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/products/578419df-1bbf-41a6-96fa-862e42182b67/reenable",
            "method": "POST"
          }
        }
      ]
    },
    "links.OverrideChannelCatalogProductValuesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/channelCatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/products/578419df-1bbf-41a6-96fa-862e42182b67/overrides",
            "method": "POST"
          }
        }
      ]
    },
    "channelCatalogExportCacheInfoResponse": {
      "type": "object",
      "required": [
        "cacheInfo",
        "links"
      ],
      "properties": {
        "cacheInfo": {
          "$ref": "#/definitions/channelCatalogExportCacheInfo"
        },
        "links": {
          "$ref": "#/definitions/channelCatalogExportCacheInfoResponseLinks"
        }
      }
    },
    "channelCatalogExportCacheInfoResponseLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogExportationCacheInfoLink"
        },
        "clear": {
          "$ref": "#/definitions/links.ClearChannelCatalogExportationCacheLink"
        }
      }
    },
    "channelCatalogExportCacheInfo": {
      "type": "object",
      "required": [
        "cacheStatus"
      ],
      "properties": {
        "cacheStatus": {
          "description": "The cache status",
          "type": "string",
          "example": "ReadyForGeneration",
          "x-lov": "ChannelCatalogExportCacheStatus"
        },
        "lastUpdateUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last update UTC date of the cache",
          "example": "2014-08-25T07:32:31.584Z"
        },
        "lastContentChangeUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last content change UTC date",
          "example": "2014-08-25T07:30:31.584Z"
        },
        "expirationUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The expiration UTC date of the cache",
          "example": "2014-08-25T08:02:31.584Z"
        },
        "feedUrl": {
          "description": "The feed url",
          "type": "string",
          "example": "https://www.scootmotoshop.com/feed.xml"
        }
      }
    },
    "channelCatalogExportationHistoryLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogExportationHistoryLink"
        }
      }
    },
    "channelCatalogExportationHistory": {
      "type": "object",
      "required": [
        "links",
        "exportations"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "exportations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelCatalogExportationReporting"
          }
        },
        "links": {
          "$ref": "#/definitions/channelCatalogExportationHistoryLinks"
        }
      }
    },
    "channelCatalogExportationReporting": {
      "type": "object",
      "required": [
        "exportationUtcDate",
        "clientIpAddress",
        "clientUserAgent"
      ],
      "properties": {
        "exportationUtcDate": {
          "description": "The exportation UTC date",
          "type": "string",
          "format": "date-time",
          "example": "2014-08-25T07:32:31.584Z"
        },
        "exportationDuration": {
          "description": "The exportation duration. \\\n'00:01:00' measn 1 minute.\n",
          "type": "string",
          "pattern": "(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])",
          "example": "00:01:00"
        },
        "cacheStatus": {
          "description": "The cache status during the exportation",
          "type": "string",
          "example": "Available",
          "x-lov": "ChannelCatalogExportationCacheGenerationStatus"
        },
        "exportedProductCount": {
          "type": "integer",
          "format": "int32",
          "description": "The exportated product count during this exportation",
          "example": 10142
        },
        "clientIpAddress": {
          "type": "string",
          "description": "The IP address of the client who requests this exportation",
          "example": "42.101.42.101"
        },
        "clientUserAgent": {
          "type": "string",
          "description": "The http header User-Agent sent by the client who requests this operation",
          "example": "Wget/1.13.4 (linux-gnu)"
        }
      }
    },
    "externalLinks.Catalog_GetBeezUPColumnsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/catalogs/beezUPColumns",
            "method": "GET"
          }
        }
      ]
    },
    "channelCatalogListLinks": {
      "type": "object",
      "description": "Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...\n",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogsLink"
        },
        "beezUPColumns": {
          "$ref": "#/definitions/externalLinks.Catalog_GetBeezUPColumnsLink"
        },
        "add": {
          "$ref": "#/definitions/links.AddChannelCatalogLink"
        },
        "exclusionFilterOperators": {
          "$ref": "#/definitions/links.GetChannelCatalogExclusionFilterOperatorsLink"
        }
      }
    },
    "channelCatalogListLovLinks": {
      "type": "object",
      "properties": {
        "channelCatalogExclusionFilterOperatorLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "channelCatalogExportCacheStatusLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        }
      }
    },
    "channelCatalogList": {
      "type": "object",
      "description": "This is the index of the channel catalog API",
      "properties": {
        "links": {
          "$ref": "#/definitions/channelCatalogListLinks"
        },
        "lovLinks": {
          "$ref": "#/definitions/channelCatalogListLovLinks"
        },
        "channelCatalogs": {
          "type": "object",
          "description": "The channel catalog list. The key is the channel catalog identifier",
          "additionalProperties": {
            "$ref": "#/definitions/channelCatalog"
          }
        }
      }
    },
    "addChannelCatalogRequest": {
      "type": "object",
      "required": [
        "channelId",
        "storeId"
      ],
      "properties": {
        "channelId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelId"
        },
        "storeId": {
          "$ref": "#/definitions/BeezUP.Common.StoreId"
        }
      }
    },
    "generalSettings": {
      "description": "Represents the general settings of your channel catalog",
      "type": "object",
      "required": [
        "acceptToPublishInfo",
        "useBid",
        "doNotExportOutOfStockProducts",
        "activeBeezUPTracking"
      ],
      "properties": {
        "acceptToPublishInfo": {
          "description": "If true then you authorize disclosure of my statistics generated from clicks and sales",
          "type": "boolean",
          "example": true
        },
        "useBid": {
          "description": "Activate bidding for this channel",
          "type": "boolean",
          "example": false
        },
        "doNotExportOutOfStockProducts": {
          "description": "Do not export \"out of stock\" products. Note: this option is not taken into account by the counter.\n",
          "type": "boolean",
          "example": true
        },
        "activeBeezUPTracking": {
          "description": "Activate BeezUP tracking for my statistics (checked by default)",
          "type": "boolean",
          "default": true,
          "example": true
        }
      }
    },
    "costType": {
      "description": "CPC means cost per click.\nCPA means cost per action.\nYou can have CPC/CPA with a global cost value.\nYou can have CPC/CPA by category the cost value MUST be null\nYou can have global fixed price.\n",
      "type": "string",
      "enum": [
        "CPC_Global",
        "CPA_Global",
        "CPC_ByCategory",
        "CPA_ByCategory",
        "Fixed_Global"
      ],
      "example": "Fixed_Global"
    },
    "channelCostSettings": {
      "description": "Indicate the default configuration of the cost on this channel.",
      "type": "object",
      "required": [
        "costType"
      ],
      "properties": {
        "costType": {
          "$ref": "#/definitions/costType"
        },
        "globalCostValue": {
          "description": "In case of global cost type, you have to indicate the cost value.",
          "type": "number",
          "format": "decimal",
          "example": 10.21
        }
      }
    },
    "costSettings": {
      "description": "If this property is not indicated please force the user to configure the cost settings.\nDefines the cost type you have on this channel with the cost value.\n",
      "type": "object",
      "required": [
        "costType"
      ],
      "properties": {
        "costType": {
          "$ref": "#/definitions/costType"
        },
        "globalCostValue": {
          "description": "In case of global cost type, you have to indicate the cost value.",
          "type": "number",
          "format": "decimal",
          "example": 10.21
        }
      }
    },
    "unmapCategoryRequest": {
      "description": "The request message to unmap a catalog category path to a channel category path",
      "type": "object",
      "required": [
        "catalogCategoryPath"
      ],
      "properties": {
        "catalogCategoryPath": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryPath"
        }
      }
    },
    "mapCategoryRequest": {
      "description": "The request message to make a mapping between catalog category path and a channel category path",
      "type": "object",
      "required": [
        "overrideSubCategoryMappings",
        "autoMapNewSubCategories",
        "channelCatalogCategoryMapping"
      ],
      "properties": {
        "overrideSubCategoryMappings": {
          "description": "Great feature! In case of mapping to parent channel category, you can ask to override the mapping of all sub channel category to this catalog category path",
          "type": "boolean",
          "example": true
        },
        "autoMapNewSubCategories": {
          "description": "Great feature! In case of mapping to parent catalog category, you can ask to automatically map new sub catalog category in the next importation to this channel category path.",
          "type": "boolean",
          "example": true
        },
        "channelCatalogCategoryMapping": {
          "$ref": "#/definitions/channelCatalogCategoryMapping"
        }
      }
    },
    "channelCatalogCategoryMappingsLinks": {
      "type": "object",
      "description": "The action you can do on the category mappings",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogCategoriesLink"
        },
        "disable": {
          "$ref": "#/definitions/links.DisableChannelCatalogCategoryMappingLink"
        },
        "reenable": {
          "$ref": "#/definitions/links.ReenableChannelCatalogCategoryMappingLink"
        }
      }
    },
    "channelCatalogCategoryMappingList": {
      "type": "object",
      "required": [
        "links",
        "channelCatalogCategoryMappings"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/channelCatalogCategoryMappingsLinks"
        },
        "channelCatalogCategoryMappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelCatalogCategoryMappingInfo"
          }
        }
      }
    },
    "channelCatalogCategoryMappingInfoLinks": {
      "type": "object",
      "properties": {
        "mapCategory": {
          "$ref": "#/definitions/links.MapChannelCatalogCategoryLink"
        },
        "unmapCategory": {
          "$ref": "#/definitions/links.UnmapChannelCatalogCategoryLink"
        }
      }
    },
    "channelCatalogCategoryMappingInfo": {
      "type": "object",
      "description": "For all catalog categories the current mapping applied",
      "required": [
        "catalogCategoryPath",
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/channelCatalogCategoryMappingInfoLinks"
        },
        "catalogCategoryPath": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryPath"
        },
        "channelCategoryPath": {
          "$ref": "#/definitions/BeezUP.Common.ChannelCategoryPath"
        },
        "costValue": {
          "$ref": "#/definitions/channelCatalogCategoryCostValue"
        }
      }
    },
    "channelCatalogCategoryCostValue": {
      "description": "In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.",
      "type": "number",
      "format": "decimal",
      "example": 10.21
    },
    "channelCatalogCategoryMapping": {
      "type": "object",
      "description": "Represent a mapping between a catalog category path and a channel category path. \nThe cost on this mapping can be applied.\n",
      "required": [
        "catalogCategoryPath",
        "channelCategoryPath"
      ],
      "properties": {
        "catalogCategoryPath": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryPath"
        },
        "channelCategoryPath": {
          "$ref": "#/definitions/BeezUP.Common.ChannelCategoryPath"
        },
        "costValue": {
          "$ref": "#/definitions/channelCatalogCategoryCostValue"
        }
      }
    },
    "channelCatalogColumnMappingWithName": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogColumnMapping"
        },
        {
          "type": "object",
          "required": [
            "channelColumnId",
            "channelColumnName"
          ],
          "properties": {
            "channelColumnName": {
              "$ref": "#/definitions/BeezUP.Common.ChannelColumnName"
            },
            "channelBeezUPColumnName": {
              "$ref": "#/definitions/BeezUP.Common.BeezUPColumnName"
            },
            "catalogColumnName": {
              "$ref": "#/definitions/BeezUP.Common.CatalogColumnUserName"
            },
            "catalogBeezUPColumnName": {
              "$ref": "#/definitions/BeezUP.Common.BeezUPColumnName"
            }
          }
        }
      ]
    },
    "channelCatalogColumnMapping": {
      "description": "Represent a mapping between a channel column (considering channel category mapping) and a catalog column",
      "type": "object",
      "required": [
        "channelColumnId"
      ],
      "properties": {
        "channelColumnId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelColumnId"
        },
        "channelCategoryPath": {
          "$ref": "#/definitions/BeezUP.Common.ChannelCategoryPath"
        },
        "catalogColumnId": {
          "$ref": "#/definitions/BeezUP.Common.CatalogColumnId"
        }
      }
    },
    "upgradeOfferRequired": {
      "description": "The message contains the offer identifier required to execute this operation",
      "type": "object",
      "required": [
        "offerId"
      ],
      "properties": {
        "offerId": {
          "type": "integer",
          "format": "int32",
          "description": "The offer identifier required",
          "example": 9
        }
      }
    },
    "channelCatalogColumnMappingListWithName": {
      "description": "The column mapping list between a channel and a catalog",
      "type": "array",
      "items": {
        "$ref": "#/definitions/channelCatalogColumnMappingWithName"
      }
    },
    "channelCatalogColumnMappingList": {
      "description": "The column mapping list between a channel and a catalog",
      "type": "array",
      "items": {
        "$ref": "#/definitions/channelCatalogColumnMapping"
      }
    },
    "channelCatalogState": {
      "type": "object",
      "description": "Channel Catalog State",
      "required": [
        "exportedProductCount",
        "columnMappingStatus",
        "categoryMappingState",
        "apiSettingStatus"
      ],
      "properties": {
        "exportedProductCount": {
          "type": "integer",
          "format": "int32",
          "example": 101
        },
        "columnMappingStatus": {
          "$ref": "#/definitions/columnMappingStatus"
        },
        "categoryMappingState": {
          "$ref": "#/definitions/categoryMappingState"
        },
        "apiSettingStatus": {
          "$ref": "#/definitions/apiSettingStatus"
        }
      }
    },
    "columnMappingStatus": {
      "type": "string",
      "enum": [
        "warning",
        "success",
        "failed"
      ],
      "example": "success"
    },
    "categoryMappingState": {
      "description": "The category mapping state of the channel catalog",
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/categoryMappingStatus"
        },
        "uncategorizedProductCount": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates the uncategorized product count",
          "example": 101
        },
        "categorizedWithoutCostProductCount": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates the categorized product count without cost defined on the category",
          "example": 42
        }
      }
    },
    "categoryMappingStatus": {
      "type": "string",
      "enum": [
        "warning",
        "success",
        "failed"
      ],
      "example": "success"
    },
    "apiSettingStatus": {
      "type": "string",
      "enum": [
        "warning",
        "success",
        "failed"
      ],
      "example": "success"
    },
    "channelCategorySettings": {
      "type": "object",
      "properties": {
        "mappingRequired": {
          "type": "boolean",
          "description": "Indicates if the category mapping is required, otherwise you can map the categories but it will not block the publication of your catalog",
          "example": true
        },
        "mappingLeafRequired": {
          "type": "boolean",
          "description": "Indicates if the category mapping is required on category path leaf or not",
          "example": true
        }
      }
    },
    "channelCatalogCategoryMappingSettings": {
      "type": "object",
      "properties": {
        "categoryMappingDisabledByMerchant": {
          "description": "Optional parameter. Indicates that you have decided to do not map your categories with the channel's categories.",
          "type": "boolean",
          "example": false
        }
      }
    },
    "channelCatalog": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.ChannelBasicInfo"
        },
        {
          "type": "object",
          "description": "The channel catalog",
          "required": [
            "channelCatalogId",
            "channelId",
            "channelName",
            "channelImageUrl",
            "types",
            "storeId",
            "enabled",
            "state",
            "links",
            "generalSettings",
            "channelCostSettings",
            "channelCategorySettings",
            "isMarketplace",
            "productCount"
          ],
          "properties": {
            "productCount": {
              "type": "integer",
              "format": "int32",
              "description": "The product count exported considering category mapping. Not all filters have been applied.",
              "example": 101
            },
            "enabled": {
              "type": "boolean",
              "description": "Indicates if the channel catalog is enable",
              "example": true
            },
            "isMarketplace": {
              "type": "boolean",
              "description": "Indicates if this channel catalog is related to a marketplace",
              "example": true
            },
            "channelCatalogId": {
              "$ref": "#/definitions/BeezUP.Common.ChannelCatalogId"
            },
            "storeId": {
              "$ref": "#/definitions/BeezUP.Common.StoreId"
            },
            "generalSettings": {
              "$ref": "#/definitions/generalSettings"
            },
            "channelCostSettings": {
              "$ref": "#/definitions/channelCostSettings"
            },
            "channelCategorySettings": {
              "$ref": "#/definitions/channelCategorySettings"
            },
            "costSettings": {
              "$ref": "#/definitions/costSettings"
            },
            "categoryMappingSettings": {
              "$ref": "#/definitions/channelCatalogCategoryMappingSettings"
            },
            "columnMappings": {
              "$ref": "#/definitions/channelCatalogColumnMappingListWithName"
            },
            "exclusionFilters": {
              "$ref": "#/definitions/exclusionFilters"
            },
            "exportUrl": {
              "$ref": "#/definitions/BeezUP.Common.HttpUrl"
            },
            "state": {
              "$ref": "#/definitions/channelCatalogState"
            },
            "types": {
              "description": "The channel type list related to the channel",
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "Marketplace"
              ]
            },
            "links": {
              "$ref": "#/definitions/channelCatalogLinks"
            }
          }
        }
      ]
    },
    "externalLinks.GetChannelCatalogMarketplaceSettingsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/channelcatatalogs/6d6b04de-406b-4539-8e7e-bf3e8da5dfb0/settings",
            "method": "GET"
          }
        }
      ]
    },
    "channelCatalogLinks": {
      "type": "object",
      "description": "Indicates the actions you can do on a channel catalog",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogLink"
        },
        "delete": {
          "$ref": "#/definitions/links.DeleteChannelCatalogLink"
        },
        "enable": {
          "$ref": "#/definitions/links.EnableChannelCatalogLink"
        },
        "disable": {
          "$ref": "#/definitions/links.DisableChannelCatalogLink"
        },
        "configureGeneralSettings": {
          "$ref": "#/definitions/links.ConfigureChannelCatalogGeneralSettingsLink"
        },
        "configureCostSettings": {
          "$ref": "#/definitions/links.ConfigureChannelCatalogCostSettingsLink"
        },
        "configureColumnMappings": {
          "$ref": "#/definitions/links.ConfigureChannelCatalogColumnMappingsLink"
        },
        "reenableCategoryMappings": {
          "$ref": "#/definitions/links.ReenableChannelCatalogCategoryMappingLink"
        },
        "disableCategoryMappings": {
          "$ref": "#/definitions/links.DisableChannelCatalogCategoryMappingLink"
        },
        "categoryMappings": {
          "$ref": "#/definitions/links.GetChannelCatalogCategoriesLink"
        },
        "exclusionFilters": {
          "$ref": "#/definitions/links.GetChannelCatalogExclusionFiltersLink"
        },
        "products": {
          "$ref": "#/definitions/links.GetChannelCatalogProductInfoListLink"
        },
        "exportationCacheInfo": {
          "$ref": "#/definitions/links.GetChannelCatalogExportationCacheInfoLink"
        },
        "marketplaceSettings": {
          "$ref": "#/definitions/externalLinks.GetChannelCatalogMarketplaceSettingsLink"
        }
      }
    },
    "productOverrides": {
      "description": "The key is the channel column identifier",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "8a76f06a-fefc-4c0d-bcfe-b210f1482977": "3563",
        "B7B79A0B-A8DE-54DA-964C-E2704DF3738A": "SHBELNL56",
        "57F70E81-E4F2-5034-BC65-E1D5C48EBEDA": "Sony bravia",
        "2A77749D-0AAB-5245-89B5-6A1A4E06DACA": "http://www.blalbla.nl/images/cache/dldldl.jpg",
        "54B3B3CB-5CA5-5471-9DAE-5310C032059A": "http://www.blalbla.nl/images/cache/dlmdl.jpg",
        "0EA21509-1141-57BD-B679-371BC98B2ADA": "http://www.blalbla.nl/images/cache/ldldld.jpg"
      }
    },
    "productOverridesWithCatalogValues": {
      "description": "The key is the channel column identifier",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/productOverrideWithCatalogValue"
      },
      "example": {
        "8a76f06a-fefc-4c0d-bcfe-b210f1482977": {
          "catalogValue": "x235",
          "override": "3563"
        },
        "B7B79A0B-A8DE-54DA-964C-E2704DF3738A": {
          "catalogValue": "x_ezlSHBELNL56",
          "override": "SHBELNL56"
        },
        "57F70E81-E4F2-5034-BC65-E1D5C48EBEDA": {
          "catalogValue": "Sony",
          "override": "Sony bravia"
        },
        "2A77749D-0AAB-5245-89B5-6A1A4E06DACA": {
          "catalogValue": "http://www.toto.com/thing/images/cache/dldldl.jpg",
          "override": "http://www.blalbla.nl/images/cache/dldldl.jpg"
        },
        "54B3B3CB-5CA5-5471-9DAE-5310C032059A": {
          "catalogValue": "http://www.toto.com/thing/cache/dlmdl.jpg",
          "override": "http://www.blalbla.nl/images/cache/dlmdl.jpg"
        },
        "0EA21509-1141-57BD-B679-371BC98B2ADA": {
          "catalogValue": "http://www.toto.com/thing/images/cache/ldldld.jpg",
          "override": "http://www.blalbla.nl/images/cache/ldldld.jpg"
        }
      }
    },
    "productOverrideWithCatalogValue": {
      "type": "object",
      "required": [
        "override"
      ],
      "properties": {
        "override": {
          "type": "string",
          "description": "The overridden product value",
          "example": "Sony bravia"
        },
        "catalogValue": {
          "type": "string",
          "description": "The catalog product value",
          "example": "Sony"
        }
      }
    },
    "exclusionFiltersResponseLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogExclusionFiltersLink"
        },
        "configure": {
          "$ref": "#/definitions/links.ConfigureChannelCatalogExclusionFiltersLink"
        }
      }
    },
    "exclusionFiltersResponse": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/exclusionFiltersResponseLinks"
        },
        "exclusionFilters": {
          "$ref": "#/definitions/exclusionFilters"
        }
      }
    },
    "exclusionFilters": {
      "description": "The exclusion filter list",
      "type": "array",
      "items": {
        "$ref": "#/definitions/exclusionFilter"
      }
    },
    "exclusionFilterName": {
      "type": "string",
      "description": "The exclusion filter name",
      "example": "Exclude sony products"
    },
    "exclusionFilter": {
      "description": "The exclusion filter",
      "type": "object",
      "required": [
        "name",
        "position",
        "groupId",
        "positionInGroup",
        "channelColumnId",
        "operatorName",
        "enabled"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/exclusionFilterName"
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The position of the exclusion filter",
          "minimum": 1,
          "example": 1
        },
        "groupId": {
          "type": "string",
          "format": "guid",
          "description": "Indicate the filter's group. All filters in the same group means an \"AND\" operation in the filter group",
          "example": "d9833f4b-718a-436f-bab5-89da3d21bf60"
        },
        "positionInGroup": {
          "type": "integer",
          "format": "int32",
          "description": "Indicate the filter group position. This information is used for the UI purpose and must be unique in the filter group.",
          "minimum": 1,
          "example": 1
        },
        "channelColumnId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelColumnId"
        },
        "operatorName": {
          "$ref": "#/definitions/exclusionFilterOperatorName"
        },
        "value": {
          "description": "The value indicate by the user when the filter operation requires it.",
          "type": "string",
          "example": "sony"
        },
        "enabled": {
          "description": "indicates if the filter is currently enable.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "exclusionFilterOperatorName": {
      "description": "The exclusion filter operator name",
      "type": "string",
      "x-lov": "ChannelCatalogExclusionFilterOperator",
      "example": "Contains"
    },
    "exclusionFilterOperatorDataType": {
      "description": "Data type of the operator",
      "enum": [
        "string",
        "number"
      ],
      "type": "string",
      "default": "string",
      "example": "string"
    },
    "exclusionFilterOperator": {
      "description": "The exclusion filter operator",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/exclusionFilterOperatorName"
        },
        "expectedChannelColumnDataType": {
          "$ref": "#/definitions/exclusionFilterOperatorDataType"
        },
        "valueRequired": {
          "type": "boolean",
          "description": "This operator requires a value",
          "example": true
        },
        "expectedValueDataType": {
          "$ref": "#/definitions/exclusionFilterOperatorDataType"
        }
      }
    },
    "productSetVisibilityCriteriaLogicType": {
      "description": "Indicate how you want to combine the filters:\n* funnel: You will get the products which meet at least one of the product set criterion. The criteria are applied in the following order: \n  - categorization\n  - exclusion filters\n  - deactivations\n* cumulative: You will get the products which have all the product set criteria\n",
      "type": "string",
      "enum": [
        "funnel",
        "cumulative"
      ]
    },
    "productSetVisibilityCriteria": {
      "type": "object",
      "required": [
        "logic"
      ],
      "properties": {
        "logic": {
          "$ref": "#/definitions/productSetVisibilityCriteriaLogicType"
        },
        "exist": {
          "type": "boolean",
          "description": "If false, search for products absent from the current catalog. If true, search for products currently in the catalog. If null the filter will not be taken in account.",
          "example": true
        },
        "uncategorized": {
          "type": "boolean",
          "description": "Search product WITHOUT category mapped with the channel. If null the filter will not be taken in account.",
          "example": false
        },
        "excluded": {
          "type": "boolean",
          "description": "Search excluded products by at least an exclusion filter. If null the filter will not be taken in account.",
          "example": false
        },
        "disabled": {
          "type": "boolean",
          "description": "Search disabled products. If null the filter will not be taken in account.",
          "example": false
        }
      }
    },
    "getChannelCatalogProductInfoListRequest": {
      "type": "object",
      "required": [
        "pageNumber",
        "pageSize",
        "criteria"
      ],
      "properties": {
        "pageNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "example": 1
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "minimum": 100,
          "example": 100
        },
        "criteria": {
          "$ref": "#/definitions/productSetVisibilityCriteria"
        },
        "overridden": {
          "type": "boolean",
          "description": "Search overridden products. If null the filter will not be taken in account.",
          "example": true
        },
        "productFilters": {
          "$ref": "#/definitions/BeezUP.Common.ProductFilters"
        },
        "catalogCategoryFilter": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryFilter"
        },
        "channelCategoryFilter": {
          "$ref": "#/definitions/BeezUP.Common.ChannelCategoryFilter"
        }
      }
    },
    "channelCatalogProductsCounters": {
      "type": "object",
      "description": "The channel catalog products counters. For each counter you will have a count.",
      "properties": {
        "existingProductCount": {
          "type": "integer",
          "format": "int32",
          "description": "Imported product count currently in your catalog.",
          "example": 1000
        },
        "uncategorizedProductCount": {
          "type": "integer",
          "format": "int32",
          "description": "Product count WITHOUT category mapped on existing products.",
          "example": 250
        },
        "excludedProductCountIncludingUncategorized": {
          "type": "integer",
          "format": "int32",
          "description": "Excluded product count INCLUDING uncategorized products on existing products.",
          "example": 169
        },
        "excludedProductCountExcludingUncategorized": {
          "type": "integer",
          "format": "int32",
          "description": "Excluded product count EXCLUDING uncategorized products on existing products.",
          "example": 150
        },
        "disabledProductCountExcludingUncategorizedAndExcluded": {
          "type": "integer",
          "format": "int32",
          "description": "Disabled product count EXCLUDING uncategorized products AND excluded products on existing products.",
          "example": 50
        },
        "disabledProductCountIncludingUncategorizedAndExcluded": {
          "type": "integer",
          "format": "int32",
          "description": "Disabled product count INCLUDING uncategorized products AND excluded products on existing products.",
          "example": 66
        }
      }
    },
    "channelCatalogProductInfoListLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogProductInfoListLink"
        },
        "export": {
          "$ref": "#/definitions/links.ExportChannelCatalogProductInfoListLink"
        }
      }
    },
    "channelCatalogProductInfoList": {
      "description": "The channel catalog product info list",
      "type": "object",
      "required": [
        "paginationResult",
        "links",
        "productInfos"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "links": {
          "$ref": "#/definitions/channelCatalogProductInfoListLinks"
        },
        "productInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelCatalogProductInfo"
          }
        }
      }
    },
    "channelCatalogProductInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.ProductBasicInfo"
        },
        {
          "type": "object",
          "description": "The channel catalog product information",
          "required": [
            "productId",
            "productExists",
            "overrides",
            "disabled",
            "uncategorized",
            "excluded",
            "links"
          ],
          "properties": {
            "overrides": {
              "$ref": "#/definitions/productOverridesWithCatalogValues"
            },
            "disabled": {
              "type": "boolean",
              "description": "Indicates if the product has been disabled or not",
              "default": false,
              "example": false
            },
            "uncategorized": {
              "type": "boolean",
              "description": "Indicates if the product's category has been NOT mapped to a channel category",
              "example": true
            },
            "excluded": {
              "type": "boolean",
              "description": "Indicates if the product has been excluded by a exclusion filter",
              "default": false,
              "example": true
            },
            "excludedBy": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/exclusionFilterName"
              },
              "example": [
                "Exclude sony products"
              ]
            },
            "links": {
              "$ref": "#/definitions/channelCatalogProductInfoLinks"
            }
          }
        }
      ]
    },
    "channelCatalogProductInfoLinks": {
      "description": "Indicates the differents actions you can do on a channel product",
      "type": "object",
      "required": [
        "self",
        "override"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogProductInfoLink"
        },
        "override": {
          "$ref": "#/definitions/links.OverrideChannelCatalogProductValuesLink"
        },
        "disable": {
          "$ref": "#/definitions/links.DisableChannelCatalogProductLink"
        },
        "reenable": {
          "$ref": "#/definitions/links.ReenableChannelCatalogProductLink"
        }
      }
    },
    "channelCatalogProductByChannelCatalogRequest": {
      "type": "object",
      "required": [
        "storeId",
        "productId",
        "channelCatalogIds"
      ],
      "properties": {
        "storeId": {
          "$ref": "#/definitions/BeezUP.Common.StoreId"
        },
        "productId": {
          "$ref": "#/definitions/BeezUP.Common.ProductId"
        },
        "channelCatalogIds": {
          "description": "The list of channel catalog identifier",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.ChannelCatalogId"
          }
        }
      }
    },
    "channelCatalogProductByChannelCatalogResponse": {
      "type": "object",
      "properties": {
        "channelCatalogs": {
          "description": "The channel catalog product by channel catalog. The key is the channel catalog identifier",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/channelCatalogProductInfo"
          }
        }
      }
    },
    "publicationType": {
      "description": "The Publication Type",
      "type": "string",
      "enum": [
        "PublishProducts",
        "PublishOffers",
        "Unpublish"
      ],
      "example": "PublishOffers",
      "x-lov": "MarketplacePublicationType"
    },
    "feedType": {
      "description": "The Feed Type",
      "enum": [
        "Products",
        "Inventory",
        "Pricing",
        "Images",
        "Relationships",
        "Unpublish",
        "Offers"
      ],
      "type": "string",
      "example": "Offers",
      "x-lov": "MarketplacePublicationFeedType"
    },
    "accountPublicationsLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetPublicationsLink"
        }
      }
    },
    "accountPublications": {
      "description": "The publication history for an account",
      "type": "object",
      "required": [
        "links",
        "publications"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/accountPublicationsLinks"
        },
        "publications": {
          "description": "The recent publications for the requested account",
          "type": "array",
          "items": {
            "$ref": "#/definitions/publicationReporting"
          },
          "example": [
            {
              "publicationType": "PublishOffers",
              "feeds": [
                {
                  "feedType": "Offers",
                  "startUtcDate": "2016-02-13T12:01:11Z",
                  "endUtcDate": "2016-02-13T12:02:00Z",
                  "processingStatus": "Done",
                  "exportedProducts": 10142,
                  "transmittedItems": 10042,
                  "publishedItems": 10041,
                  "publishedItemsWithWarning": 123,
                  "failedItems": 1,
                  "errorMessage": "",
                  "htmlReportUrl": "http://www.myreporthtml.com",
                  "htmlReportGenerationErrorMessage": ""
                },
                {
                  "feedType": "Inventory",
                  "startUtcDate": "2016-02-13T12:01:11Z",
                  "endUtcDate": "2016-02-13T12:02:00Z",
                  "processingStatus": "Done",
                  "exportedProducts": 10142,
                  "transmittedItems": 10042,
                  "publishedItems": 10041,
                  "publishedItemsWithWarning": 123,
                  "failedItems": 1,
                  "errorMessage": "",
                  "htmlReportUrl": "http://www.myreporthtml.com",
                  "htmlReportGenerationErrorMessage": ""
                },
                {
                  "feedType": "Pricing",
                  "startUtcDate": "2016-02-13T12:01:11Z",
                  "processingStatus": "InProgress",
                  "exportedProducts": 10142,
                  "transmittedItems": 10042,
                  "publishedItems": 10041,
                  "publishedItemsWithWarning": 123,
                  "failedItems": 1,
                  "errorMessage": "",
                  "htmlReportUrl": "http://www.myreporthtml.com",
                  "htmlReportGenerationErrorMessage": ""
                }
              ]
            },
            {
              "publicationType": "PublishProducts",
              "feeds": [
                {
                  "feedType": "Product",
                  "startUtcDate": "2016-02-13T12:01:11Z",
                  "endUtcDate": "2016-02-13T12:02:00Z",
                  "processingStatus": "Done",
                  "exportedProducts": 10142,
                  "transmittedItems": 10042,
                  "publishedItems": 10041,
                  "publishedItemsWithWarning": 123,
                  "failedItems": 1,
                  "errorMessage": "",
                  "htmlReportUrl": "http://www.myreporthtml.com",
                  "htmlReportGenerationErrorMessage": ""
                },
                {
                  "feedType": "Inventory",
                  "startUtcDate": "2016-02-13T12:01:11Z",
                  "endUtcDate": "2016-02-13T12:02:00Z",
                  "processingStatus": "Done",
                  "exportedProducts": 10142,
                  "transmittedItems": 10042,
                  "publishedItems": 10041,
                  "publishedItemsWithWarning": 123,
                  "failedItems": 1,
                  "errorMessage": "",
                  "htmlReportUrl": "http://www.myreporthtml.com",
                  "htmlReportGenerationErrorMessage": ""
                },
                {
                  "feedType": "Pricing",
                  "startUtcDate": "2016-02-13T12:01:11Z",
                  "processingStatus": "InProgress",
                  "exportedProducts": 10142,
                  "transmittedItems": 10042,
                  "publishedItems": 10041,
                  "publishedItemsWithWarning": 123,
                  "failedItems": 1,
                  "errorMessage": "",
                  "htmlReportUrl": "http://www.myreporthtml.com",
                  "htmlReportGenerationErrorMessage": ""
                }
              ]
            }
          ]
        }
      }
    },
    "publicationReporting": {
      "description": "Model for a publication reporting, can have multiple feeds",
      "type": "object",
      "required": [
        "publicationType",
        "feeds"
      ],
      "properties": {
        "publicationType": {
          "$ref": "#/definitions/publicationType"
        },
        "feeds": {
          "description": "The feeds that were published",
          "type": "array",
          "items": {
            "$ref": "#/definitions/publicationFeedReporting"
          },
          "example": [
            {
              "feedType": "Offers",
              "startUtcDate": "2016-02-13T12:01:11Z",
              "endUtcDate": "2016-02-13T12:02:00Z",
              "processingStatus": "Done",
              "exportedProducts": 10142,
              "transmittedItems": 10042,
              "publishedItems": 10041,
              "publishedItemsWithWarning": 123,
              "failedItems": 1,
              "errorMessage": "",
              "htmlReportUrl": "http://www.myreporthtml.com",
              "htmlReportGenerationErrorMessage": ""
            }
          ]
        }
      }
    },
    "publicationFeedReporting": {
      "description": "Publication feed reporting",
      "type": "object",
      "required": [
        "feedType",
        "processingStatus",
        "startUtcDate"
      ],
      "properties": {
        "feedType": {
          "$ref": "#/definitions/feedType"
        },
        "startUtcDate": {
          "format": "date-time",
          "description": "The feed publication start time (UTC timezone)",
          "type": "string",
          "example": "2016-02-13T12:01:11Z"
        },
        "endUtcDate": {
          "format": "date-time",
          "description": "The feed publication end time (UTC timezone)",
          "type": "string",
          "example": "2016-02-13T12:02:00Z"
        },
        "processingStatus": {
          "description": "The processing status",
          "type": "string",
          "example": "Done"
        },
        "exportedProducts": {
          "format": "int32",
          "description": "The product count downloaded from BeezUP Export",
          "type": "integer",
          "example": 10142
        },
        "transmittedItems": {
          "format": "int32",
          "description": "The item count (products or offers) sent to the marketplace",
          "type": "integer",
          "example": 10042
        },
        "publishedItems": {
          "format": "int32",
          "description": "The item count (products or offers) the marketplace flagged as successful",
          "type": "integer",
          "example": 10041
        },
        "publishedItemsWithWarning": {
          "format": "int32",
          "description": "The item count (products or offers) the marketplace flagged as successful with warnings",
          "type": "integer",
          "example": 123
        },
        "failedItems": {
          "format": "int32",
          "description": "The item count (products or offers) the marketplace flagged as failed",
          "type": "integer",
          "example": 1
        },
        "errorMessage": {
          "description": "The error message",
          "type": "string",
          "example": ""
        },
        "htmlReportUrl": {
          "description": "The Url for the Html Report generated",
          "type": "string",
          "example": "http://www.myreporthtml.com",
          "format": "uri"
        },
        "htmlReportGenerationErrorMessage": {
          "description": "The error message if the Html Report generation failed",
          "type": "string",
          "example": "Example error message"
        },
        "completed": {
          "description": "Indicates if the publication is completed or not",
          "type": "boolean",
          "example": true
        }
      }
    },
    "links.GetChannelCatalogMarketplacePropertiesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/channelcatatalogs/6a90fcfd-24c7-422e-a65f-aadb1725bbfe/properties"
          }
        }
      ]
    },
    "externalLinks.GetExternalConfigurationPageLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        }
      ]
    },
    "channelCatalogMarketplacePropertiesLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogMarketplacePropertiesLink"
        },
        "settings": {
          "$ref": "#/definitions/links.GetChannelCatalogMarketplaceSettingsLink"
        },
        "externalConfigurationPage": {
          "$ref": "#/definitions/externalLinks.GetExternalConfigurationPageLink"
        }
      }
    },
    "channelCatalogMarketplaceProperties": {
      "type": "object",
      "required": [
        "links",
        "propertyGroups"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/BeezUP.Common.InfoSummaries"
        },
        "links": {
          "$ref": "#/definitions/channelCatalogMarketplacePropertiesLinks"
        },
        "propertyGroups": {
          "description": "The groups settings with constraints",
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelCatalogMarketplacePropertyGroup"
          },
          "example": [
            {
              "displayGroupCode": "AccountInformations",
              "displayGroupPosition": 1,
              "properties": [
                {
                  "name": "EbayToken",
                  "position": 1,
                  "readOnly": true,
                  "values": [
                    "AgAAAA**AQAAAA**aAAAAA**2VFhVg**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6AElISgCJaLpwWdj6x9nY+seQ**OEsBAA**AAMAAA**jzsVAMwj1dPBsyCEp0Fuj/toSBrfZF2JpKKDrrXIirMzgvgbsyxnA2h1wl7WjFD+TfdCmaBq3CAFLOog/433G5gsse1DLTT6uXFajdiHnPVfnL7QtKIpQEIwL8ZO5Tx1dGl0XQLsU7knPwbGHn5X6Z3JzXrCGvvpw2+MIzDNhasYlqPfOEr8Lct5dcsIIdhXl/qgrzALe5++v76/XjaXvP6eic3uCWBEXBiXC1uisjEtOqaNIPkFaiICBaXsQUzVZdM68bQatBg5bwf6hxvqOyNJRw4pttGStovcXXjL+aszw7ejbxLv1lJ6qeTMj5oRwTPl0AzBAejcY+DTBrLEmgdzrvWHLvMOa1ijGOGzVodBoDGimiqadCPQpAVZr0e7HvQIVbOlbmKpuCUFJ4RPCv0NxpkCm1/nxZWeS9H8gd/SfLf9Chgd115dcKzgxFBoSh7myJcw+MRM7szPQ2Pwv980dTRyHvbI8XR4OieYvXmU4H7Nl51N8B3qkjYFkdcp6J06eqs4dO68lDNdWZfXHkjwI3dY6umDUp4y82IdQl8IykPty3/DZfUAfqafgiAwMHZvXjewp5HhPjDi2zgf+5EcDlvf6rNMzjsghjdWUQi4WldDk+LXgkos6jswIQaNPdpW1D4KyPYWtGYknx0Xzzuc6WmBoVwGFalgMvCWWI9Gs2w6PG5GqB9zm1Fnr3svtPbNYPQ6q3VQpkKL2SWQXy383O1cp6ZMLI9GwZe0FnrqCxb/wc4XJUVw2RoR3qiX"
                  ]
                },
                {
                  "name": "PayPalEmailAddress",
                  "position": 2,
                  "required": true,
                  "pattern": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
                  "x-pattern": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
                }
              ]
            },
            {
              "displayGroupCode": "AnnounceTitle",
              "displayGroupPosition": 2,
              "properties": [
                {
                  "name": "Postalcode",
                  "required": true,
                  "position": 1
                },
                {
                  "name": "Country",
                  "position": 2,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/Country_eBay"
                  },
                  "lovRequired": true
                },
                {
                  "name": "ReturnsWithinOption",
                  "position": 3,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/ReturnsWithinDuration_eBay"
                  },
                  "lovRequired": true
                },
                {
                  "name": "ShippingService",
                  "position": 4,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/FRA_ShippingService_eBay"
                  },
                  "lovRequired": true
                },
                {
                  "name": "Currency",
                  "position": 5,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/Currency_eBay"
                  },
                  "lovRequired": true
                },
                {
                  "name": "PaymentMethods",
                  "position": 6,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/PaymentMethods_eBay"
                  },
                  "lovRequired": true,
                  "minItems": 1,
                  "maxItems": 2
                }
              ]
            },
            {
              "displayGroupCode": "SalesConditions",
              "displayGroupPosition": 3,
              "properties": [
                {
                  "name": "ReturnsAcceptedOption",
                  "position": 1,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/ReturnsAcceptedOption_eBay"
                  },
                  "lovRequired": true
                },
                {
                  "name": "ShippingCostPaidByOption",
                  "position": 2,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/ShippingCostPaidByOption_eBay"
                  },
                  "lovRequired": true
                },
                {
                  "name": "RefundOption",
                  "position": 3,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/RefundOption_eBay"
                  },
                  "lovRequired": true
                },
                {
                  "name": "ReturnsWithinOption",
                  "position": 4,
                  "required": true,
                  "lovLink": {
                    "href": "/v2/user/lov/ReturnsWithinDuration_eBay"
                  },
                  "lovRequired": true
                },
                {
                  "name": "ReturnDescription",
                  "position": 5,
                  "required": false,
                  "maxLength": 5000
                }
              ]
            },
            {
              "displayGroupCode": "HTML",
              "displayGroupPosition": 4,
              "properties": [
                {
                  "name": "Template_HTML",
                  "position": 1,
                  "required": false,
                  "maxLength": 50000
                }
              ]
            },
            {
              "displayGroupCode": "OrdersRetrievalOptions",
              "displayGroupPosition": 5,
              "properties": [
                {
                  "name": "RetrieveOnlyOneCountry",
                  "description": "If true allows to retireve one marketplace country only",
                  "position": 1,
                  "type": "boolean",
                  "required": false
                }
              ]
            }
          ]
        }
      }
    },
    "channelCatalogMarketplacePropertyGroup": {
      "required": [
        "displayGroupCode",
        "displayGroupPosition",
        "properties"
      ],
      "properties": {
        "displayGroupCode": {
          "type": "string",
          "description": "Indicate the code identifier of the group",
          "example": "AccountInformations",
          "x-lov": "MarketplacePropertiesDisplayGroup"
        },
        "displayGroupPosition": {
          "type": "integer",
          "description": "Indicate the position of the group",
          "minimum": 1,
          "example": 1
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelCatalogMarketplaceProperty"
          },
          "example": [
            {
              "name": "EbayToken",
              "position": 1,
              "readOnly": true,
              "values": [
                "AgAAAA**AQAAAA**aAAAAA**2VFhVg**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6AElISgCJaLpwWdj6x9nY+seQ**OEsBAA**AAMAAA**jzsVAMwj1dPBsyCEp0Fuj/toSBrfZF2JpKKDrrXIirMzgvgbsyxnA2h1wl7WjFD+TfdCmaBq3CAFLOog/433G5gsse1DLTT6uXFajdiHnPVfnL7QtKIpQEIwL8ZO5Tx1dGl0XQLsU7knPwbGHn5X6Z3JzXrCGvvpw2+MIzDNhasYlqPfOEr8Lct5dcsIIdhXl/qgrzALe5++v76/XjaXvP6eic3uCWBEXBiXC1uisjEtOqaNIPkFaiICBaXsQUzVZdM68bQatBg5bwf6hxvqOyNJRw4pttGStovcXXjL+aszw7ejbxLv1lJ6qeTMj5oRwTPl0AzBAejcY+DTBrLEmgdzrvWHLvMOa1ijGOGzVodBoDGimiqadCPQpAVZr0e7HvQIVbOlbmKpuCUFJ4RPCv0NxpkCm1/nxZWeS9H8gd/SfLf9Chgd115dcKzgxFBoSh7myJcw+MRM7szPQ2Pwv980dTRyHvbI8XR4OieYvXmU4H7Nl51N8B3qkjYFkdcp6J06eqs4dO68lDNdWZfXHkjwI3dY6umDUp4y82IdQl8IykPty3/DZfUAfqafgiAwMHZvXjewp5HhPjDi2zgf+5EcDlvf6rNMzjsghjdWUQi4WldDk+LXgkos6jswIQaNPdpW1D4KyPYWtGYknx0Xzzuc6WmBoVwGFalgMvCWWI9Gs2w6PG5GqB9zm1Fnr3svtPbNYPQ6q3VQpkKL2SWQXy383O1cp6ZMLI9GwZe0FnrqCxb/wc4XJUVw2RoR3qiX"
              ]
            },
            {
              "name": "PaypalAddress",
              "position": 2,
              "required": true,
              "pattern": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
              "x-pattern": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
            }
          ]
        }
      }
    },
    "type": {
      "description": "The Data Type",
      "enum": [
        "string",
        "integer",
        "boolean",
        "number"
      ],
      "type": "string",
      "example": "string"
    },
    "channelCatalogMarketplacePropertyDiscriminatorType": {
      "enum": [
        "channelCatalogMarketplaceStringProperty",
        "channelCatalogMarketplaceIntegerProperty",
        "channelCatalogMarketplaceBooleanProperty",
        "channelCatalogMarketplaceNumberProperty"
      ],
      "type": "string",
      "example": "string"
    },
    "channelCatalogMarketplaceProperty": {
      "type": "object",
      "discriminator": "discriminatorType",
      "required": [
        "name",
        "position",
        "readOnly",
        "required",
        "visible",
        "type",
        "discriminatorType"
      ],
      "description": "Model for fetching a channel catalog marketplace property",
      "properties": {
        "name": {
          "$ref": "#/definitions/channelCatalogMarketplacePropertyName"
        },
        "info": {
          "$ref": "#/definitions/BeezUP.Common.InfoSummaries"
        },
        "description": {
          "type": "string",
          "description": "Indicate the description of the property",
          "example": "If true allows to retireve one marketplace country only"
        },
        "position": {
          "type": "integer",
          "description": "Indicate the position of the property in the display group",
          "minimum": 1,
          "example": 1
        },
        "readOnly": {
          "type": "boolean",
          "description": "Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.",
          "default": false,
          "example": false
        },
        "minLength": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates the minimum size of the property value",
          "default": 0,
          "minimum": 0,
          "example": 1
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates the maximum size of the property value",
          "minimum": 1,
          "example": 500
        },
        "minItems": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates the minimum item count of the property value.",
          "default": 1,
          "minimum": 0,
          "example": 1
        },
        "maxItems": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates the maximum item count of the property value",
          "default": 1,
          "minimum": 1,
          "example": 2
        },
        "lovLink": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "Indicates if the property value must be in the list of value.",
          "default": false,
          "example": true
        },
        "required": {
          "type": "boolean",
          "description": "Indicate if the property is required or not",
          "default": false,
          "example": true
        },
        "offerIdRequired": {
          "type": "integer",
          "description": "Indicates the offer identifier required to configure this property.",
          "example": 10
        },
        "visible": {
          "type": "boolean",
          "description": "Indicates if this property should be displayed in the configuration page.",
          "default": true,
          "example": true
        },
        "type": {
          "$ref": "#/definitions/type"
        },
        "discriminatorType": {
          "$ref": "#/definitions/channelCatalogMarketplacePropertyDiscriminatorType"
        },
        "pattern": {
          "description": "Channel catalog marketplace setting value format validation regular expression",
          "type": "string",
          "example": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
        }
      }
    },
    "channelCatalogMarketplaceStringProperty": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogMarketplaceProperty"
        },
        {
          "type": "object",
          "properties": {
            "default": {
              "description": "Indicate the default values of the property",
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "My default value"
              ]
            }
          }
        }
      ]
    },
    "channelCatalogMarketplaceIntegerProperty": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogMarketplaceProperty"
        },
        {
          "type": "object",
          "properties": {
            "default": {
              "description": "Indicate the default values of the property",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": [
                201
              ]
            }
          }
        }
      ]
    },
    "channelCatalogMarketplaceBooleanProperty": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogMarketplaceProperty"
        },
        {
          "type": "object",
          "properties": {
            "default": {
              "description": "Indicate the default values of the property",
              "type": "boolean",
              "example": false
            }
          }
        }
      ]
    },
    "channelCatalogMarketplaceNumberProperty": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogMarketplaceProperty"
        },
        {
          "type": "object",
          "properties": {
            "default": {
              "description": "Indicate the default values of the property",
              "type": "array",
              "items": {
                "type": "number"
              },
              "example": [
                201.69
              ]
            }
          }
        }
      ]
    },
    "setChannelCatalogMarketplaceSettingsRequest": {
      "description": "The channel catalog marketplace settings to save",
      "type": "object",
      "required": [
        "settings"
      ],
      "properties": {
        "settings": {
          "$ref": "#/definitions/channelCatalogMarketplaceSettingArray"
        }
      }
    },
    "links.GetChannelCatalogMarketplaceSettingsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/channelcatatalogs/6a90fcfd-24c7-422e-a65f-aadb1725bbfe/settings"
          }
        }
      ]
    },
    "links.SetChannelCatalogMarketplaceSettingsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/channelcatatalogs/6a90fcfd-24c7-422e-a65f-aadb1725bbfe/settings",
            "method": "POST",
            "paramters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "setChannelCatalogMarketplaceSettingsRequest"
              }
            }
          }
        }
      ]
    },
    "channelCatalogMarketplaceSettingsLinks": {
      "type": "object",
      "required": [
        "self",
        "save"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetChannelCatalogMarketplaceSettingsLink"
        },
        "save": {
          "$ref": "#/definitions/links.SetChannelCatalogMarketplaceSettingsLink"
        }
      }
    },
    "channelCatalogMarketplaceSettings": {
      "description": "The channel catalog marketplace settings",
      "type": "object",
      "required": [
        "links",
        "settings"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/channelCatalogMarketplaceSettingsLinks"
        },
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/channelCatalogMarketplaceSetting"
          },
          "example": [
            {
              "name": "Country",
              "values": [
                "FR"
              ]
            },
            {
              "name": "Currency",
              "values": [
                "EUR"
              ]
            },
            {
              "name": "ListingDuration",
              "values": [
                "GTC"
              ]
            },
            {
              "name": "PaymentMethods",
              "values": [
                "CCAccepted"
              ]
            },
            {
              "name": "PayPalEmailAddress",
              "values": [
                "pascal@ixeoline.com"
              ]
            },
            {
              "name": "PostalCode",
              "values": [
                "69630"
              ]
            },
            {
              "name": "RefundOption",
              "values": [
                "MoneyBackOrExchange"
              ]
            },
            {
              "name": "ReturnsAcceptedOption",
              "values": [
                "ReturnsAccepted"
              ]
            },
            {
              "name": "ReturnsWithinOption",
              "values": [
                "Days_10"
              ]
            },
            {
              "name": "ShippingCostPaidByOption",
              "values": [
                "Buyer"
              ]
            },
            {
              "name": "ShippingService",
              "values": [
                "FR_ColiposteColissimo"
              ]
            }
          ]
        }
      }
    },
    "channelCatalogMarketplaceSettingArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/channelCatalogMarketplaceSetting"
      },
      "example": [
        {
          "name": "Country",
          "values": [
            "FR"
          ]
        },
        {
          "name": "Currency",
          "values": [
            "EUR"
          ]
        },
        {
          "name": "ListingDuration",
          "values": [
            "GTC"
          ]
        },
        {
          "name": "PaymentMethods",
          "values": [
            "CCAccepted"
          ]
        },
        {
          "name": "PayPalEmailAddress",
          "values": [
            "pascal@ixeoline.com"
          ]
        },
        {
          "name": "PostalCode",
          "values": [
            "69630"
          ]
        },
        {
          "name": "RefundOption",
          "values": [
            "MoneyBackOrExchange"
          ]
        },
        {
          "name": "ReturnsAcceptedOption",
          "values": [
            "ReturnsAccepted"
          ]
        },
        {
          "name": "ReturnsWithinOption",
          "values": [
            "Days_10"
          ]
        },
        {
          "name": "ShippingCostPaidByOption",
          "values": [
            "Buyer"
          ]
        },
        {
          "name": "ShippingService",
          "values": [
            "FR_ColiposteColissimo"
          ]
        }
      ]
    },
    "channelCatalogMarketplacePropertyName": {
      "description": "Channel catalog marketplace property name",
      "type": "string",
      "example": "PaypalAddress",
      "x-lov": "MarketplaceStoreProperty"
    },
    "channelCatalogMarketplaceSettingDiscriminatorType": {
      "enum": [
        "channelCatalogMarketplaceStringSetting",
        "channelCatalogMarketplaceIntegerSetting",
        "channelCatalogMarketplaceBooleanSetting",
        "channelCatalogMarketplaceNumberSetting"
      ],
      "type": "string",
      "example": "string"
    },
    "channelCatalogMarketplaceSetting": {
      "description": "Model for fetching a channel catalog marketplace setting",
      "type": "object",
      "discriminator": "discriminatorType",
      "required": [
        "name",
        "discriminatorType"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/channelCatalogMarketplacePropertyName"
        },
        "discriminatorType": {
          "$ref": "#/definitions/channelCatalogMarketplaceSettingDiscriminatorType"
        }
      }
    },
    "channelCatalogMarketplaceStringSetting": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogMarketplaceSetting"
        },
        {
          "type": "object",
          "properties": {
            "values": {
              "description": "Channel catalog marketplace property values",
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "myemail@mydomain.com"
              ]
            }
          }
        }
      ]
    },
    "channelCatalogMarketplaceIntegerSetting": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogMarketplaceSetting"
        },
        {
          "type": "object",
          "properties": {
            "values": {
              "description": "Channel catalog marketplace property values",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": [
                201
              ]
            }
          }
        }
      ]
    },
    "channelCatalogMarketplaceBooleanSetting": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogMarketplaceSetting"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "Channel catalog marketplace property values",
              "type": "boolean",
              "example": false
            }
          }
        }
      ]
    },
    "channelCatalogMarketplaceNumberSetting": {
      "allOf": [
        {
          "$ref": "#/definitions/channelCatalogMarketplaceSetting"
        },
        {
          "type": "object",
          "properties": {
            "values": {
              "description": "Channel catalog marketplace property values",
              "type": "array",
              "items": {
                "type": "number"
              },
              "example": [
                201.69
              ]
            }
          }
        }
      ]
    },
    "marketplaceChannelCatalogList": {
      "description": "The marketplace channel catalog list",
      "type": "object",
      "required": [
        "links",
        "marketplaceChannelCatalogs"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/marketplaceChannelCatalogListLinks"
        },
        "marketplaceChannelCatalogs": {
          "description": "The list of marketplace channel catalog",
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceChannelCatalog"
          }
        }
      }
    },
    "links.GetMarketplaceAccountStoresLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/channelcatalogs"
          }
        }
      ]
    },
    "marketplaceChannelCatalogListLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetMarketplaceAccountStoresLink"
        }
      }
    },
    "marketplaceChannelCatalog": {
      "description": "This object indicates you the association between a channel catalog and a marketplace. The account identifier will be automatically defined based on your marketplace merchant identfier.",
      "type": "object",
      "required": [
        "apiSettingsStatus",
        "enabled",
        "marketplaceTechnicalCode",
        "marketplaceBusinessCode",
        "marketplaceMarketPlaceId",
        "marketplaceIsoCountryCodeAlpha2",
        "beezUPMarketplaceName",
        "beezUPChannelId",
        "beezUPChannelCatalogId",
        "beezUPStoreId",
        "beezUPStoreName",
        "lovLinks",
        "links"
      ],
      "properties": {
        "apiSettingsStatus": {
          "$ref": "#/definitions/BeezUP.Common.ApiSettingsStatus"
        },
        "enabled": {
          "description": "The enabled status of the Channel Catalog",
          "type": "boolean",
          "example": true
        },
        "marketplaceTechnicalCode": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceTechnicalCode"
        },
        "marketplaceBusinessCode": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceBusinessCode"
        },
        "marketplaceMarketPlaceId": {
          "description": "The marketplace identifier in the marketplace",
          "type": "string",
          "example": "71"
        },
        "marketplaceIsoCountryCodeAlpha2": {
          "description": "The marketplace country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Decoding_table for more details)",
          "type": "string",
          "example": "FR"
        },
        "beezUPMarketplaceName": {
          "description": "The marketplace name",
          "example": "ebay FRA"
        },
        "beezUPChannelId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelId"
        },
        "beezUPChannelCatalogId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelCatalogId"
        },
        "beezUPStoreId": {
          "$ref": "#/definitions/BeezUP.Common.StoreId"
        },
        "beezUPStoreName": {
          "description": "The store name",
          "type": "string",
          "example": "My Store 1"
        },
        "marketplaceMerchantIdentifiers": {
          "type": "object",
          "description": "The marketplace merchant identifier list",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "Ebay_PayPalEmailAddress": "yourEbayId@paypal.com"
          }
        },
        "marketplaceAccountId": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceAccountId"
        },
        "lovLinks": {
          "$ref": "#/definitions/marketplaceChannelCatalogLovLinks"
        },
        "links": {
          "$ref": "#/definitions/marketplaceChannelCatalogLinks"
        }
      }
    },
    "links.GetPublicationsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/channelcatalogs/publications/Amazon/123/history"
          }
        }
      ]
    },
    "marketplaceChannelCatalogLovLinks": {
      "type": "object",
      "description": "Indicates the List Of Values related to the marketplace",
      "properties": {
        "shippingMethodLOV": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "carrierCodeLOV": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "cancelationReasonCodeLOV": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "refundReasonCodeLOV": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "marketplaceStorePropertyLOV": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        }
      }
    },
    "marketplaceChannelCatalogLinks": {
      "description": "Indicate the actions you can do on a channel catalog. If the settings are valid, you will be able to access to the publication history.",
      "type": "object",
      "required": [
        "properties",
        "settings"
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/links.GetChannelCatalogMarketplacePropertiesLink"
        },
        "settings": {
          "$ref": "#/definitions/links.GetChannelCatalogMarketplaceSettingsLink"
        },
        "publications": {
          "$ref": "#/definitions/links.GetPublicationsLink"
        }
      }
    },
    "beezUPOrderId": {
      "description": "The BeezUP Order identifier",
      "type": "string",
      "format": "uuid",
      "example": "00000000000000000000000000000000000000000000000"
    },
    "accountId": {
      "description": "The marketplace account identifier in BeezUP. This account identifier is based on your api settings.",
      "type": "integer",
      "format": "int32",
      "example": 1234
    },
    "order_MerchantOrderId": {
      "description": "The order merchant identifier",
      "type": "string",
      "example": "MyOrderMerchantId"
    },
    "order_MerchantECommerceSoftwareName": {
      "description": "The e-commerce software name of the merchant",
      "type": "string",
      "example": "Prestashop"
    },
    "order_MerchantECommerceSoftwareVersion": {
      "description": "The e-commece software version of the merchant",
      "type": "string",
      "example": "123.0.1"
    },
    "orderExportationsLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetOrderExportationsLink"
        }
      }
    },
    "links.GetOrderExportationsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/exportations",
            "method": "GET"
          }
        }
      ]
    },
    "links.ExportOrdersLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/exportations",
            "method": "POST",
            "properties": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "exportOrderListRequest"
              }
            }
          }
        }
      ]
    },
    "orderExportations": {
      "description": "The list of Order report exportations.\\\nThe paginationResult properties can be null if the list is empty.\n",
      "type": "object",
      "required": [
        "links",
        "exportations"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "exportations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderExportationReporting"
          }
        },
        "links": {
          "$ref": "#/definitions/orderExportationsLinks"
        }
      }
    },
    "orderExportationReporting": {
      "description": "Represent the reporting of the Order report exportations",
      "type": "object",
      "required": [
        "enqueuedUtcDate",
        "executionUUID",
        "ipAddress",
        "processingStatus",
        "sourceType",
        "sourceUserName"
      ],
      "properties": {
        "abortionUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:12Z"
        },
        "beginUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:12Z"
        },
        "blobNameUri": {
          "type": "string",
          "example": "http://beezuporder2.blob.com/yourReport.csv"
        },
        "endUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T15:10:12Z"
        },
        "enqueuedUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:09:12Z"
        },
        "errorMessage": {
          "type": "string",
          "example": "You have an error here"
        },
        "executionUUID": {
          "format": "uuid",
          "type": "string",
          "example": "00000000000000000000000000000000000000000000000"
        },
        "expirationUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:39:12Z"
        },
        "failureUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:39:12Z"
        },
        "ipAddress": {
          "type": "string",
          "example": "127.0.0.1"
        },
        "jsonCriteria": {
          "description": "Raw representation of the JSON",
          "type": "string",
          "example": "{\"StartDate:\"2016-09-30T22:00:00Z\",\"EndDate:\"2016-10-30T23:00:00Z\",\"OrderListingFilterDateSearchType:0,\"MarketPlaceOrderIds:null,\"BeezUPOrderStatusNames:null,\"ResultByPage:20,\"MerchantOrderIds:null,\"PageIndex:0,\"MarketPlaceTechnicalCodes:[\"PriceMinister\",\"Amazon\",\"CDiscount\",\"Mirakl\"],\"MarketPlaceBusinessCodes:[\"PRICEMINISTER\"],\"AccountIds:[1234,987],\"StoreIds:[\"00000000-0000-0000-0000-00000000007c\"],\"BuyerFullName:null}"
        },
        "lastUpdateUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T15:10:12Z"
        },
        "orderCount": {
          "format": "int32",
          "type": "integer",
          "example": 1024
        },
        "processingStatus": {
          "$ref": "#/definitions/orderExportationReportingProcessingStatus"
        },
        "remainingOrderCount": {
          "format": "int32",
          "type": "integer",
          "example": 0
        },
        "resumedUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:39:12Z"
        },
        "sourceType": {
          "$ref": "#/definitions/sourceType"
        },
        "sourceUserId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "sourceUserName": {
          "type": "string",
          "example": "Marilyn monroe"
        },
        "suspendedUtcDate": {
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:39:12Z"
        },
        "timeoutDuration": {
          "type": "string",
          "example": "00:30:00"
        },
        "warningMessage": {
          "type": "string",
          "example": "You have a warning here"
        }
      }
    },
    "dateSearchType": {
      "description": "Indicates on which date you want to make the filter",
      "type": "string",
      "enum": [
        "Purchase",
        "Modification",
        "MarketPlaceModification"
      ],
      "default": "Modification"
    },
    "pageSize": {
      "description": "Indicate the order count per page",
      "type": "integer",
      "format": "int32",
      "default": 100,
      "minimum": 25,
      "maximum": 100,
      "example": 100
    },
    "pageNumber": {
      "description": "Indicates the page number",
      "format": "int32",
      "type": "integer",
      "example": 1,
      "minimum": 1,
      "default": 1
    },
    "order_Buyer_Name": {
      "description": "Buyer full name",
      "type": "string",
      "example": "Monroe"
    },
    "orderListRequestWithoutPagination": {
      "type": "object",
      "required": [
        "dateSearchType",
        "beginPeriodUtcDate",
        "endPeriodUtcDate"
      ],
      "properties": {
        "marketplaceTechnicalCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.MarketplaceTechnicalCode"
          },
          "example": [
            "PriceMinister"
          ]
        },
        "marketplaceBusinessCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.MarketplaceBusinessCode"
          },
          "example": [
            "PRICEMINISTER"
          ]
        },
        "accountIds": {
          "description": "Account id list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountId"
          },
          "example": [
            12345
          ]
        },
        "beezUPOrderStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/beezUPOrderStatus"
          },
          "example": [
            "InProgress"
          ]
        },
        "dateSearchType": {
          "$ref": "#/definitions/dateSearchType"
        },
        "beginPeriodUtcDate": {
          "description": "The begin period you want to make the search. \\\nThe period MUST not be greater than 30 days.\nThe begin period MUST be lower than the end period. \n",
          "format": "date-time",
          "type": "string",
          "example": "2017-03-01T13:10:01Z"
        },
        "endPeriodUtcDate": {
          "description": "The end period of you search. \\\nThe period MUST not be greater than 30 days. \\\nThe end period MUST be greater than the begin period. \nThe end period MUST be lower to the current date.\n",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:01Z"
        },
        "order_Buyer_Name": {
          "$ref": "#/definitions/order_Buyer_Name"
        },
        "marketplaceOrderIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceOrderId"
          },
          "example": [
            "AmazonOrderId1234"
          ]
        },
        "order_MerchantOrderIds": {
          "description": "Merchant order id list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/order_MerchantOrderId"
          },
          "example": [
            "MyOrderId1234"
          ]
        }
      }
    },
    "orderListRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/orderListRequestWithoutPagination"
        },
        {
          "type": "object",
          "required": [
            "dateSearchType",
            "beginPeriodUtcDate",
            "endPeriodUtcDate",
            "pageSize",
            "pageNumber"
          ],
          "properties": {
            "pageSize": {
              "$ref": "#/definitions/pageSize"
            },
            "pageNumber": {
              "$ref": "#/definitions/pageNumber"
            }
          }
        }
      ]
    },
    "exportOrderListFormat": {
      "description": "The type of the file to export",
      "type": "string",
      "enum": [
        "csv"
      ],
      "default": "csv",
      "example": "csv"
    },
    "exportOrderListRequest": {
      "description": "The message request to export order list. The store identifier is requested to regroup the exportations.",
      "type": "object",
      "required": [
        "storeId",
        "orderListRequestWithoutPagination"
      ],
      "properties": {
        "format": {
          "$ref": "#/definitions/exportOrderListFormat"
        },
        "storeId": {
          "$ref": "#/definitions/BeezUP.Common.StoreId"
        },
        "orderListRequestWithoutPagination": {
          "$ref": "#/definitions/orderListRequestWithoutPagination"
        }
      }
    },
    "orderExportationReportingProcessingStatus": {
      "type": "string",
      "enum": [
        "None",
        "InProgress",
        "Done",
        "Failed",
        "AlreadyInProgress",
        "Aborted",
        "Suspended"
      ],
      "example": "Done"
    },
    "automaticTransitionInfoListLinks": {
      "type": "object",
      "required": [
        "self",
        "configure"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetAutomaticTransitionsLink"
        },
        "configure": {
          "$ref": "#/definitions/links.ConfigureAutomaticTransitionsLink"
        }
      }
    },
    "automaticTransitionInfoList": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/automaticTransitionInfoListLinks"
        },
        "automaticTransitionInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/automaticTransitionInfo"
          }
        }
      }
    },
    "businessOperationType": {
      "type": "string",
      "x-lov": "OrderChangeBusinessOperationType",
      "example": "ShipOrder"
    },
    "automaticTransitionInfoLinks": {
      "type": "object",
      "required": [
        "configure"
      ],
      "properties": {
        "configure": {
          "$ref": "#/definitions/links.ConfigureAutomaticTransitionsLink"
        }
      }
    },
    "automaticTransitionInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/automaticTransition"
        },
        {
          "type": "object",
          "required": [
            "marketplaceTechnicalCode",
            "marketplaceBusinessCode",
            "accountId",
            "beezUPOrderStatus",
            "businessOperationType",
            "orderStatusTransitionId",
            "enabled"
          ],
          "properties": {
            "marketplaceBusinessCode": {
              "$ref": "#/definitions/BeezUP.Common.MarketplaceBusinessCode"
            },
            "beezUPOrderStatus": {
              "$ref": "#/definitions/beezUPOrderStatus"
            },
            "businessOperationType": {
              "$ref": "#/definitions/businessOperationType"
            },
            "links": {
              "$ref": "#/definitions/automaticTransitionInfoLinks"
            }
          }
        }
      ]
    },
    "configureAutomaticTransitionRequest": {
      "type": "object",
      "required": [
        "automaticTransitions"
      ],
      "properties": {
        "automaticTransitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/automaticTransition"
          },
          "minLength": 1
        }
      }
    },
    "automaticTransition": {
      "type": "object",
      "required": [
        "marketplaceTechnicalCode",
        "accountId",
        "orderStatusTransitionId",
        "enabled"
      ],
      "properties": {
        "marketplaceTechnicalCode": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceTechnicalCode"
        },
        "accountId": {
          "$ref": "#/definitions/accountId"
        },
        "orderStatusTransitionId": {
          "format": "int32",
          "type": "integer",
          "example": 1234
        },
        "enabled": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "orderIdentifier": {
      "type": "object",
      "required": [
        "marketplaceTechnicalCode",
        "accountId",
        "beezUPOrderId"
      ],
      "properties": {
        "marketplaceTechnicalCode": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceTechnicalCode"
        },
        "accountId": {
          "$ref": "#/definitions/accountId"
        },
        "beezUPOrderId": {
          "$ref": "#/definitions/beezUPOrderId"
        }
      }
    },
    "clearMerchantOrderInfoListRequest": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderIdentifier"
          },
          "maxItems": 100,
          "uniqueItems": true,
          "minItems": 1,
          "example": [
            {
              "marketplaceTechnicalCode": "Amazon",
              "accountId": 1234,
              "beezUPOrderId": "00000000000000000000000000000000000000000000000"
            },
            {
              "marketplaceTechnicalCode": "Amazon",
              "accountId": 5678,
              "beezUPOrderId": "00000000000000000000000000000000000000000000000"
            },
            {
              "marketplaceTechnicalCode": "Ebay",
              "accountId": 9876,
              "beezUPOrderId": "00000000000000000000000000000000000000000000000"
            }
          ]
        }
      }
    },
    "setMerchantOrderInfoListRequest": {
      "type": "object",
      "required": [
        "order_MerchantECommerceSoftwareName",
        "order_MerchantECommerceSoftwareVersion",
        "orders"
      ],
      "properties": {
        "order_MerchantECommerceSoftwareName": {
          "$ref": "#/definitions/order_MerchantECommerceSoftwareName"
        },
        "order_MerchantECommerceSoftwareVersion": {
          "$ref": "#/definitions/order_MerchantECommerceSoftwareVersion"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/setMerchantOrderInfoListRequestItem"
          },
          "maxItems": 100,
          "uniqueItems": true,
          "minItems": 1,
          "example": [
            {
              "marketplaceTechnicalCode": "Amazon",
              "accountId": 1234,
              "beezUPOrderId": "8D47FF1427A26B064ca98e95f644361ada5a5be0bbb3b53",
              "order_MerchantOrderId": "BX1234"
            },
            {
              "marketplaceTechnicalCode": "Amazon",
              "accountId": 5678,
              "beezUPOrderId": "8D47FF149F213D055f26e3c413e4c9ba5c5cfda460547a4",
              "order_MerchantOrderId": "BX5678"
            },
            {
              "marketplaceTechnicalCode": "Ebay",
              "accountId": 9876,
              "beezUPOrderId": "8D47FF150217B60bdec05ab61c445d1a59e3da050b52823",
              "order_MerchantOrderId": "BX9876"
            }
          ]
        }
      }
    },
    "setMerchantOrderInfoListRequestItem": {
      "allOf": [
        {
          "$ref": "#/definitions/orderIdentifier"
        },
        {
          "type": "object",
          "required": [
            "marketplaceTechnicalCode",
            "accountId",
            "beezUPOrderId",
            "order_MerchantOrderId"
          ],
          "properties": {
            "order_MerchantOrderId": {
              "$ref": "#/definitions/order_MerchantOrderId"
            }
          }
        }
      ]
    },
    "setMerchantOrderInfoRequest": {
      "type": "object",
      "required": [
        "order_MerchantOrderId",
        "order_MerchantECommerceSoftwareName",
        "order_MerchantECommerceSoftwareVersion"
      ],
      "properties": {
        "order_MerchantOrderId": {
          "$ref": "#/definitions/order_MerchantOrderId"
        },
        "order_MerchantECommerceSoftwareName": {
          "$ref": "#/definitions/order_MerchantECommerceSoftwareName"
        },
        "order_MerchantECommerceSoftwareVersion": {
          "$ref": "#/definitions/order_MerchantECommerceSoftwareVersion"
        }
      }
    },
    "accountSynchronizationList": {
      "type": "object",
      "properties": {
        "accountSynchronizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountSynchronization"
          }
        }
      }
    },
    "accountSynchronization": {
      "type": "object",
      "required": [
        "accountId",
        "marketplaceTechnicalCode",
        "marketplaceBusinessCode"
      ],
      "properties": {
        "accountId": {
          "$ref": "#/definitions/accountId"
        },
        "completedHarvestSynchroUtcDate": {
          "format": "date-time",
          "type": "string"
        },
        "marketplaceBusinessCode": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceBusinessCode"
        },
        "marketplaceTechnicalCode": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceTechnicalCode"
        }
      }
    },
    "processing": {
      "description": "If true, there is currently a harvest or an order change in progress. Otherwise false.",
      "type": "boolean",
      "example": false
    },
    "links.GetOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/Amazon/1001/00000000000000000000000000000000000000000000000",
            "method": "GET"
          }
        }
      ]
    },
    "orderHeaderLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetOrderLink"
        }
      }
    },
    "orderHeader": {
      "description": "Describe the basic information related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails",
      "type": "object",
      "required": [
        "marketplaceTechnicalCode",
        "accountId",
        "beezUPOrderId",
        "marketplaceBusinessCode",
        "order_MarketplaceOrderId",
        "order_Status_BeezUPOrderStatus",
        "order_PurchaseUtcDate",
        "order_LastModificationUtcDate",
        "order_MarketplaceLastModificationUtcDate",
        "processing",
        "etag",
        "links"
      ],
      "properties": {
        "marketplaceTechnicalCode": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceTechnicalCode"
        },
        "accountId": {
          "$ref": "#/definitions/accountId"
        },
        "beezUPOrderId": {
          "$ref": "#/definitions/beezUPOrderId"
        },
        "beezUPOrderUrl": {
          "$ref": "#/definitions/BeezUP.Common.HttpUrl"
        },
        "marketplaceBusinessCode": {
          "$ref": "#/definitions/BeezUP.Common.MarketplaceBusinessCode"
        },
        "order_MarketplaceOrderId": {
          "$ref": "#/definitions/marketplaceOrderId"
        },
        "order_Status_BeezUPOrderStatus": {
          "$ref": "#/definitions/beezUPOrderStatus"
        },
        "order_Status_MarketplaceOrderStatus": {
          "$ref": "#/definitions/marketplaceOrderStatus"
        },
        "order_MerchantOrderId": {
          "$ref": "#/definitions/order_MerchantOrderId"
        },
        "order_MerchantECommerceSoftwareName": {
          "$ref": "#/definitions/order_MerchantECommerceSoftwareName"
        },
        "order_MerchantECommerceSoftwareVersion": {
          "$ref": "#/definitions/order_MerchantECommerceSoftwareVersion"
        },
        "order_PurchaseUtcDate": {
          "description": "The purchase date of this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-03-31T21:30:23Z"
        },
        "order_LastModificationUtcDate": {
          "description": "The last modification UTC date done by BeezUP of this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-16T10:30:23Z"
        },
        "order_MarketplaceLastModificationUtcDate": {
          "description": "The last modification UTC date done by the marketplace on this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-16T10:25:23Z"
        },
        "order_Buyer_Name": {
          "$ref": "#/definitions/order_Buyer_Name"
        },
        "order_TotalPrice": {
          "description": "The total price of this order (corresponding to the amount paid by the customer)",
          "format": "decimal",
          "type": "number",
          "example": 101.42
        },
        "order_CurrencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "processing": {
          "$ref": "#/definitions/processing"
        },
        "etag": {
          "$ref": "#/definitions/etag"
        },
        "links": {
          "$ref": "#/definitions/orderHeaderLinks"
        }
      }
    },
    "etag": {
      "description": "ETag value to identify the order.\\\nThis information is required for the operation GetOrder and ChangeOrder.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n",
      "type": "string",
      "example": "\"ca071a4580129f932a03971968ffef69\""
    },
    "orderItem": {
      "description": "Describe an order item. All properties with the prefix orderItem_ are translated in the list of values /user/lov/OrderMetaInfoOrderItems",
      "type": "object",
      "required": [
        "beezUPOrderItemId",
        "orderItem_OrderItemType"
      ],
      "properties": {
        "beezUPOrderItemId": {
          "description": "The BeezUP identifier of the order Item",
          "type": "string",
          "example": "1"
        },
        "orderItem_OrderItemType": {
          "description": "The order item type of the order item",
          "type": "string",
          "example": "Product"
        },
        "orderItem_MerchantImportedProductId": {
          "description": "The product id indicated in the catalog importation in BeezUP system for this order item. This property will help you to match the order to the inventory system.",
          "type": "string",
          "example": "73267"
        },
        "orderItem_MerchantImportedProductIdColumnName": {
          "description": "The column name for the product id indicated in the catalog importation in BeezUP system related to this order item. This property will help you to match the order to the inventory system.",
          "example": "reference",
          "type": "string"
        },
        "orderItem_MerchantImportedProductUrl": {
          "description": "The product url indicated in the catalog importation in BeezUP system related to this order item",
          "example": "http://blabla.com/my-folder/73267.html",
          "type": "string"
        },
        "orderItem_MerchantProductIdColumnName": {
          "description": "The column name indicate in the mapping for the product id related to the order item",
          "example": "reference_produit",
          "type": "string"
        },
        "orderItem_BeezUPStoreId": {
          "description": "The store id in the beezup system related to the order item. This property will help you to match the order to the inventory system.",
          "example": "00000000-cceb-4c20-b2c9-000000000000",
          "type": "string"
        },
        "orderItem_ItemTax": {
          "description": "The tax of the order item",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "orderItem_Title": {
          "description": "The title of the order item",
          "example": "bLA acide-plomb 6v-4.5ah 70x48x106mm",
          "type": "string"
        },
        "orderItem_ImageUrl": {
          "description": "The URL of the image of the order item",
          "example": "http://blabla.com//das6-45.jpg",
          "type": "string"
        },
        "orderItem_MerchantProductId": {
          "description": "The merchant product id of the order item",
          "example": "BlaLdas6-4.5",
          "type": "string"
        },
        "orderItem_MarketPlaceProductId": {
          "description": "The marketplace product identifier of the order item",
          "example": "",
          "type": "string"
        },
        "orderItem_ItemPrice": {
          "description": "The price of the order item",
          "example": 6.86,
          "type": "number",
          "format": "decimal"
        },
        "orderItem_Quantity": {
          "description": "The quantity of the order item",
          "example": 1,
          "type": "number",
          "format": "decimal"
        },
        "orderItem_TotalPrice": {
          "description": "The total price of the order item",
          "example": 6.86,
          "type": "number",
          "format": "decimal"
        },
        "orderItem_Shipping_Price": {
          "description": "The shipping price of the order item",
          "type": "number",
          "example": 0.0,
          "format": "decimal"
        }
      }
    },
    "orderLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/orderHeaderLinks"
        },
        {
          "type": "object",
          "required": [
            "self",
            "history",
            "harvest",
            "setMerchantInfo",
            "clearMerchantInfo"
          ],
          "properties": {
            "history": {
              "$ref": "#/definitions/links.GetOrderHistoryLink"
            },
            "harvest": {
              "$ref": "#/definitions/links.HarvestOrderLink"
            },
            "setMerchantInfo": {
              "$ref": "#/definitions/links.SetMerchantOrderInfoLink"
            },
            "clearMerchantInfo": {
              "$ref": "#/definitions/links.ClearMerchantOrderInfoLink"
            }
          }
        }
      ]
    },
    "links.GetOrderHistoryLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/Amazon/1001/00000000000000000000000000000000000000000000000/history",
            "method": "GET"
          }
        }
      ]
    },
    "links.SetMerchantOrderInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/Amazon/1001/00000000000000000000000000000000000000000000000/setMerchantOrderInfo",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "setMerchantOrderInfoRequest"
              }
            }
          }
        }
      ]
    },
    "links.ClearMerchantOrderInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/Amazon/1001/00000000000000000000000000000000000000000000000/clearMerchantOrderInfo",
            "method": "POST"
          }
        }
      ]
    },
    "links.HarvestOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/Amazon/1001/00000000000000000000000000000000000000000000000/harvest",
            "method": "POST"
          }
        }
      ]
    },
    "order": {
      "allOf": [
        {
          "$ref": "#/definitions/orderHeader"
        },
        {
          "type": "object",
          "description": "Describe in details all informations related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails.",
          "required": [
            "marketplaceTechnicalCode",
            "accountId",
            "beezUPOrderId",
            "marketplaceBusinessCode",
            "order_MarketplaceOrderId",
            "order_Status_BeezUPOrderStatus",
            "order_PurchaseUtcDate",
            "order_LastModificationUtcDate",
            "order_MarketplaceLastModificationUtcDate",
            "processing",
            "etag",
            "links",
            "orderItems",
            "transitionLinks"
          ],
          "properties": {
            "links": {
              "$ref": "#/definitions/orderLinks"
            },
            "order_MarketPlaceChannel": {
              "description": "Useful to identify the origin of the order. For example in Amazon.",
              "type": "string",
              "example": "Amazon France"
            },
            "order_TotalTax": {
              "description": "The total tax of this order",
              "type": "number",
              "format": "decimal",
              "example": 0.0
            },
            "order_TotalCommission": {
              "description": "The total commission of this order",
              "type": "number",
              "format": "decimal",
              "example": 0.0
            },
            "order_PaymentMethod": {
              "description": "The payment method of this order",
              "type": "string",
              "example": "1 / 1X"
            },
            "order_PayingUtcDate": {
              "description": "The UTC date of the payment of this order",
              "type": "string",
              "format": "date-time",
              "example": "2017-04-01T13:22:01Z"
            },
            "order_Comment": {
              "description": "The comment associated to this order",
              "type": "string",
              "example": "This is a comment"
            },
            "order_Shipping_Civility": {
              "description": "The civility of the person in the shipping address for this order",
              "type": "string",
              "example": "MRS"
            },
            "order_Shipping_CompanyName": {
              "description": "The company name of the shipping address for this order",
              "type": "string",
              "example": "My Company"
            },
            "order_Shipping_AddressName": {
              "description": "The name of the person in the shipping address for this order",
              "type": "string",
              "example": "Jacques BAUREGARD"
            },
            "order_Shipping_Email": {
              "description": "The email of the person in the shipping address for this order",
              "type": "string",
              "example": "client_000000@manomano.fr"
            },
            "order_Shipping_AddressLine1": {
              "description": "The shipping address line 1 of this order",
              "type": "string",
              "example": "5 rue amÃ©lie"
            },
            "order_Shipping_AddressLine2": {
              "description": "The shipping address line 2 of this order",
              "type": "string",
              "example": "BDR"
            },
            "order_Shipping_AddressLine3": {
              "description": "The shipping address line 3 of this order",
              "type": "string",
              "example": "RDC"
            },
            "order_Shipping_AddressPostalCode": {
              "description": "The shipping address postal code of this order",
              "type": "string",
              "example": "13014"
            },
            "order_Shipping_AddressCity": {
              "description": "The shipping address city of this order",
              "type": "string",
              "example": "Marseille"
            },
            "order_Shipping_AddressStateOrRegion": {
              "description": "The shipping address state or region of this order",
              "type": "string",
              "example": "BDR"
            },
            "order_Shipping_AddressCountryName": {
              "description": "The shipping address country name",
              "type": "string",
              "example": "France"
            },
            "order_Shipping_AddressCountryIsoCodeAlpha2": {
              "description": "The shipping address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)",
              "type": "string",
              "example": "FR"
            },
            "order_Shipping_Phone": {
              "description": "The phone number of the person in the shipping address for this order",
              "type": "string",
              "example": "+33000000041"
            },
            "order_Shipping_MobilePhone": {
              "description": "The mobile phone number of the person in the shipping address for this order",
              "type": "string",
              "example": "+33000000042"
            },
            "order_Shipping_Price": {
              "description": "The shipping price of this order",
              "type": "number",
              "format": "decimal",
              "example": 6.9
            },
            "order_Shipping_Method": {
              "description": "The shipping method of this order",
              "type": "string",
              "example": "DPD Domicile"
            },
            "order_Shipping_ShippingTax": {
              "description": "The shipping tax for this order",
              "type": "number",
              "format": "decimal",
              "example": 0.0
            },
            "order_Shipping_EarliestShipUtcDate": {
              "description": "The UTC date of the earliest ship for this order",
              "type": "string",
              "example": "2017-04-02T21:30:00Z",
              "format": "date-time"
            },
            "order_Shipping_LatestShipUtcDate": {
              "description": "The UTC date of the latest ship for this order",
              "type": "string",
              "format": "date-time",
              "example": "2017-04-30T21:30:00Z"
            },
            "order_Buyer_Identifier": {
              "description": "The buyer identifier for this order",
              "type": "string",
              "example": "1234567890"
            },
            "order_Buyer_Civility": {
              "description": "The buyer civility for this order",
              "type": "string",
              "example": "Marseille"
            },
            "order_Buyer_CompanyName": {
              "description": "The buyer company name for this order",
              "type": "string",
              "example": "Marsillia"
            },
            "order_Buyer_Email": {
              "description": "The email of the buyer for this order",
              "type": "string",
              "example": "client_000000@manomano.fr"
            },
            "order_Buyer_AddressLine1": {
              "description": "The Buyer address line 1 of this order",
              "type": "string",
              "example": "5 rue amÃ©lie"
            },
            "order_Buyer_AddressLine2": {
              "description": "The Buyer address line 2 of this order",
              "type": "string",
              "example": "BDR"
            },
            "order_Buyer_AddressLine3": {
              "description": "The Buyer address line 3 of this order",
              "type": "string",
              "example": "RDC"
            },
            "order_Buyer_AddressPostalCode": {
              "description": "The Buyer address postal code of this order",
              "type": "string",
              "example": "13014"
            },
            "order_Buyer_AddressCity": {
              "description": "The Buyer address city of this order",
              "type": "string",
              "example": "Marseille"
            },
            "order_Buyer_AddressStateOrRegion": {
              "description": "The Buyer address state or region of this order",
              "type": "string",
              "example": "BDR"
            },
            "order_Buyer_AddressCountryName": {
              "description": "The Buyer address country name",
              "type": "string",
              "example": "France"
            },
            "order_Buyer_AddressCountryIsoCodeAlpha2": {
              "description": "The Buyer address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)",
              "type": "string",
              "example": "FR"
            },
            "order_Buyer_Phone": {
              "description": "The phone number of the buyer for this order",
              "type": "string",
              "example": "+33000000101"
            },
            "order_Buyer_MobilePhone": {
              "description": "The mobile phone number of the buyer for this order",
              "type": "string",
              "example": "+33000000042"
            },
            "order_OrderSourceUri": {
              "description": "Technical information: The url to the source of this order. We received this information from the marketplace.\n",
              "type": "string",
              "format": "uri",
              "example": "http://beezupblob.com/order.xml"
            },
            "order_OrderItemsSourceUri": {
              "description": "Technical information: The url to the source of this order items. We received this information from the marketplace.\n",
              "type": "string",
              "format": "uri",
              "example": "http://beezupblob.com/orderItems.xml"
            },
            "orderItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/orderItem"
              }
            },
            "transitionLinks": {
              "$ref": "#/definitions/orderTransitionLinks"
            }
          }
        }
      ]
    },
    "links.ChangeOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "type": "object",
          "properties": {
            "rel": {
              "type": "string",
              "description": "Indicate the relation name related to the link",
              "example": "self"
            }
          }
        },
        {
          "example": {
            "rel": "ShipOrder",
            "href": "/v2/user/marketplaces/orders/Amazon/1001/00000000000000000000000000000000000000000000000/ShipOrder",
            "method": "POST",
            "templated": true,
            "parameters": {
              "If-Match": {
                "in": "header",
                "value": "\"ca071a4580129f932a03971968ffef69\"",
                "required": true
              },
              "testMode": {
                "in": "query",
                "type": "boolean",
                "required": false,
                "value": false
              },
              "userName": {
                "in": "query",
                "type": "string",
                "required": true
              },
              "request": {
                "in": "body",
                "type": "object",
                "schema": "changeOrderRequest",
                "properties": {
                  "order_Shipping_FulfillmentDate": {
                    "required": true,
                    "type": "date-time"
                  },
                  "order_Shipping_ShipperTrackingNumber": {
                    "required": true,
                    "type": "string"
                  },
                  "order_Shipping_CarrierName": {
                    "required": true,
                    "type": "string",
                    "lovRequired": true,
                    "lovLink": {
                      "href": "/v2/user/PriceMinisterCarrierName"
                    }
                  },
                  "order_Shipping_Method": {
                    "required": true,
                    "type": "string",
                    "lovRequired": false,
                    "lovLink": {
                      "href": "/v2/user/ShippingMethod_PriceMinister"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "orderTransitionLinks": {
      "description": "Contains the authorized change actions for an order",
      "type": "array",
      "items": {
        "$ref": "#/definitions/links.ChangeOrderLink"
      },
      "example": [
        {
          "rel": "ShipOrder",
          "href": "/v2/user/marketplaces/orders/Amazon/1001/00000000000000000000000000000000000000000000000/ShipOrder",
          "method": "POST",
          "templated": true,
          "parameters": {
            "If-Match": {
              "in": "header",
              "value": "\"ca071a4580129f932a03971968ffef69\"",
              "required": true
            },
            "testMode": {
              "in": "query",
              "type": "boolean",
              "required": false,
              "value": false
            },
            "userName": {
              "in": "query",
              "type": "string",
              "required": true
            },
            "request": {
              "in": "body",
              "type": "object",
              "schema": "changeOrderRequest",
              "properties": {
                "order_Shipping_FulfillmentDate": {
                  "required": true,
                  "type": "date-time"
                },
                "order_Shipping_ShipperTrackingNumber": {
                  "required": true,
                  "type": "string"
                },
                "order_Shipping_CarrierName": {
                  "required": true,
                  "type": "string",
                  "lovRequired": true,
                  "lovLink": {
                    "href": "/v2/user/PriceMinisterCarrierName"
                  }
                },
                "order_Shipping_Method": {
                  "required": true,
                  "type": "string",
                  "lovRequired": false,
                  "lovLink": {
                    "href": "/v2/user/ShippingMethod_PriceMinister"
                  }
                }
              }
            }
          }
        },
        {
          "rel": "CancelOrder",
          "href": "/v2/user/marketplaces/orders/Amazon/1001/00000000000000000000000000000000000000000000000/CancelOrder",
          "method": "POST",
          "templated": true,
          "parameters": {
            "If-Match": {
              "in": "header",
              "value": "\"ca071a4580129f932a03971968ffef69\"",
              "required": true
            },
            "testMode": {
              "in": "query",
              "type": "boolean",
              "required": false,
              "value": false
            },
            "userName": {
              "in": "query",
              "type": "string",
              "required": true
            },
            "request": {
              "in": "body",
              "type": "object",
              "schema": "changeOrderRequest",
              "properties": {
                "order_Cancel_Reason": {
                  "required": true,
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "orderIndex": {
      "type": "object",
      "required": [
        "links",
        "lovLinks"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/orderIndexLinks"
        },
        "lovLinks": {
          "$ref": "#/definitions/orderIndexLovLinks"
        }
      }
    },
    "links.GetOrderIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders",
            "method": "GET"
          }
        }
      ]
    },
    "orderIndexLinks": {
      "description": "Gives you all entry point operations you can do on this API",
      "type": "object",
      "required": [
        "self",
        "status",
        "harvest",
        "setMerchantInfos",
        "clearMerchantInfos",
        "export",
        "autoTransitions",
        "orders",
        "lightOrders"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetOrderIndexLink"
        },
        "status": {
          "$ref": "#/definitions/links.GetMarketplaceAccountsSynchronizationLink"
        },
        "harvest": {
          "$ref": "#/definitions/links.HarvestAllLink"
        },
        "setMerchantInfos": {
          "$ref": "#/definitions/links.SetMerchantOrderInfoListLink"
        },
        "clearMerchantInfos": {
          "$ref": "#/definitions/links.ClearMerchantOrderInfoListLink"
        },
        "export": {
          "$ref": "#/definitions/links.ExportOrdersLink"
        },
        "autoTransitions": {
          "$ref": "#/definitions/links.GetAutomaticTransitionsLink"
        },
        "exportations": {
          "$ref": "#/definitions/links.GetOrderExportationsLink"
        },
        "orders": {
          "$ref": "#/definitions/links.GetOrderListFullLink"
        },
        "lightOrders": {
          "$ref": "#/definitions/links.GetOrderListLightLink"
        }
      }
    },
    "orderIndexLovLinks": {
      "description": "Gives you all the LOV to get the translations realated to operation name, codes, property names and statuses.",
      "type": "object",
      "required": [
        "orderChangeBusinessOperationType",
        "orderState",
        "orderProperty",
        "orderPropertyPosted"
      ],
      "properties": {
        "orderChangeBusinessOperationType": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "orderState": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "orderProperty": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "orderPropertyPosted": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        }
      }
    },
    "links.GetOrderListFullLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/list/full",
            "method": "POST",
            "properties": {
              "Accept-Encoding": {
                "in": "header",
                "required": true,
                "type": "array",
                "schema": "string"
              },
              "request": {
                "in": "body",
                "required": false,
                "type": "object",
                "schema": "orderListRequest"
              }
            }
          }
        }
      ]
    },
    "links.GetOrderListLightLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/list/light",
            "method": "POST",
            "properties": {
              "request": {
                "in": "body",
                "required": false,
                "type": "object",
                "schema": "orderListRequest"
              }
            }
          }
        }
      ]
    },
    "links.GetAutomaticTransitionsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/autoTransitions",
            "method": "GET"
          }
        }
      ]
    },
    "links.ConfigureAutomaticTransitionsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/autoTransitions",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "request": true,
                "schema": "configureAutomaticTransitionRequest"
              }
            }
          }
        }
      ]
    },
    "orderListLinks": {
      "description": "The list of actions you can do from the order list response",
      "type": "object",
      "required": [
        "harvest",
        "setMerchantInfos",
        "clearMerchantInfos",
        "export",
        "status"
      ],
      "properties": {
        "harvest": {
          "$ref": "#/definitions/links.HarvestAllLink"
        },
        "setMerchantInfos": {
          "$ref": "#/definitions/links.SetMerchantOrderInfoListLink"
        },
        "clearMerchantInfos": {
          "$ref": "#/definitions/links.ClearMerchantOrderInfoListLink"
        },
        "export": {
          "$ref": "#/definitions/links.ExportOrdersLink"
        },
        "status": {
          "$ref": "#/definitions/links.GetMarketplaceAccountsSynchronizationLink"
        }
      }
    },
    "links.GetMarketplaceAccountsSynchronizationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/status",
            "method": "GET"
          }
        }
      ]
    },
    "orderListLightLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/orderListLinks"
        },
        {
          "type": "object",
          "required": [
            "self",
            "harvest",
            "setMerchantInfos",
            "clearMerchantInfos",
            "export",
            "status"
          ],
          "properties": {
            "self": {
              "$ref": "#/definitions/links.GetOrderListLightLink"
            }
          }
        }
      ]
    },
    "orderListFullLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/orderListLinks"
        },
        {
          "type": "object",
          "required": [
            "self",
            "harvest",
            "setMerchantInfos",
            "clearMerchantInfos",
            "export",
            "status"
          ],
          "properties": {
            "self": {
              "$ref": "#/definitions/links.GetOrderListFullLink"
            }
          }
        }
      ]
    },
    "links.SetMerchantOrderInfoListLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/setMerchantOrderInfos",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "setMerchantOrderInfoRequest"
              }
            }
          }
        }
      ]
    },
    "links.ClearMerchantOrderInfoListLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/clearMerchantOrderInfos",
            "method": "POST"
          }
        }
      ]
    },
    "links.HarvestAllLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/marketplaces/orders/harvest",
            "method": "POST"
          }
        }
      ]
    },
    "orderListLight": {
      "description": "The order list with minimum information we have from the orders.\\\nThe paginationResult properties can be null if the list is empty. \n",
      "type": "object",
      "required": [
        "orders",
        "links"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderHeader"
          }
        },
        "links": {
          "$ref": "#/definitions/orderListLightLinks"
        }
      }
    },
    "orderListFull": {
      "description": "The order list with all information we have from the orders and its items.\\\nThe paginationResult properties can be null if the list is empty. \n",
      "type": "object",
      "required": [
        "orders",
        "links"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order"
          }
        },
        "links": {
          "$ref": "#/definitions/orderListFullLinks"
        }
      }
    },
    "beezUPOrderStatus": {
      "type": "string",
      "description": "BeezUP order status. Unified for all marketplaces.",
      "example": "Shipped",
      "x-lov": "BeezUPOrderState"
    },
    "marketplaceOrderStatus": {
      "description": "The marketplace order state",
      "type": "string",
      "example": "In_progress_3"
    },
    "marketplaceOrderId": {
      "description": "The order marketplace identifier",
      "type": "string",
      "example": "AMAZON12345"
    },
    "orderHistory": {
      "description": "Describe the history related to an order",
      "type": "object",
      "properties": {
        "changeOrderReportings": {
          "description": "The list of change order operation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/changeOrderReporting"
          }
        },
        "harvestOrderReportings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/harvestOrderReporting"
          }
        },
        "lastModificationUtcDate": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "sourceType": {
      "description": "Indicates the origin of the operation",
      "type": "string",
      "enum": [
        "Api",
        "Go"
      ],
      "example": "Api"
    },
    "executionUUID": {
      "description": "The execution identifier",
      "format": "uuid",
      "type": "string",
      "example": "8D4176FA78D5A7Fffa91e9edc694ec5858be9a1b109507c"
    },
    "changeOrderReporting": {
      "description": "The reporting related to a change order operation",
      "type": "object",
      "properties": {
        "executionUUID": {
          "$ref": "#/definitions/executionUUID"
        },
        "changeOrderType": {
          "$ref": "#/definitions/businessOperationType"
        },
        "sourceType": {
          "$ref": "#/definitions/sourceType"
        },
        "sourceUserId": {
          "$ref": "#/definitions/BeezUP.Common.UserId"
        },
        "sourceUserName": {
          "type": "string",
          "example": "Guillaume Tell"
        },
        "creationUtcDate": {
          "description": "The creation UTC date of the execution",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:03Z"
        },
        "processingStatus": {
          "description": "The processing status of the execution",
          "type": "string",
          "example": "Done"
        },
        "lastUpdateUtcDate": {
          "description": "The last update UTC date of the execution",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:05Z"
        },
        "errorMessage": {
          "description": "The error message during the execution",
          "type": "string",
          "example": "This is an error message"
        },
        "ipAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        },
        "testMode": {
          "description": "This operation was a test",
          "type": "boolean",
          "example": false
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "harvestOrderReporting": {
      "description": "The reporting related to a harvest order operation",
      "type": "object",
      "properties": {
        "executionUUID": {
          "$ref": "#/definitions/executionUUID"
        },
        "creationUtcDate": {
          "description": "The creation UTC date of the execution",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:03Z"
        },
        "processingStatus": {
          "description": "The processing status of the execution",
          "type": "string",
          "example": "Done"
        },
        "lastUpdateUtcDate": {
          "description": "The last update UTC date of the execution",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:05Z"
        },
        "errorMessage": {
          "description": "The warning message during the execution",
          "type": "string",
          "example": "This is an error message"
        },
        "warningMessage": {
          "description": "The warning message during the execution",
          "type": "string",
          "example": "This is a warning"
        },
        "beezUPStatus": {
          "$ref": "#/definitions/beezUPOrderStatus"
        },
        "marketplaceStatus": {
          "description": "The order marketplace status",
          "type": "string",
          "example": "In_progress_3"
        },
        "beezUPForcedStatus": {
          "description": "The marketplace order status forced by BeezUP during the order change oepration. This could happend when there is no status on the marketplace side.",
          "type": "string",
          "example": "In_progress_3"
        }
      }
    },
    "changeOrderListRequest": {
      "type": "object",
      "description": "Contains all change order operations you want to make",
      "required": [
        "changeOrders"
      ],
      "properties": {
        "changeOrders": {
          "type": "array",
          "description": "The change order operations",
          "minLength": 1,
          "maxLength": 100,
          "items": {
            "$ref": "#/definitions/changeOrderListRequestItem"
          }
        }
      }
    },
    "changeOrderListRequestItem": {
      "type": "object",
      "description": "Contains the order identifier and the change order request",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifierWithETag"
        },
        "changeOrderRequest": {
          "$ref": "#/definitions/changeOrderRequest"
        }
      }
    },
    "orderIdentifierWithETag": {
      "allOf": [
        {
          "$ref": "#/definitions/orderIdentifier"
        },
        {
          "type": "object",
          "required": [
            "marketplaceTechnicalCode",
            "accountId",
            "beezUPOrderId",
            "etag"
          ],
          "properties": {
            "etag": {
              "$ref": "#/definitions/etag"
            }
          }
        }
      ]
    },
    "changeOrderRequest": {
      "type": "object",
      "description": "All properties with the prefix order_ are translated in the list of values /user/lov#OrderMetaInfoPosted",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "order_Shipping_ShipperTrackingNumber": "1H01845163783",
        "order_Shipping_ShippingUrl": "https://trackingpackage.com?number=1H01845163783",
        "order_Shipping_CarrierName": "La poste",
        "order_Shipping_FulfillmentDate": "2014-09-23T09:58:00Z",
        "order_Shipping_EstimatedDeliveryDate": "2014-09-24T09:58:00Z"
      }
    },
    "batchOrderOperationResponse": {
      "description": "The response given by the batch operation",
      "type": "object",
      "required": [
        "operations"
      ],
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderOperationResponse"
          }
        }
      }
    },
    "orderOperationResponse": {
      "description": "The response given by the batch operation for an order",
      "type": "object",
      "required": [
        "order",
        "success",
        "status"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "success": {
          "type": "boolean",
          "description": "Indicates if the operation succeed or not",
          "example": true
        },
        "status": {
          "type": "integer",
          "description": "Indicates the http status corresponding to the individual operation",
          "example": 204
        },
        "errors": {
          "description": "The error list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.UserErrorMessage"
          }
        }
      }
    },
    "links.AnalyticsIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetTrackingStatusLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/tracking/status",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetStoreTrackingStatusLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/tracking/status",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetStoreTrackedClicksLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/tracking/clicks",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetStoreTrackedOrdersLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/tracking/orders",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetStoreTrackedExternalOrdersLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/tracking/externalorders",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetStoreReportByDayLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/reports/byday",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "reportByDayRequest"
              }
            }
          }
        }
      ]
    },
    "links.GetStoreReportByChannelLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/reports/bychannel",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "reportByChannelRequest"
              }
            }
          }
        }
      ]
    },
    "links.GetStoreReportByCategoryLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/reports/bycategory",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "reportByCategoryRequest"
              }
            }
          }
        }
      ]
    },
    "links.GetStoreReportByProductLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/reports/byproduct",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "reportByProductRequest"
              }
            }
          }
        }
      ]
    },
    "links.OptimiseLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/optimisations/enable",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "optimiseRequest",
                "value": {
                  "channelId": "2dc136a7-0d3d-4cc9-a825-a28a42c53e28",
                  "beginPeriodUtcDate": "2006-11-20T00:00:00Z",
                  "endPeriodUtcDate": "2006-12-20T00:00:00Z",
                  "categoryFilter": {
                    "categoryPath": [
                      "Home",
                      "Bedroom"
                    ]
                  },
                  "indicatorFilters": [
                    {
                      "indicator": "Cost",
                      "operatorName": "Equals",
                      "value": 10.42
                    }
                  ],
                  "advancedFilters": {
                    "marginType": "Global",
                    "globalmarginPercent": 10,
                    "linkClickToOrderType": "OnClickDate",
                    "linkClickToOrderMaxDay": 5,
                    "onlyPaymentValidatedOrders": true,
                    "onlyDirectSales": true,
                    "performanceIndicatorFormula": {
                      "firstParameter": "Cost",
                      "operatorName": "Multiply",
                      "secondParamter": "Turnover",
                      "thirdParameter": 100
                    }
                  },
                  "pageSize": 100,
                  "pageNumber": 1,
                  "productState": "All",
                  "productFilters": {
                    "sku": "M1234",
                    "title": "RefrigÃ©rateur",
                    "additionalProductFilters": [
                      {
                        "columnId": "672644c7-5bd0-4e25-88c1-1f732bda5e4c",
                        "operatorName": "GreaterTo",
                        "values": [
                          100
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      ]
    },
    "links.OptimiseByProductLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/optimisations/byProduct/6d469a54-8426-4855-abc2-9e062e2056b9/enable",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "â€‹array",
                "value": [
                  "a2d38563-50f0-43f1-be2b-b16e7ec4f007"
                ]
              }
            }
          }
        }
      ]
    },
    "links.OptimiseByCategoryLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/optimisations/byCategory/4c376178-25b4-4656-a86e-e3bd3a25b139/enable",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "â€‹array",
                "value": [
                  "a2d38563-50f0-43f1-be2b-b16e7ec4f007"
                ]
              }
            }
          }
        }
      ]
    },
    "links.OptimiseByChannelLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/optimisations/byChannel/a2d38563-50f0-43f1-be2b-b16e7ec4f007/enable",
            "method": "POST"
          }
        }
      ]
    },
    "links.GetReportFiltersLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/reports/filters",
            "method": "GET"
          }
        }
      ]
    },
    "links.SaveReportFilterLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/reports/filters/{reportFilterId}",
            "method": "PUT",
            "templated": true,
            "parameters": [
              {
                "name": "reportFilterId",
                "type": "string",
                "in": "path"
              }
            ]
          }
        }
      ]
    },
    "links.DeleteReportFilterLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/8f95eb1a-3691-4750-950d-a13c4a8a9bcc/reports/filters/fb19c53c-2f63-4262-9d94-2d7faa500acd",
            "method": "DELETE"
          }
        }
      ]
    },
    "links.CreateRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "createRuleRequest",
                "value": {
                  "optimisationActionName": "reenable",
                  "ruleName": "My rule",
                  "reportFilterId": "fb19c53c-2f63-4262-9d94-2d7faa500acd",
                  "startUtcDate": "2016-08-29T09:12:33.001Z",
                  "endUtcDate": "2017-09-30T10:42:40.001Z"
                }
              }
            }
          }
        }
      ]
    },
    "links.GetRulesExecutionsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/executions",
            "method": "GET"
          }
        }
      ]
    },
    "links.RunRulesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/run",
            "method": "POST"
          }
        }
      ]
    },
    "links.GetRulesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetReportFilterLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/reports/filters/fb19c53c-2f63-4262-9d94-2d7faa500acd",
            "method": "GET"
          }
        }
      ]
    },
    "links.RunRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/c38006b4-29d0-4b8a-978b-701a0b12d5a8/run",
            "method": "POST"
          }
        }
      ]
    },
    "links.GetRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/c38006b4-29d0-4b8a-978b-701a0b12d5a8",
            "method": "GET"
          }
        }
      ]
    },
    "links.DeleteRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/c38006b4-29d0-4b8a-978b-701a0b12d5a8",
            "method": "DELETE"
          }
        }
      ]
    },
    "links.MoveUpRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/c38006b4-29d0-4b8a-978b-701a0b12d5a8/moveup",
            "method": "POST"
          }
        }
      ]
    },
    "links.MoveDownRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/c38006b4-29d0-4b8a-978b-701a0b12d5a8/movedown",
            "method": "POST"
          }
        }
      ]
    },
    "links.EnableRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/c38006b4-29d0-4b8a-978b-701a0b12d5a8/enable",
            "method": "POST"
          }
        }
      ]
    },
    "links.DisableRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/c38006b4-29d0-4b8a-978b-701a0b12d5a8/disable",
            "method": "POST"
          }
        }
      ]
    },
    "links.UpdateRuleLink": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        {
          "example": {
            "href": "/v2/user/analytics/10af9486-e28e-47ab-b045-e13e4acd55c3/rules/c38006b4-29d0-4b8a-978b-701a0b12d5a8",
            "method": "PATCH",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "updateRuleRequest",
                "value": {
                  "ruleName": "My Rule Renamed",
                  "startUtcDate": "2016-08-29T09:12:33.001Z",
                  "endUtcDate\"": "2016-08-29T09:12:33.001Z"
                }
              }
            }
          }
        }
      ]
    },
    "analyticsIndexLovLinks": {
      "type": "object",
      "properties": {
        "performanceIndicatorFormulaParameterTypeLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "performanceIndicatorLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "storeOptimisationRuleExecutionStatusLov": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        }
      }
    },
    "analyticsIndexLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.AnalyticsIndexLink"
        },
        "trackingStatus": {
          "$ref": "#/definitions/links.GetTrackingStatusLink"
        }
      }
    },
    "analyticsIndex": {
      "type": "object",
      "description": "The analytics API operation index.",
      "required": [
        "links",
        "stores"
      ],
      "properties": {
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/analyticsStoreIndex"
          }
        },
        "links": {
          "$ref": "#/definitions/analyticsIndexLinks"
        },
        "lovLinks": {
          "$ref": "#/definitions/analyticsIndexLovLinks"
        }
      }
    },
    "analyticsStoreIndexLinks": {
      "type": "object",
      "required": [
        "self",
        "trackingStatus",
        "trackedClicks",
        "trackedOrders",
        "reportFilters"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.AnalyticsIndexLink"
        },
        "trackingStatus": {
          "$ref": "#/definitions/links.GetStoreTrackingStatusLink"
        },
        "trackedClicks": {
          "$ref": "#/definitions/links.GetStoreTrackedClicksLink"
        },
        "trackedOrders": {
          "$ref": "#/definitions/links.GetStoreTrackedOrdersLink"
        },
        "trackedExternalOrders": {
          "$ref": "#/definitions/links.GetStoreTrackedExternalOrdersLink"
        },
        "reportFilters": {
          "$ref": "#/definitions/links.GetReportFiltersLink"
        },
        "reportByDay": {
          "$ref": "#/definitions/links.GetStoreReportByDayLink"
        },
        "reportByChannel": {
          "$ref": "#/definitions/links.GetStoreReportByChannelLink"
        },
        "reportByCategory": {
          "$ref": "#/definitions/links.GetStoreReportByCategoryLink"
        },
        "reportByProduct": {
          "$ref": "#/definitions/links.GetStoreReportByProductLink"
        },
        "optimise": {
          "$ref": "#/definitions/links.OptimiseLink"
        },
        "optimiseByChannel": {
          "$ref": "#/definitions/links.OptimiseByChannelLink"
        },
        "optimiseByCategory": {
          "$ref": "#/definitions/links.OptimiseByCategoryLink"
        },
        "optimiseByProduct": {
          "$ref": "#/definitions/links.OptimiseByProductLink"
        },
        "rules": {
          "$ref": "#/definitions/links.GetRulesLink"
        }
      }
    },
    "analyticsStoreIndex": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/analyticsStoreIndexLinks"
        }
      }
    },
    "productStateFilter": {
      "type": "string",
      "description": "You can filter on the product state.",
      "enum": [
        "All",
        "Enabled",
        "Disabled"
      ],
      "default": "All",
      "example": "All"
    },
    "productColumnsToDisplay": {
      "type": "array",
      "minItems": 0,
      "maxItems": 1,
      "items": {
        "$ref": "#/definitions/BeezUP.Common.CatalogColumnId"
      },
      "example": [
        "4b460e31-3d1f-4117-922d-b159a64ec1d2"
      ]
    },
    "reportByProductRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/reportFilterCommonParameters"
        },
        {
          "$ref": "#/definitions/paginationRequestParameters"
        },
        {
          "type": "object",
          "required": [
            "beginPeriodUtcDate",
            "endPeriodUtcDate",
            "advancedFilters",
            "productState"
          ],
          "properties": {
            "productColumnsToDisplay": {
              "$ref": "#/definitions/productColumnsToDisplay"
            },
            "productState": {
              "$ref": "#/definitions/productStateFilter"
            },
            "productFilters": {
              "$ref": "#/definitions/BeezUP.Common.ProductFilters"
            }
          }
        }
      ]
    },
    "copyOptimisationRequest": {
      "type": "object",
      "description": "Copy the optimisation between 2 channels",
      "required": [
        "channelIdSource",
        "channelIdTarget",
        "keepExistingOptimisation"
      ],
      "properties": {
        "channelIdSource": {
          "$ref": "#/definitions/BeezUP.Common.ChannelId"
        },
        "channelIdTarget": {
          "$ref": "#/definitions/BeezUP.Common.ChannelId"
        },
        "keepExistingOptimisation": {
          "type": "boolean",
          "description": "If true the existing optimisation will be kept",
          "example": false
        }
      }
    },
    "optimiseRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/reportFilterCommonParameters"
        },
        {
          "$ref": "#/definitions/paginationRequestParameters"
        },
        {
          "type": "object",
          "required": [
            "beginPeriodUtcDate",
            "endPeriodUtcDate",
            "advancedFilters",
            "reportType"
          ],
          "properties": {
            "productState": {
              "$ref": "#/definitions/productStateFilter"
            },
            "reportType": {
              "$ref": "#/definitions/reportType"
            },
            "productFilters": {
              "$ref": "#/definitions/BeezUP.Common.ProductFilters"
            }
          }
        }
      ]
    },
    "reportByCommonResponseLinks": {
      "type": "object",
      "properties": {
        "enableAllProducts": {
          "$ref": "#/definitions/links.OptimiseLink"
        },
        "disableAllProducts": {
          "$ref": "#/definitions/links.OptimiseLink"
        }
      }
    },
    "reportByChannelResponseLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/reportByCommonResponseLinks"
        }
      ]
    },
    "reportByCategoryResponseLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/reportByCommonResponseLinks"
        }
      ]
    },
    "reportByProductResponseLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/reportByCommonResponseLinks"
        }
      ]
    },
    "reportByChannelResponse": {
      "type": "object",
      "required": [
        "currencyCode",
        "paginationResult",
        "channels",
        "links"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportByChannel"
          }
        },
        "links": {
          "$ref": "#/definitions/reportByChannelResponseLinks"
        }
      }
    },
    "reportByCategoryResponse": {
      "type": "object",
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportByCategory"
          }
        },
        "links": {
          "$ref": "#/definitions/reportByCategoryResponseLinks"
        }
      }
    },
    "reportByProductResponse": {
      "type": "object",
      "required": [
        "paginationResult",
        "currencyCode",
        "products",
        "links"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportByProduct"
          }
        },
        "links": {
          "$ref": "#/definitions/reportByProductResponseLinks"
        }
      }
    },
    "reportFilterPeriodType": {
      "description": "Indicates the period type we want use for the report filter",
      "type": "string",
      "enum": [
        "Custom",
        "Yesterday",
        "Last7Days",
        "LastWeek",
        "ThisMonth",
        "Last30Days",
        "LastMonth",
        "Last60Days",
        "Last90Days",
        "Last3Months"
      ]
    },
    "reportFilterCommonParameters": {
      "description": "Contains common filter parameters",
      "type": "object",
      "required": [
        "periodType",
        "advancedFilters"
      ],
      "properties": {
        "channelId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelId"
        },
        "periodType": {
          "$ref": "#/definitions/reportFilterPeriodType"
        },
        "beginPeriodUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The begin date period you want to get the report. It's required only in case of custom period type !",
          "example": "2006-11-20T00:00:00Z"
        },
        "endPeriodUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end date period you want to get the report. It's required only in case of custom period type !",
          "example": "2006-12-20T00:00:00Z"
        },
        "categoryFilter": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryFilter"
        },
        "indicatorFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportIndicatorFilter"
          },
          "example": [
            {
              "indicator": "Cost",
              "operatorName": "Equals",
              "value": 10.42
            }
          ]
        },
        "advancedFilters": {
          "$ref": "#/definitions/reportAdvancedFilters"
        }
      }
    },
    "reportByCategoryRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/reportFilterCommonParameters"
        },
        {
          "$ref": "#/definitions/paginationRequestParameters"
        }
      ]
    },
    "paginationRequestParameters": {
      "type": "object",
      "properties": {
        "pageSize": {
          "$ref": "#/definitions/BeezUP.Common.PageSize"
        },
        "pageNumber": {
          "$ref": "#/definitions/BeezUP.Common.PageNumber"
        }
      }
    },
    "reportByChannelRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/reportFilterCommonParameters"
        },
        {
          "$ref": "#/definitions/paginationRequestParameters"
        }
      ]
    },
    "reportIndicatorFilterOperatorName": {
      "type": "string",
      "description": "Indicates the operator you want to apply on this indicator",
      "enum": [
        "Equals",
        "GreaterTo",
        "LowerTo"
      ],
      "example": "Equals"
    },
    "reportIndicatorFilter": {
      "type": "object",
      "required": [
        "indicator",
        "operatorName",
        "value"
      ],
      "properties": {
        "indicator": {
          "$ref": "#/definitions/performanceIndicatorType"
        },
        "operatorName": {
          "$ref": "#/definitions/reportIndicatorFilterOperatorName"
        },
        "value": {
          "type": "number",
          "description": "Indicates the filter value to apply on this indicator",
          "example": 10.42
        }
      }
    },
    "performanceIndicatorType": {
      "type": "string",
      "description": "Indicate on which indicator or value you want to make your formula",
      "enum": [
        "Cost",
        "Turnover",
        "Margin",
        "OrderCount",
        "ClickCount",
        "TotalSales",
        "SoldProductCount",
        "DisabledProductCount",
        "EnabledProductCount"
      ],
      "example": "Cost"
    },
    "performanceIndicatorFormulaParameterType": {
      "type": "string",
      "description": "Indicate on which indicator or value you want to make your formula",
      "enum": [
        "Cost",
        "Turnover",
        "Margin",
        "TunoverMinusCost",
        "MarginMinusCost",
        "OrderCount",
        "ClickCount",
        "SoldProductCount",
        "One"
      ],
      "example": "Cost"
    },
    "reportByDayRequest": {
      "required": [
        "beginPeriodUtcDate",
        "endPeriodUtcDate"
      ],
      "type": "object",
      "properties": {
        "channelIds": {
          "description": "Indicate the channel identifier list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.ChannelId"
          },
          "example": [
            "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
          ]
        },
        "productId": {
          "$ref": "#/definitions/BeezUP.Common.ProductId"
        },
        "catalogCategoryId": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryId"
        },
        "beginPeriodUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The begin date period you want to get the report",
          "example": "2006-11-20T00:00:00Z"
        },
        "endPeriodUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end date period you want to get the report.",
          "example": "2006-12-20T00:00:00Z"
        },
        "advancedFilters": {
          "$ref": "#/definitions/reportAdvancedFilters"
        }
      }
    },
    "marginType": {
      "type": "string",
      "enum": [
        "Tracker",
        "Global"
      ],
      "default": "Tracker",
      "example": "Global"
    },
    "linkClickToOrderType": {
      "type": "string",
      "enum": [
        "OnPurchaseDate",
        "OnClickDate"
      ],
      "default": "OnPurchaseDate",
      "example": "OnClickDate"
    },
    "reportAdvancedFilters": {
      "type": "object",
      "required": [
        "marginType",
        "linkClickToOrderType",
        "onlyPaymentValidatedOrders",
        "onlyDirectSales",
        "performanceIndicatorFormula"
      ],
      "properties": {
        "marginType": {
          "$ref": "#/definitions/marginType"
        },
        "globalMarginPercent": {
          "type": "integer",
          "description": "If the margin type is 'Global', indicate the percentage of sale price.",
          "minimum": 0,
          "maximum": 100,
          "example": 10
        },
        "linkClickToOrderType": {
          "$ref": "#/definitions/linkClickToOrderType"
        },
        "linkClickToOrderMaxDay": {
          "type": "integer",
          "description": "If the linkOrderType is OnClickDate, indicate the max day to search the click from the order",
          "minimum": 0,
          "maximum": 180,
          "default": 30,
          "example": 5
        },
        "onlyPaymentValidatedOrders": {
          "type": "boolean",
          "description": "If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not.",
          "default": false,
          "example": true
        },
        "onlyDirectSales": {
          "type": "boolean",
          "description": "If true, you will get only direct sales. Otherwise the indirect sales will be included.",
          "default": false,
          "example": true
        },
        "performanceIndicatorFormula": {
          "$ref": "#/definitions/performanceIndicatorFormula"
        }
      }
    },
    "reportByDayResponse": {
      "type": "object",
      "required": [
        "currencyCode",
        "globalPerformanceIndicators",
        "days"
      ],
      "properties": {
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "globalPerformanceIndicators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/globalPerformanceIndicatorByChannel"
          }
        },
        "days": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportByDay"
          }
        }
      }
    },
    "globalPerformanceIndicatorByChannel": {
      "type": "object",
      "required": [
        "channel",
        "globalPerformanceIndicator"
      ],
      "properties": {
        "channel": {
          "$ref": "#/definitions/BeezUP.Common.ChannelBasicInfo"
        },
        "globalPerformanceIndicator": {
          "type": "number",
          "description": "Indicates the global performance indicator for this channel",
          "example": 10.42
        }
      }
    },
    "reportByDay": {
      "type": "object",
      "required": [
        "day",
        "allChannels",
        "byChannels"
      ],
      "properties": {
        "day": {
          "type": "string",
          "format": "date",
          "example": "2017-04-23T18:25:43.511Z"
        },
        "allChannels": {
          "$ref": "#/definitions/reportByDayAllChannels"
        },
        "byChannels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportByDayByChannel"
          }
        }
      }
    },
    "reportByProductOneChannelLinks": {
      "type": "object",
      "description": "If the report concerned one product for one channel the channel catalog product info will give you all you need to enable or disable the product.",
      "required": [
        "productInfo"
      ],
      "properties": {
        "productInfo": {
          "$ref": "#/definitions/links.GetChannelCatalogProductInfoLink"
        }
      }
    },
    "reportByProductAllChannelsLinks": {
      "type": "object",
      "required": [
        "enableProductForAllChannels",
        "disableProductForAllChannels"
      ],
      "properties": {
        "enableProductForAllChannels": {
          "$ref": "#/definitions/links.OptimiseByProductLink"
        },
        "disableProductForAllChannels": {
          "$ref": "#/definitions/links.OptimiseByProductLink"
        }
      }
    },
    "reportByProductLinks": {
      "description": "Depending if the report concerned multiple channels or one channel.",
      "type": "object",
      "properties": {
        "oneChannelLinks": {
          "$ref": "#/definitions/reportByProductOneChannelLinks"
        },
        "allChannelsLinks": {
          "$ref": "#/definitions/reportByProductAllChannelsLinks"
        }
      }
    },
    "reportByCategoryLinks": {
      "type": "object",
      "properties": {
        "enableProducts": {
          "$ref": "#/definitions/links.OptimiseByCategoryLink"
        },
        "disableProducts": {
          "$ref": "#/definitions/links.OptimiseByCategoryLink"
        }
      }
    },
    "reportByChannelLinks": {
      "type": "object",
      "properties": {
        "enableProducts": {
          "$ref": "#/definitions/links.OptimiseByChannelLink"
        },
        "disableProducts": {
          "$ref": "#/definitions/links.OptimiseByChannelLink"
        }
      }
    },
    "reportByProduct": {
      "type": "object",
      "required": [
        "product",
        "enabledOnChannelCount",
        "channelCount",
        "clickCount",
        "cost",
        "orderCount",
        "turnOver",
        "margin",
        "performanceIndicator",
        "totalSales",
        "soldProductCount",
        "links"
      ],
      "properties": {
        "product": {
          "$ref": "#/definitions/BeezUP.Common.ProductBasicInfo"
        },
        "enabledOnChannelCount": {
          "type": "integer",
          "description": "The count of channel where this product is enabled",
          "example": 1
        },
        "channelCount": {
          "type": "integer",
          "description": "The channel count where this product can be enabled",
          "example": 2
        },
        "clickCount": {
          "type": "integer",
          "description": "The click count for this product",
          "example": 1234
        },
        "cost": {
          "type": "number",
          "description": "The cost for this product",
          "example": 101.42
        },
        "orderCount": {
          "type": "integer",
          "description": "The order count for this product",
          "example": 234.42
        },
        "turnOver": {
          "type": "number",
          "description": "The Turnover for this product",
          "example": 42.01
        },
        "margin": {
          "type": "number",
          "description": "The margin for this product",
          "example": 50.0
        },
        "performanceIndicator": {
          "type": "number",
          "description": "The performance indicator based on the performance indicator formula indicated in the request for this product",
          "example": 10.12
        },
        "totalSales": {
          "type": "number",
          "description": "The total sales related to this product",
          "example": 234.42
        },
        "soldProductCount": {
          "type": "integer",
          "description": "The product sold count count for this product",
          "example": 2
        },
        "links": {
          "$ref": "#/definitions/reportByProductLinks"
        }
      }
    },
    "reportByCategory": {
      "type": "object",
      "required": [
        "catalogCategoryId",
        "enabledProductCount",
        "catalogProductCount",
        "clickCount",
        "cost",
        "orderCount",
        "turnOver",
        "margin",
        "performanceIndicator",
        "totalSales",
        "soldProductCount",
        "links"
      ],
      "properties": {
        "catalogCategoryId": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryId"
        },
        "catalogCategoryPath": {
          "$ref": "#/definitions/BeezUP.Common.CatalogCategoryPath"
        },
        "enabledProductCount": {
          "type": "integer",
          "description": "The enabled product count for this category",
          "example": 101
        },
        "catalogProductCount": {
          "type": "integer",
          "description": "The catalog product count related to this category",
          "example": 101
        },
        "clickCount": {
          "type": "integer",
          "description": "The click count for this category",
          "example": 1001
        },
        "cost": {
          "type": "number",
          "description": "The cost for this category",
          "example": 12.42
        },
        "orderCount": {
          "type": "integer",
          "description": "The order count for this category",
          "example": 25.33
        },
        "turnOver": {
          "type": "number",
          "description": "The Turnover for this category",
          "example": 25.33
        },
        "margin": {
          "type": "number",
          "description": "The margin for this category",
          "example": 3.33
        },
        "performanceIndicator": {
          "type": "number",
          "description": "The performance indicator based on the performance indicator formula indicated in the request for this category",
          "example": 25.33
        },
        "totalSales": {
          "type": "number",
          "description": "The total sales related to this category",
          "example": 234.42
        },
        "soldProductCount": {
          "type": "integer",
          "description": "The product sold count count for this category",
          "example": 2
        },
        "links": {
          "$ref": "#/definitions/reportByCategoryLinks"
        }
      }
    },
    "reportByChannel": {
      "type": "object",
      "required": [
        "channel",
        "enabledProductCount",
        "catalogProductCount",
        "clickCount",
        "cost",
        "orderCount",
        "turnOver",
        "margin",
        "performanceIndicator",
        "totalSales",
        "soldProductCount",
        "links"
      ],
      "properties": {
        "channel": {
          "$ref": "#/definitions/BeezUP.Common.ChannelBasicInfo"
        },
        "enabledProductCount": {
          "type": "integer",
          "description": "The enabled product count for this channel",
          "example": 101
        },
        "catalogProductCount": {
          "type": "integer",
          "description": "The catalog product count for this channel",
          "example": 101
        },
        "clickCount": {
          "type": "integer",
          "description": "The click count for this channel",
          "example": 1024
        },
        "cost": {
          "type": "number",
          "description": "The cost for this channel",
          "example": 1234.12
        },
        "orderCount": {
          "type": "integer",
          "description": "The order count for this channel",
          "example": 42
        },
        "turnOver": {
          "type": "number",
          "description": "The Turnover for this channel",
          "example": 42.42
        },
        "margin": {
          "type": "number",
          "description": "The margin for this channel",
          "example": 23.1
        },
        "performanceIndicator": {
          "type": "number",
          "description": "The performance indicator based on the performance indicator formula indicated in the request for this channel",
          "example": 12.21
        },
        "totalSales": {
          "type": "number",
          "description": "The total sales related to this channel",
          "example": 234.42
        },
        "soldProductCount": {
          "type": "integer",
          "description": "The product sold count count for this channel",
          "example": 2
        },
        "links": {
          "$ref": "#/definitions/reportByChannelLinks"
        }
      }
    },
    "reportByDayAllChannels": {
      "type": "object",
      "required": [
        "clickCount",
        "cost",
        "orderCount",
        "turnOver",
        "margin",
        "performanceIndicator",
        "totalSales",
        "soldProductCount"
      ],
      "properties": {
        "clickCount": {
          "type": "integer",
          "description": "The click count for this day and all channels",
          "example": 101
        },
        "cost": {
          "type": "number",
          "description": "The cost  for this day and all channels",
          "example": 10.42
        },
        "orderCount": {
          "type": "integer",
          "description": "The order count for this day and all channels",
          "example": 42
        },
        "turnOver": {
          "type": "number",
          "description": "The Turnover for this day and all channels",
          "example": 23.11
        },
        "margin": {
          "type": "number",
          "description": "The margin for this day and all channels",
          "example": 42.42
        },
        "performanceIndicator": {
          "type": "number",
          "description": "The performance indicator based on the performance indicator formula indicated in the request for this day and all channels",
          "example": 23.09
        },
        "totalSales": {
          "type": "number",
          "description": "The total sales related to this day and all channels",
          "example": 234.42
        },
        "soldProductCount": {
          "type": "integer",
          "description": "The product sold count count for this day and all channels",
          "example": 2
        }
      }
    },
    "reportByDayByChannel": {
      "type": "object",
      "required": [
        "channel",
        "clickCount",
        "cost",
        "orderCount",
        "turnOver",
        "margin",
        "performanceIndicator",
        "totalSales",
        "soldProductCount"
      ],
      "properties": {
        "channel": {
          "$ref": "#/definitions/BeezUP.Common.ChannelBasicInfo"
        },
        "clickCount": {
          "type": "integer",
          "description": "The click count for this day and this channel",
          "example": 101
        },
        "cost": {
          "type": "number",
          "description": "The cost for this day and this channel",
          "example": 10.42
        },
        "orderCount": {
          "type": "integer",
          "description": "The order count for this day and this channel",
          "example": 42
        },
        "turnOver": {
          "type": "number",
          "description": "The Turnover for this day and this channel",
          "example": 23.11
        },
        "margin": {
          "type": "number",
          "description": "The margin for this day and this channel",
          "example": 42.42
        },
        "performanceIndicator": {
          "type": "number",
          "description": "The performance indicator based on the performance indicator formula indicated in the request for this day and this channel",
          "example": 23.09
        },
        "totalSales": {
          "type": "number",
          "description": "The total sales related to this day and this channel",
          "example": 234.42
        },
        "soldProductCount": {
          "type": "integer",
          "description": "The product sold count count for this day and this channel",
          "example": 2
        }
      }
    },
    "performanceIndicatorFormulaOperatorName": {
      "type": "string",
      "enum": [
        "Multiply",
        "Divide"
      ],
      "example": "Multiply"
    },
    "performanceIndicatorFormula": {
      "type": "object",
      "description": "The KPI formula",
      "example": {
        "firstParameter": "Cost",
        "operatorName": "Multiply",
        "secondParamter": "Turnover",
        "thirdParameter": 100
      },
      "properties": {
        "firstParameter": {
          "$ref": "#/definitions/performanceIndicatorFormulaParameterType"
        },
        "operatorName": {
          "$ref": "#/definitions/performanceIndicatorFormulaOperatorName"
        },
        "secondParameter": {
          "$ref": "#/definitions/performanceIndicatorFormulaParameterType"
        },
        "thirdParameter": {
          "type": "integer",
          "description": "Indicate the value of the third parameter of your formula",
          "example": 100,
          "default": 100
        }
      }
    },
    "trackedClicks": {
      "type": "object",
      "required": [
        "clicks"
      ],
      "properties": {
        "clicks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/trackedClick"
          }
        }
      }
    },
    "trackedClick": {
      "type": "object",
      "required": [
        "utcDate",
        "product",
        "ipAddress",
        "channel"
      ],
      "properties": {
        "utcDate": {
          "format": "date-time",
          "type": "string",
          "description": "The utc date of the click",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "product": {
          "$ref": "#/definitions/BeezUP.Common.ProductBasicInfo"
        },
        "ipAddress": {
          "type": "string",
          "description": "The user's IP address related to this click",
          "example": "127.0.0.1"
        },
        "channel": {
          "$ref": "#/definitions/BeezUP.Common.ChannelBasicInfo"
        }
      }
    },
    "trackedOrders": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/trackedOrder"
          }
        }
      }
    },
    "trackedOrder": {
      "type": "object",
      "required": [
        "utcDate",
        "channel",
        "merchantOrderId",
        "totalAmount",
        "currencyCode",
        "paymentValidated",
        "products"
      ],
      "properties": {
        "utcDate": {
          "format": "date-time",
          "type": "string",
          "description": "The utc date of the order.",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "channel": {
          "$ref": "#/definitions/BeezUP.Common.ChannelBasicInfo"
        },
        "merchantOrderId": {
          "type": "string",
          "description": "The merchant order identifier",
          "example": "My_Merchant_Order_Id"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount related to the order.",
          "example": 101.42
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "paymentValidated": {
          "type": "boolean",
          "description": "Indicate if the payment of this order has been validated or not.",
          "example": false
        },
        "products": {
          "description": "the product list related to this order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/trackedOrderProduct"
          },
          "example": [
            {
              "productId": "00000000-0000-0000-0000-000000000000",
              "productSku": "SKU123345",
              "productTitle": "My super product title",
              "productImageUrl": "http://i2.cdscdn.com/pdt2/3/9/0/1/550x550/hai6901018043390/rw/haier-b20fwrss-refrigerateur-americain.jpg",
              "productActive": true,
              "unitPrice": 101.42,
              "quantity": 1.0,
              "margin": 9.66
            }
          ]
        }
      }
    },
    "trackedOrderProduct": {
      "allOf": [
        {
          "$ref": "#/definitions/BeezUP.Common.ProductBasicInfo"
        },
        {
          "type": "object",
          "required": [
            "productId",
            "productSku",
            "productTitle",
            "productImageUrl",
            "productExists",
            "unitPrice",
            "quantity",
            "margin"
          ],
          "properties": {
            "unitPrice": {
              "type": "number",
              "description": "The product's unit price related to this order",
              "example": 101.42
            },
            "quantity": {
              "type": "number",
              "description": "Indicate the product's quantity ordered.",
              "example": 1.0
            },
            "margin": {
              "type": "number",
              "description": "Indicate the product's margin related to this order.",
              "example": 9.66
            }
          }
        }
      ]
    },
    "trackedExternalOrders": {
      "type": "object",
      "required": [
        "externalOrders"
      ],
      "properties": {
        "externalOrders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/trackedExternalOrder"
          }
        }
      }
    },
    "trackedExternalOrder": {
      "type": "object",
      "required": [
        "utcDate",
        "merchantOrderId",
        "totalAmount",
        "currencyCode",
        "paymentValidated"
      ],
      "properties": {
        "utcDate": {
          "format": "date-time",
          "type": "string",
          "description": "The utc date of the external order.",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "merchantOrderId": {
          "type": "string",
          "description": "The merchant order identifier",
          "example": "My_Order_Merchant_Id"
        },
        "visitorId": {
          "type": "string",
          "description": "Can be null. The visitor identifier related to this external order",
          "example": "A_VISITOR_ID"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount related to the external order.",
          "example": 101.42
        },
        "currencyCode": {
          "$ref": "#/definitions/BeezUP.Common.CurrencyCode"
        },
        "paymentValidated": {
          "type": "boolean",
          "description": "Indicate if the payment of this external order has been validated or not.",
          "example": false
        },
        "products": {
          "description": "Can be null. the product list related to this external order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/trackedExternalOrderProduct"
          },
          "example": [
            {
              "productSku": "something",
              "productTitle": "Something great",
              "productImageUrl": "http://cdn3.sarenza.net/static/_img/productsV4/0000010744/MD_0000010744_29411_09.jpg?201308142051",
              "productActive": true,
              "merchantOrderId": "My_Merchant_Order_Id",
              "unitPrice": "101.42",
              "quantity": "1.00",
              "margin": "9.66"
            }
          ]
        }
      }
    },
    "trackedExternalOrderProduct": {
      "type": "object",
      "required": [
        "productSku"
      ],
      "properties": {
        "productSku": {
          "type": "string",
          "description": "The product sku received related to the external order.",
          "example": "something"
        },
        "productTitle": {
          "type": "string",
          "description": "We tried to get the catalog product title based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.",
          "example": "Something great"
        },
        "productImageUrl": {
          "type": "string",
          "format": "uri",
          "description": "We tried to get the catalog product image Url based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.",
          "example": "http://cdn3.sarenza.net/static/_img/productsV4/0000010744/MD_0000010744_29411_09.jpg?201308142051"
        },
        "productActive": {
          "type": "boolean",
          "description": "We tried to get the catalog product if it's still active based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.",
          "example": true
        },
        "productId": {
          "type": "string",
          "format": "guid",
          "description": "We tried to get the catalog product identifier based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.",
          "example": "6d469a54-8426-4855-abc2-9e062e2056b9"
        },
        "unitPrice": {
          "type": "string",
          "description": "The product's unit price related to this external order. This property is voluntarily a string because the value could be an invalid one.",
          "example": "101.42"
        },
        "quantity": {
          "type": "string",
          "description": "Indicate the product's quantity ordered. This property is voluntarily a string because the value could be an invalid one",
          "example": "1.00"
        },
        "margin": {
          "type": "string",
          "description": "Indicate the product's margin related to this order. This property is voluntarily a string because the value could be an invalid one",
          "example": "9.66"
        }
      }
    },
    "trackingStatus": {
      "type": "object",
      "required": [
        "clickSynchronizationUtcDate",
        "orderSynchonizationUtcDate",
        "marketplaceOrderSynchonizationUtcDate"
      ],
      "properties": {
        "clickSynchronizationUtcDate": {
          "description": "The utc date of the latest click synchronized",
          "type": "string",
          "format": "date-time",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "orderSynchonizationUtcDate": {
          "description": "The utc date of the latest order synchronized",
          "type": "string",
          "format": "date-time",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "marketplaceOrderSynchonizationUtcDate": {
          "description": "The utc date of the latest marketplace order synchronized",
          "type": "string",
          "format": "date-time",
          "example": "2016-08-29T09:12:33.001Z"
        }
      }
    },
    "storeTrackingStatus": {
      "type": "object",
      "properties": {
        "clickSynchronizationUtcDate": {
          "description": "The utc date of the latest click synchronized",
          "type": "string",
          "format": "date-time",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "orderSynchonizationUtcDate": {
          "description": "The utc date of the latest order synchronized",
          "type": "string",
          "format": "date-time",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "marketplaceOrderSynchonizationUtcDate": {
          "description": "The utc date of the latest marketplace order synchronized",
          "type": "string",
          "format": "date-time",
          "example": "2016-08-29T09:12:33.001Z"
        }
      }
    },
    "reportFiltersLinks": {
      "type": "object",
      "required": [
        "self",
        "save"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetReportFiltersLink"
        },
        "save": {
          "$ref": "#/definitions/links.SaveReportFilterLink"
        }
      }
    },
    "reportFilterList": {
      "type": "object",
      "required": [
        "reportFilters",
        "links"
      ],
      "properties": {
        "reportFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportFilterHeader"
          }
        },
        "links": {
          "$ref": "#/definitions/reportFiltersLinks"
        }
      }
    },
    "reportFilterHeaderLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetReportFilterLink"
        }
      }
    },
    "reportFilterHeader": {
      "type": "object",
      "required": [
        "reportFilterName",
        "reportFilterId",
        "reportType",
        "links"
      ],
      "properties": {
        "reportFilterId": {
          "description": "Report filter identifier",
          "type": "string",
          "format": "guid",
          "example": "fb19c53c-2f63-4262-9d94-2d7faa500acd"
        },
        "reportFilterName": {
          "description": "Report filter name",
          "type": "string",
          "example": "My report filter"
        },
        "reportType": {
          "$ref": "#/definitions/reportType"
        },
        "links": {
          "$ref": "#/definitions/reportFilterHeaderLinks"
        }
      }
    },
    "saveReportFilterRequest": {
      "type": "object",
      "required": [
        "reportFilterName",
        "parameters"
      ],
      "properties": {
        "reportFilterName": {
          "description": "Report filter name",
          "type": "string",
          "example": "My report filter"
        },
        "parameters": {
          "$ref": "#/definitions/reportFilterParameters"
        }
      }
    },
    "reportFilterLinks": {
      "type": "object",
      "description": "Indicates the actions you can do on this report filter",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetReportFilterLink"
        },
        "save": {
          "$ref": "#/definitions/links.SaveReportFilterLink"
        },
        "delete": {
          "$ref": "#/definitions/links.DeleteReportFilterLink"
        }
      }
    },
    "reportFilter": {
      "type": "object",
      "required": [
        "reportFilterId",
        "reportFilterName",
        "parameters"
      ],
      "properties": {
        "reportFilterId": {
          "description": "Report filter identifier",
          "type": "string",
          "format": "guid",
          "example": "fb19c53c-2f63-4262-9d94-2d7faa500acd"
        },
        "reportFilterName": {
          "description": "Report filter name",
          "type": "string",
          "example": "My report filter"
        },
        "parameters": {
          "$ref": "#/definitions/reportFilterParameters"
        },
        "links": {
          "$ref": "#/definitions/reportFilterLinks"
        }
      }
    },
    "reportFilterParameters": {
      "allOf": [
        {
          "$ref": "#/definitions/reportFilterCommonParameters"
        },
        {
          "type": "object",
          "required": [
            "beginPeriodUtcDate",
            "endPeriodUtcDate",
            "advancedFilters",
            "reportType"
          ],
          "properties": {
            "reportType": {
              "$ref": "#/definitions/reportType"
            },
            "productState": {
              "$ref": "#/definitions/productStateFilter"
            },
            "productFilters": {
              "$ref": "#/definitions/BeezUP.Common.ProductFilters"
            },
            "productColumnsToDisplay": {
              "$ref": "#/definitions/productColumnsToDisplay"
            }
          }
        }
      ]
    },
    "reportType": {
      "type": "string",
      "description": "The report type",
      "enum": [
        "ByChannel",
        "ByCategory",
        "ByProduct",
        "ByDate"
      ],
      "example": "ByProduct"
    },
    "ruleListLinks": {
      "description": "Links to know if the user can create a rule or run all rules",
      "type": "object",
      "required": [
        "self",
        "create",
        "history",
        "run"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetRulesLink"
        },
        "create": {
          "$ref": "#/definitions/links.CreateRuleLink"
        },
        "history": {
          "$ref": "#/definitions/links.GetRulesExecutionsLink"
        },
        "run": {
          "$ref": "#/definitions/links.RunRulesLink"
        }
      }
    },
    "ruleList": {
      "type": "object",
      "required": [
        "rules",
        "links"
      ],
      "properties": {
        "rules": {
          "description": "Rule list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/rule"
          }
        },
        "links": {
          "$ref": "#/definitions/ruleListLinks"
        }
      }
    },
    "optimisationActionName": {
      "description": "The optimisation action",
      "type": "string",
      "enum": [
        "reenable",
        "disable"
      ],
      "example": "reenable"
    },
    "ruleLastExecutionStatus": {
      "description": "The status of the last execution",
      "enum": [
        "InProgress",
        "Succeeded",
        "Failed",
        "Unknown"
      ],
      "type": "string",
      "example": "Succeeded"
    },
    "ruleLinks": {
      "description": "Links to retrieve/action on other entities",
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetRuleLink"
        },
        "run": {
          "$ref": "#/definitions/links.RunRuleLink"
        },
        "delete": {
          "$ref": "#/definitions/links.DeleteRuleLink"
        },
        "moveup": {
          "$ref": "#/definitions/links.MoveUpRuleLink"
        },
        "movedown": {
          "$ref": "#/definitions/links.MoveDownRuleLink"
        },
        "enable": {
          "$ref": "#/definitions/links.EnableRuleLink"
        },
        "disable": {
          "$ref": "#/definitions/links.DisableRuleLink"
        },
        "update": {
          "$ref": "#/definitions/links.UpdateRuleLink"
        },
        "reportFilter": {
          "$ref": "#/definitions/links.GetReportFilterLink"
        }
      }
    },
    "rule": {
      "type": "object",
      "required": [
        "ruleId",
        "ruleName",
        "actionName",
        "reportFilterId",
        "position",
        "enabled",
        "links"
      ],
      "properties": {
        "ruleId": {
          "format": "guid",
          "description": "The identifier of the rule",
          "type": "string",
          "example": "c38006b4-29d0-4b8a-978b-701a0b12d5a8"
        },
        "ruleName": {
          "description": "The name of the rule",
          "type": "string",
          "example": "My Rule"
        },
        "lastExecutionStatus": {
          "$ref": "#/definitions/ruleLastExecutionStatus"
        },
        "lastExecutionUtcDate": {
          "format": "date-time",
          "description": "The utc date of the last execution",
          "type": "string",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "actionName": {
          "$ref": "#/definitions/optimisationActionName"
        },
        "reportFilterId": {
          "description": "Report filter identifier linked to the rule",
          "type": "string",
          "format": "guid",
          "example": "fb19c53c-2f63-4262-9d94-2d7faa500acd"
        },
        "position": {
          "description": "Rule execution position",
          "type": "integer",
          "example": 1
        },
        "enabled": {
          "description": "Is the rule enabled",
          "type": "boolean",
          "example": true
        },
        "validityStartUtcDate": {
          "format": "date-time",
          "description": "Rule validity start utc date",
          "type": "string",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "validityEndUtcDate": {
          "format": "date-time",
          "description": "Rule validity end utc date",
          "type": "string",
          "example": "3016-08-29T09:12:33.001Z"
        },
        "links": {
          "$ref": "#/definitions/ruleLinks"
        }
      }
    },
    "createRuleRequest": {
      "required": [
        "optimisationActionName",
        "ruleName",
        "reportFilterId"
      ],
      "type": "object",
      "properties": {
        "optimisationActionName": {
          "$ref": "#/definitions/optimisationActionName"
        },
        "ruleName": {
          "description": "The name of the rule",
          "type": "string",
          "example": "My rule"
        },
        "reportFilterId": {
          "format": "guid",
          "description": "The report filter to use for the rule",
          "type": "string",
          "example": "fb19c53c-2f63-4262-9d94-2d7faa500acd"
        },
        "startUtcDate": {
          "format": "date-time",
          "description": "The start validity utc date of the rule",
          "type": "string",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "endUtcDate": {
          "format": "date-time",
          "description": "The end validity utc date of the rule",
          "type": "string",
          "example": "2017-09-30T10:42:40.001Z"
        }
      }
    },
    "updateRuleRequest": {
      "description": "This update will replace the following values.",
      "type": "object",
      "required": [
        "ruleName"
      ],
      "properties": {
        "ruleName": {
          "description": "The name of the rule",
          "type": "string",
          "example": "My Rule Renamed"
        },
        "startUtcDate": {
          "format": "date-time",
          "description": "Not required. The start validity utc date of the rule.",
          "type": "string",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "endUtcDate": {
          "format": "date-time",
          "description": "Not required. The end validity utc date of the rule",
          "type": "string",
          "example": "2016-08-29T09:12:33.001Z"
        }
      }
    },
    "ruleExecutionReportings": {
      "type": "object",
      "properties": {
        "executions": {
          "description": "The rules executions history",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ruleExecutionReporting"
          }
        },
        "paginationResult": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResult"
        }
      }
    },
    "ruleExecutionReportingStatus": {
      "description": "The status of the execution of the rule",
      "enum": [
        "InProgress",
        "Succeeded",
        "AlreadyInProgress",
        "Aborted",
        "Failed",
        "Unknown"
      ],
      "type": "string",
      "example": "Succeeded"
    },
    "ruleExecutionReportingErrorType": {
      "description": "The error type for this execution if any",
      "enum": [
        "ChannelNotPresent",
        "StoreIsInSystemBlockState"
      ],
      "type": "string",
      "example": "ChannelNotPresent"
    },
    "ruleExecutionReportingExecutionSource": {
      "description": "The requestor type for the execution of the rule",
      "enum": [
        "Scheduler",
        "User"
      ],
      "type": "string",
      "example": "User"
    },
    "ruleExecutionReportingLinks": {
      "description": "Links to retrieve/action on this rule execution",
      "type": "object",
      "properties": {
        "rule": {
          "$ref": "#/definitions/links.GetRuleLink"
        }
      }
    },
    "ruleExecutionReporting": {
      "type": "object",
      "required": [
        "ruleId",
        "ruleName",
        "status",
        "executionSource"
      ],
      "properties": {
        "ruleId": {
          "description": "The rule identifier",
          "type": "string",
          "format": "guid",
          "example": "fd9a23a1-569b-40af-af91-f7275a57bf89"
        },
        "ruleName": {
          "description": "The name of the rule",
          "type": "string",
          "example": "toto"
        },
        "startedUtcDate": {
          "format": "date-time",
          "description": "The start utc date of the execution of the rule",
          "type": "string",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "completedUtcDate": {
          "format": "date-time",
          "description": "The completed utc date of the execution of the rule",
          "type": "string",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "status": {
          "$ref": "#/definitions/ruleExecutionReportingStatus"
        },
        "errorType": {
          "$ref": "#/definitions/ruleExecutionReportingErrorType"
        },
        "affectedProductCount": {
          "description": "The count of affected products, active or not",
          "type": "integer",
          "example": 1
        },
        "activeAffectedProductCount": {
          "description": "The count of affected active products",
          "type": "integer",
          "example": 1
        },
        "affectedChannelCount": {
          "description": "The count of affected Channels across all products",
          "type": "integer",
          "example": 1
        },
        "optimisationActionName": {
          "$ref": "#/definitions/optimisationActionName"
        },
        "userId": {
          "format": "guid",
          "description": "The userId that executed the rule if any",
          "type": "string",
          "example": "e8289350-69f8-45a6-b0ca-b641c83e0422"
        },
        "executionSource": {
          "$ref": "#/definitions/ruleExecutionReportingExecutionSource"
        },
        "reportUrl": {
          "description": "The url for the excel report for this execution",
          "type": "string",
          "example": "http://www.google.com"
        },
        "links": {
          "$ref": "#/definitions/ruleExecutionReportingLinks"
        }
      }
    },
    "BeezUP.Common.PaginationRequestParameters": {
      "type": "object",
      "properties": {
        "pageSize": {
          "$ref": "#/definitions/BeezUP.Common.PageSize"
        },
        "pageNumber": {
          "$ref": "#/definitions/BeezUP.Common.PageNumber"
        }
      }
    },
    "BeezUP.Common.PageSize": {
      "description": "Indicate the item count per page",
      "type": "integer",
      "format": "int32",
      "default": 100,
      "minimum": 25,
      "maximum": 100,
      "example": 100
    },
    "BeezUP.Common.PageNumber": {
      "description": "Indicates the page number",
      "format": "int32",
      "type": "integer",
      "example": 1,
      "minimum": 1,
      "default": 1
    },
    "BeezUP.Common.CatalogCategoryFilter": {
      "type": "object",
      "properties": {
        "categoryPath": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Indicates on which catalog category path you want to make the filter",
          "example": [
            "Maison",
            "Chambre"
          ]
        }
      }
    },
    "BeezUP.Common.ChannelCategoryFilter": {
      "type": "object",
      "properties": {
        "categoryPath": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Indicates on which channel category path you want to make the filter",
          "example": [
            "Home",
            "Bedroom"
          ]
        }
      }
    },
    "BeezUP.Common.ProductFilters": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "The product sku filter",
          "example": "M1234"
        },
        "title": {
          "type": "string",
          "description": "The product title filter",
          "example": "RefrigÃ©rateur"
        },
        "additionalProductFilters": {
          "$ref": "#/definitions/BeezUP.Common.AdditionalProductFilters"
        }
      }
    },
    "BeezUP.Common.AdditionalProductFiltersValue": {
      "type": "object",
      "properties": {
        "operatorName": {
          "$ref": "#/definitions/BeezUP.Common.ProductFilterOperatorName"
        },
        "values": {
          "description": "Must be null if the operator is \"IsNull\" or \"IsNotNull\". \nCan contains multiple value in case of \"InList\" operator. Otherwise a single value is expected.\n",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "My value"
          ]
        }
      },
      "example": {
        "672644c7-5bd0-4e25-88c1-1f732bda5e4c": {
          "operatorName": "GreaterTo",
          "values": [
            100
          ]
        }
      }
    },
    "BeezUP.Common.AdditionalProductFilters": {
      "type": "object",
      "description": "Describe a filter on a product's column.\nThe key is the column identifier of your catalog or a custom column.\n",
      "additionalProperties": {
        "$ref": "#/definitions/BeezUP.Common.AdditionalProductFiltersValue"
      }
    },
    "BeezUP.Common.ProductFilterOperatorName": {
      "type": "string",
      "description": "Indicate the operator you want to make on the columnId",
      "enum": [
        "Equals",
        "Contains",
        "GreaterTo",
        "LowerTo",
        "InList",
        "IsNull",
        "IsNotNull"
      ]
    },
    "BeezUP.Common.ProductBasicInfo": {
      "description": "The basic information related to a product",
      "type": "object",
      "required": [
        "productId",
        "productSku",
        "productTitle",
        "productImageUrl",
        "productExists"
      ],
      "properties": {
        "productId": {
          "format": "guid",
          "type": "string",
          "description": "The product identifier",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "productSku": {
          "type": "string",
          "description": "The product SKU",
          "example": "SKU1234"
        },
        "productTitle": {
          "type": "string",
          "description": "The product tile",
          "example": "My supert product"
        },
        "productImageUrl": {
          "type": "string",
          "format": "uri",
          "description": "The product image Url",
          "example": "http://i2.cdscdn.com/pdt2/3/9/0/1/550x550/hai6901018043390/rw/haier-b20fwrss-refrigerateur-americain.jpg"
        },
        "productExists": {
          "type": "boolean",
          "description": "Indicates if the product still exists in your catalog",
          "example": true
        }
      }
    },
    "BeezUP.Common.ChannelBasicInfo": {
      "description": "The basic info related to a channel",
      "type": "object",
      "required": [
        "channelId",
        "channelName",
        "channelImageUrl"
      ],
      "properties": {
        "channelId": {
          "$ref": "#/definitions/BeezUP.Common.ChannelId"
        },
        "channelName": {
          "$ref": "#/definitions/BeezUP.Common.ChannelName"
        },
        "channelImageUrl": {
          "$ref": "#/definitions/BeezUP.Common.HttpUrl"
        }
      }
    },
    "BeezUP.Common.CatalogColumnId": {
      "type": "string",
      "format": "guid",
      "description": "The catalog column identifier (catalog or custom column)",
      "example": "bea7c21e-948b-4ac3-9ffd-4396e62c4163"
    },
    "BeezUP.Common.CatalogColumnUserName": {
      "type": "string",
      "description": "The catalog column named by the user (catalog or custom column)",
      "example": "My title"
    },
    "BeezUP.Common.ChannelColumnName": {
      "type": "string",
      "description": "The channel column name",
      "example": "NAME"
    },
    "BeezUP.Common.ColumnImportance": {
      "type": "string",
      "description": "Importance of the column",
      "enum": [
        "Required",
        "Recommended",
        "Optional"
      ],
      "example": "Required",
      "default": "Optional"
    },
    "BeezUP.Common.ColumnDataType": {
      "description": "Data type of the column, will be used for parsing and for consolidation proces",
      "enum": [
        "String",
        "Url",
        "Text",
        "Decimal",
        "DateTime",
        "Int",
        "SpecialInt",
        "InStock",
        "Unknown",
        "ImageUrl"
      ],
      "type": "string",
      "default": "String",
      "example": "String"
    },
    "BeezUP.Common.BeezUPColumnName": {
      "type": "string",
      "description": "The BeezUP column name",
      "example": "CategoryFirstLevel"
    },
    "BeezUP.Common.MarketplaceTechnicalCode": {
      "description": "The technical code of the marketplace.",
      "type": "string",
      "example": "Amazon",
      "x-lov": "OMMarketplaceTechnicalCode"
    },
    "BeezUP.Common.MarketplaceAccountId": {
      "description": "The marketplace account identifier in BeezUP. This account identifier is based on your api settings.",
      "type": "integer",
      "format": "int32",
      "example": 1234
    },
    "BeezUP.Common.MarketplaceBusinessCode": {
      "description": "In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.",
      "type": "string",
      "example": "GOSPORT",
      "x-lov": "MarketplaceBusinessCode"
    },
    "BeezUP.Common.CountryIsoCodeAlpha3": {
      "description": "The country iso code alpha 3 <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\">(ISO 3166-1_alpha-3)</a>",
      "type": "string",
      "x-lov": "Country",
      "example": "FRA"
    },
    "BeezUP.Common.CurrencyCode": {
      "description": "The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a>\n",
      "type": "string",
      "example": "EUR"
    },
    "BeezUP.Common.Email": {
      "description": "The email",
      "type": "string",
      "format": "email",
      "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
      "example": "paulsimon@mysupercompany.com"
    },
    "BeezUP.Common.UserId": {
      "format": "guid",
      "description": "The user identifier",
      "type": "string",
      "example": "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    },
    "BeezUP.Common.StoreId": {
      "format": "guid",
      "description": "The store identifier",
      "type": "string",
      "example": "64f43358-63a1-47f7-97ec-0301fc39956b"
    },
    "BeezUP.Common.ChannelCatalogId": {
      "type": "string",
      "format": "guid",
      "description": "The channel catalog identifier",
      "example": "6d6b04de-406b-4539-8e7e-bf3e8da5dfb0"
    },
    "BeezUP.Common.ChannelCategoryId": {
      "type": "string",
      "format": "guid",
      "example": "24f508da-a069-4467-b9d3-15baebe9bac7"
    },
    "BeezUP.Common.ChannelCategoryPath": {
      "description": "The channel category path",
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": [
        "Clothing",
        "Women",
        "Shoes"
      ]
    },
    "BeezUP.Common.CatalogCategoryPath": {
      "description": "The catalog category path",
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": [
        "VÃªtements",
        "Femmes",
        "Chaussures"
      ]
    },
    "BeezUP.Common.CatalogCategoryId": {
      "description": "The catalog category identifier",
      "type": "string",
      "format": "guid",
      "example": "81a058a6-0451-4b79-84ef-94c58d0ed4ac"
    },
    "BeezUP.Common.ChannelId": {
      "type": "string",
      "format": "guid",
      "description": "The channel identifier",
      "example": "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    },
    "BeezUP.Common.ChannelName": {
      "type": "string",
      "description": "The channel name",
      "example": "Amazon FRA"
    },
    "BeezUP.Common.ProductId": {
      "type": "string",
      "format": "guid",
      "description": "The product identifier",
      "example": "578419df-1bbf-41a6-96fa-862e42182b67"
    },
    "BeezUP.Common.ChannelColumnId": {
      "type": "string",
      "format": "guid",
      "description": "The channel column identifier",
      "example": "8a76f06a-fefc-4c0d-bcfe-b210f1482977"
    },
    "BeezUP.Common.ListOfValueItem": {
      "description": "This object is used by LOV apis",
      "type": "object",
      "required": [
        "codeIdentifier",
        "intIdentifier"
      ],
      "properties": {
        "position": {
          "format": "int32",
          "type": "integer",
          "example": 1
        },
        "codeIdentifier": {
          "type": "string",
          "example": "FRA"
        },
        "translationText": {
          "type": "string",
          "example": "France"
        },
        "intIdentifier": {
          "format": "int32",
          "type": "integer",
          "example": 1
        }
      }
    },
    "BeezUP.Common.PaginationResult": {
      "type": "object",
      "required": [
        "entryCount",
        "pageCount",
        "totalEntryCount",
        "links"
      ],
      "properties": {
        "entryCount": {
          "type": "integer",
          "description": "The entry count currently returned",
          "example": 25,
          "minimum": 0
        },
        "pageCount": {
          "type": "integer",
          "description": "The page count",
          "example": 38,
          "minimum": 0
        },
        "totalEntryCount": {
          "type": "integer",
          "description": "The total entry count",
          "example": 943,
          "minimum": 0
        },
        "links": {
          "$ref": "#/definitions/BeezUP.Common.PaginationResultLinks"
        }
      },
      "example": {
        "entryCount": 25,
        "pageCount": 38,
        "totalEntryCount": 943,
        "links": {
          "first": {
            "href": "/v2/user/marketplaces/orders/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 1
                }
              }
            ]
          },
          "last": {
            "href": "/v2/user/marketplaces/orders/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 38
                }
              }
            ]
          },
          "next": {
            "href": "/v2/user/marketplaces/orders/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 2
                }
              }
            ]
          }
        }
      }
    },
    "BeezUP.Common.PaginationResultLinks": {
      "description": "The navigation links 'first', 'last', 'next', 'previous'",
      "type": "object",
      "required": [
        "first",
        "last"
      ],
      "properties": {
        "first": {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        "last": {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        "previous": {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        },
        "next": {
          "$ref": "#/definitions/BeezUP.Common.Link3"
        }
      }
    },
    "BeezUP.Common.Href": {
      "type": "string",
      "example": "/v2/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}",
      "description": "Indicate the relative uri for this link"
    },
    "BeezUP.Common.OperationId": {
      "type": "string",
      "description": "The operationId to call.",
      "example": "GetOrder"
    },
    "BeezUP.Common.HttpMethod": {
      "type": "string",
      "enum": [
        "GET",
        "POST",
        "PATCH",
        "DELETE",
        "PUT",
        "HEAD"
      ],
      "default": "GET",
      "example": "GET",
      "description": "Indicate the http method to use on this link"
    },
    "BeezUP.Common.Link3": {
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "docUrl": {
          "$ref": "#/definitions/BeezUP.Common.DocUrl"
        },
        "description": {
          "type": "string",
          "description": "The description of the link",
          "example": "This is a description link"
        },
        "href": {
          "$ref": "#/definitions/BeezUP.Common.Href"
        },
        "operationId": {
          "$ref": "#/definitions/BeezUP.Common.OperationId"
        },
        "method": {
          "$ref": "#/definitions/BeezUP.Common.HttpMethod"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/BeezUP.Common.LinkParameter3"
          }
        },
        "urlTemplated": {
          "type": "boolean",
          "description": "indicates whether the href is templated or not"
        },
        "allRequiredParamsProvided": {
          "type": "boolean",
          "description": "indicates whether all required params have been provided"
        },
        "allOptionalParamsProvided": {
          "type": "boolean",
          "description": "indicates whether all optionals params have been provided"
        },
        "info": {
          "$ref": "#/definitions/BeezUP.Common.InfoSummaries"
        }
      }
    },
    "BeezUP.Common.Link2": {
      "type": "object",
      "x-deprecated": true,
      "required": [
        "rel"
      ],
      "properties": {
        "rel": {
          "type": "string",
          "description": "Indicate the relation name related to the link",
          "example": "self"
        },
        "href": {
          "$ref": "#/definitions/BeezUP.Common.Href"
        },
        "operationId": {
          "$ref": "#/definitions/BeezUP.Common.OperationId"
        },
        "method": {
          "$ref": "#/definitions/BeezUP.Common.HttpMethod"
        },
        "parameters": {
          "type": "array",
          "uniqueItems": true,
          "minItems": 0,
          "items": {
            "$ref": "#/definitions/BeezUP.Common.LinkParameter2"
          }
        },
        "info": {
          "$ref": "#/definitions/BeezUP.Common.InfoSummaries"
        }
      }
    },
    "BeezUP.Common.ParameterIn": {
      "type": "string",
      "description": "* path: if the parameter must be pass in the path uri\n* header: if the parameter must be passed in http header\n* query: if the parameter must be passed in querystring\n* body: if the paramter must be passed in the body\n",
      "example": "path",
      "enum": [
        "path",
        "header",
        "query",
        "body"
      ]
    },
    "BeezUP.Common.ParameterType": {
      "description": "The value type of the parameter",
      "type": "string",
      "enum": [
        "string",
        "integer",
        "number",
        "boolean",
        "object",
        "array",
        "date",
        "date-time"
      ],
      "default": "string",
      "example": "string"
    },
    "BeezUP.Common.LinkParameter3": {
      "type": "object",
      "required": [
        "in"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "value": {
          "type": "object",
          "description": "The value of the parameter. It can be an integer a string or an object.",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "in": {
          "$ref": "#/definitions/BeezUP.Common.ParameterIn"
        },
        "type": {
          "$ref": "#/definitions/BeezUP.Common.ParameterType"
        },
        "lovLink": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST indicate a value from the list of values otherwise it's a freetext",
          "example": true
        },
        "description": {
          "type": "string",
          "description": "description of the parameter",
          "example": "the store identifier"
        },
        "schema": {
          "type": "string",
          "description": "schema of the parameter",
          "example": "orderListRequest"
        },
        "properties": {
          "description": "If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/BeezUP.Common.LinkParameterProperty3"
          },
          "example": {
            "shipOrder": {
              "type": "string"
            }
          }
        }
      }
    },
    "BeezUP.Common.LinkParameterProperty3": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "value": {
          "type": "object",
          "description": "The value of the parameter. It can be an integer a string or an object.",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "example": true
        },
        "type": {
          "$ref": "#/definitions/BeezUP.Common.ParameterType"
        },
        "lovLink": {
          "$ref": "#/definitions/BeezUP.Common.LOVLink3"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST use indicate a value from the list of values otherwise it's a freetext",
          "example": true
        },
        "description": {
          "type": "string",
          "description": "description of the parameter",
          "example": "the store identifier"
        },
        "schema": {
          "type": "string",
          "description": "schema of the parameter",
          "example": "orderListRequest"
        }
      }
    },
    "BeezUP.Common.LinkParameter2": {
      "type": "object",
      "x-deprecated": true,
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the parameter",
          "example": "marketplaceTechnicalCode"
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "example": true
        },
        "in": {
          "$ref": "#/definitions/BeezUP.Common.ParameterIn"
        },
        "type": {
          "$ref": "#/definitions/BeezUP.Common.ParameterType"
        },
        "lovLink": {
          "description": "This parameter expect the values indicated in this list of values.",
          "$ref": "#/definitions/BeezUP.Common.LOVLink2"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST use indicate a value from the list of values otherwise it's a freetext",
          "example": true
        }
      }
    },
    "BeezUP.Common.LOVLink2": {
      "description": "Describe the way you have to follow to get access to the LOV",
      "x-deprecated": true,
      "type": "object",
      "required": [
        "listName"
      ],
      "properties": {
        "rel": {
          "type": "string",
          "description": "Indicate the relation name related to the link",
          "example": "LOV_Go2CultureName"
        },
        "href": {
          "type": "string",
          "default": "/v2/user/{listName}",
          "example": "/v2/public/{listName}",
          "description": "Indicate the relative uri pattern to the list of value"
        },
        "listName": {
          "type": "string",
          "description": "The name of the list of value",
          "example": "Go2CultureName"
        }
      }
    },
    "BeezUP.Common.LOVLink3": {
      "description": "Describe the way you have to follow to get access to the LOV",
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "format": "uri",
          "example": "/v2/public/Go2CultureName",
          "description": "Indicate the uri to the list of value"
        },
        "method": {
          "$ref": "#/definitions/BeezUP.Common.HttpMethod"
        }
      }
    },
    "BeezUP.Common.HttpUrl": {
      "description": "The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>",
      "type": "string",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "http://www.mydomain.com"
    },
    "BeezUP.Common.ErrorResponseMessage": {
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/BeezUP.Common.UserErrorMessage"
          }
        }
      }
    },
    "BeezUP.Common.DocUrl": {
      "type": "string",
      "format": "uri",
      "description": "The documentation related to this operation.",
      "example": "https://api-docs.beezup.com/#operation/EnableChannelCatalog"
    },
    "BeezUP.Common.UserErrorMessage": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "docUrl": {
          "$ref": "#/definitions/BeezUP.Common.DocUrl"
        },
        "code": {
          "type": "string",
          "description": "the error code. The error code can be a pattern containing the argument's name",
          "example": "CatalogImportationAlreadyInProgress(ExecutionId currentCatalogImportationId)"
        },
        "message": {
          "type": "string",
          "description": "The error message",
          "example": "There is already an importation in progress: b24d0dd8-a561-478a-9b26-34f573f03527\n"
        },
        "cultureName": {
          "type": "string",
          "description": "If the error is translated, the culture name will be indicated",
          "example": "en",
          "x-lov": "Go2CultureName"
        },
        "arguments": {
          "type": "array",
          "description": "a dictionary string/object",
          "items": {
            "type": "object",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The key of the parameter",
                "example": "currentCatalogImportationId"
              },
              "value": {
                "type": "object",
                "description": "The value of the parameter. Depending to the type.",
                "example": "b24d0dd8-a561-478a-9b26-34f573f03527"
              }
            }
          }
        }
      }
    },
    "BeezUP.Common.InfoSummaries": {
      "type": "object",
      "properties": {
        "successes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.SuccessSummary"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.ErrorSummary"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.WarningSummary"
          }
        },
        "informations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeezUP.Common.InfoSummary"
          }
        }
      }
    },
    "BeezUP.Common.SuccessSummary": {
      "type": "object",
      "properties": {
        "successCode": {
          "type": "string"
        },
        "successMessage": {
          "type": "string"
        },
        "successArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        }
      }
    },
    "BeezUP.Common.ErrorSummary": {
      "type": "object",
      "properties": {
        "utcDate": {
          "format": "date-time",
          "type": "string"
        },
        "errorGuid": {
          "format": "uuid",
          "type": "string"
        },
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "technicalErrorMessage": {
          "type": "string"
        },
        "exceptionDetail": {
          "$ref": "#/definitions/BeezUP.Common.ExceptionDetail"
        },
        "errorArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "BeezUP.Common.WarningSummary": {
      "type": "object",
      "properties": {
        "technicalErrorMessage": {
          "type": "string"
        },
        "warningMessage": {
          "type": "string"
        },
        "warningCode": {
          "type": "string"
        },
        "warningArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "BeezUP.Common.InfoSummary": {
      "type": "object",
      "properties": {
        "informationCode": {
          "type": "string"
        },
        "informationMessage": {
          "type": "string"
        },
        "informationArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        }
      }
    },
    "BeezUP.Common.ExceptionDetail": {
      "type": "object",
      "properties": {
        "helpLink": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "BeezUP.Common.ApiSettingsStatus": {
      "type": "string",
      "enum": [
        "warning",
        "success",
        "failed"
      ],
      "example": "success"
    }
  },
  "externalDocs": {
    "description": "Find the documentation for BeezUP's API here",
    "url": "https://api-docs.beezup.com/"
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "Ocp-Apim-Subscription-Key"
    }
  },
  "x-tagGroups": [
    {
      "name": "Public - Security",
      "tags": [
        "Public - Security - Security"
      ]
    },
    {
      "name": "Public - Channels",
      "tags": [
        "Public - Channels - Public Channels"
      ]
    },
    {
      "name": "Public - List of Values",
      "tags": [
        "Public - List of Values - LOV"
      ]
    },
    {
      "name": "User - List of Values",
      "tags": [
        "User - List of Values - LOV"
      ]
    },
    {
      "name": "Customer",
      "tags": [
        "Customer - Global",
        "Customer - Account",
        "Customer - Security",
        "Customer - Stores",
        "Customer - Shares",
        "Customer - Alerts",
        "Customer - Rights",
        "Customer - Friends",
        "Customer - Contracts",
        "Customer - Invoices"
      ]
    },
    {
      "name": "Catalogs",
      "tags": [
        "Catalogs - Auto",
        "Catalogs - Global",
        "Catalogs - Importation Process",
        "Catalogs - Importation Catalog Info",
        "Catalogs - Catalog"
      ]
    },
    {
      "name": "Channels",
      "tags": [
        "Channels - Channels Global"
      ]
    },
    {
      "name": "Channel Catalogs",
      "tags": [
        "Channel Catalogs - Global",
        "Channel Catalogs - Settings",
        "Channel Catalogs - Column Mappings",
        "Channel Catalogs - Category Mappings",
        "Channel Catalogs - Exclusion Filters",
        "Channel Catalogs - Products",
        "Channel Catalogs - Products Overrides",
        "Channel Catalogs - Products Optimisation",
        "Channel Catalogs - Exportations"
      ]
    },
    {
      "name": "Marketplaces - Channel catalogs",
      "tags": [
        "Marketplaces - Channel catalogs - Global",
        "Marketplaces - Channel catalogs - Publications",
        "Marketplaces - Channel catalogs - Settings"
      ]
    },
    {
      "name": "Marketplaces - Orders",
      "tags": [
        "Marketplaces - Orders - Global",
        "Marketplaces - Orders - AutoTransitions",
        "Marketplaces - Orders - List",
        "Marketplaces - Orders - Order",
        "Marketplaces - Orders - Batches",
        "Marketplaces - Orders - Exports"
      ]
    },
    {
      "name": "Analytics",
      "tags": [
        "Analytics - Global",
        "Analytics - Tracking",
        "Analytics - Statistics",
        "Analytics - Rules",
        "Analytics - Reports",
        "Analytics - Optimisations"
      ]
    }
  ],
  "parameters": {
    "executionId": {
      "name": "executionId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid",
      "description": "The execution identifier of you catalog importation"
    },
    "catalogColumnId": {
      "name": "columnId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid",
      "description": "The catalog column identifier"
    },
    "customColumnId": {
      "name": "columnId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid",
      "description": "The custom column identifier"
    },
    "productSampleIndex": {
      "name": "productSampleIndex",
      "in": "path",
      "description": "Index of the product sample. Starting from 0 to 99.",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 0,
      "maximum": 99
    },
    "channelIdParameter": {
      "name": "channelId",
      "in": "path",
      "required": true,
      "description": "The channel identifier",
      "type": "string",
      "format": "guid",
      "x-example": "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    },
    "channelCatalogIdParameter": {
      "name": "channelCatalogId",
      "in": "path",
      "required": true,
      "description": "The channel catalog identifier",
      "type": "string",
      "format": "guid",
      "x-example": "6d6b04de-406b-4539-8e7e-bf3e8da5dfb0"
    },
    "productIdParameter": {
      "name": "productId",
      "description": "The product identifier",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid",
      "x-example": "578419df-1bbf-41a6-96fa-862e42182b67"
    },
    "exportFormatInQueryGeneralParameter": {
      "description": "The file type of the exportation",
      "name": "format",
      "in": "query",
      "required": true,
      "type": "string",
      "enum": [
        "xlsx",
        "csv"
      ]
    },
    "marketplaceTechnicalCodeParameter": {
      "description": "The marketplace technical code",
      "name": "marketplaceTechnicalCode",
      "in": "path",
      "required": true,
      "type": "string",
      "x-example": "Amazon"
    },
    "accountIdParameter": {
      "description": "The account identifier",
      "name": "accountId",
      "in": "path",
      "required": true,
      "type": "integer",
      "format": "int32",
      "x-example": 1001
    },
    "beezUPOrderIdParameter": {
      "description": "The BeezUP Order identifier",
      "name": "beezUPOrderId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-example": "00000000000000000000000000000000000000000000000"
    },
    "changeOrderTypeParameter": {
      "description": "The Order change type",
      "name": "changeOrderType",
      "in": "path",
      "required": true,
      "type": "string",
      "x-lov": "OrderChangeBusinessOperationType"
    },
    "userNameInQueryParameter": {
      "name": "userName",
      "description": "Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.",
      "in": "query",
      "required": true,
      "type": "string"
    },
    "testModeInQueryParameter": {
      "name": "testMode",
      "description": "If true, the operation will be not be sent to marketplace. But the validation will be taken in account.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-example": false
    },
    "ruleIdOnlyGeneralParameters": {
      "name": "ruleId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid",
      "description": "Your rule identifier"
    },
    "reportFilterIdOnlyGeneralParameters": {
      "name": "reportFilterId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid",
      "description": "Your report filter identifier"
    },
    "optimisationActionNameGeneralParameters": {
      "name": "actionName",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "reenable",
        "disable"
      ],
      "format": "optimisationActionName"
    },
    "storeIdOnlyGeneralParameters": {
      "name": "storeId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "guid",
      "description": "Your store identifier"
    },
    "pageNumberQueryStrngParameter": {
      "name": "pageNumber",
      "description": "The page number you want to get",
      "in": "query",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 1,
      "x-example": 1
    },
    "pageSizeQueryStrngParameter": {
      "name": "pageSize",
      "description": "The entry count you want to get",
      "in": "query",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 25,
      "maximum": 100,
      "x-example": 25
    },
    "ifNoneMatchParameter": {
      "name": "If-None-Match",
      "type": "string",
      "in": "header",
      "required": false,
      "description": "ETag value to identify the last known version of requested resource.\\\nTo avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\\nIf the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
    },
    "ifMatchParameter": {
      "name": "If-Match",
      "in": "header",
      "type": "string",
      "required": true,
      "description": "ETag value to identify the last known version of requested resource.\\\nTo ensure that you are making a change on the lastest version of the resource.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
    },
    "acceptLanguageParameter": {
      "name": "Accept-Language",
      "description": "Indicates that the client accepts the following languages.",
      "in": "header",
      "required": false,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "acceptEncodingRequiredParameter": {
      "name": "Accept-Encoding",
      "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.",
      "in": "header",
      "required": true,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "acceptEncodingOptionalParameter": {
      "name": "Accept-Encoding",
      "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.",
      "in": "header",
      "required": false,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    }
  },
  "responses": {
    "importStarted": {
      "description": "Catalog importation started",
      "headers": {
        "Location": {
          "description": "The location of the new resource to poll",
          "type": "string",
          "x-example": "/v2/user/catalogs/a42b780d-4585-4566-800e-4d77a4d6f8a3/importations/222ef571-bdb7-436d-a01a-e5a0e9161c0c"
        },
        "Retry-After": {
          "description": "The duration in second to wait before polling this resource",
          "type": "integer",
          "minimum": 5,
          "default": 5,
          "x-example": 5
        }
      },
      "schema": {
        "$ref": "#/definitions/links.Importation_GetImportationMonitoringLink"
      }
    },
    "importAlreadyInProgress": {
      "description": "A catalog importation is already in progress!",
      "schema": {
        "$ref": "#/definitions/importAlreadyInProgressResponse"
      }
    },
    "processingResponse": {
      "description": "The marketplace configuration related to this channel catalog is currently in progress. Please retry later.",
      "headers": {
        "Retry-After": {
          "description": "Indicate the duration to before the next retry in second.",
          "type": "integer",
          "format": "int32",
          "x-example": 120
        }
      }
    },
    "StoreNotFoundResponse": {
      "description": "Store or resource not found",
      "schema": {
        "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
      }
    },
    "BadRequestResponse": {
      "description": "Invalid request",
      "schema": {
        "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
      }
    },
    "GeneralError": {
      "description": "Occurs when something goes wrong",
      "schema": {
        "$ref": "#/definitions/BeezUP.Common.ErrorResponseMessage"
      }
    },
    "304_NotModified": {
      "description": "The ETag sent in the http header If-None-Match did not change. So you are up to date !",
      "headers": {
        "Last-Modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification UTC date of the resource\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
        },
        "ETag": {
          "type": "string",
          "description": "ETag value to identify the current version of the resource\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
        }
      }
    },
    "412_PreConditionFailed": {
      "description": "The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource.",
      "headers": {
        "ETag": {
          "type": "string",
          "description": "The ETag value to identify the resource.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
        }
      }
    }
  }
}